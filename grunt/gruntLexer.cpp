/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : grunt.g
 *     -                            On : 2009-03-20 09:47:20
 *     -                 for the lexer : gruntLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "gruntLexer.h"
/* ----------------------------------------- */


/** String literals used by gruntLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x62, 0x72, 0x65, 0x61, 0x6B,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x63, 0x6F, 0x6E, 0x74, 0x69, 0x6E, 0x75, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x6C, 0x6F, 0x63, 0x61, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x69, 0x66,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x65, 0x6C, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_9[]  = { 0x63, 0x61, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_10[]  = { 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_11[]  = { 0x66, 0x6F, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_12[]  = { 0x77, 0x68, 0x69, 0x6C, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_13[]  = { 0x64, 0x6F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_14[]  = { 0x2B, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_15[]  = { 0x2D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_16[]  = { 0x2A, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_17[]  = { 0x2F, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_18[]  = { 0x25, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_19[]  = { 0x3C, 0x3C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_20[]  = { 0x3E, 0x3E, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_21[]  = { 0x26, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_22[]  = { 0x7C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_23[]  = { 0x5E, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_24[]  = { 0x7C, 0x7C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_25[]  = { 0x26, 0x26,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_26[]  = { 0x3D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_27[]  = { 0x21, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_28[]  = { 0x3C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_29[]  = { 0x3E, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_30[]  = { 0x3C, 0x3C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_31[]  = { 0x3E, 0x3E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_32[]  = { 0x2B, 0x2B,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_33[]  = { 0x2D, 0x2D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_34[]  = { 0x5F, 0x5F, 0x74, 0x68, 0x69, 0x73, 0x5F, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x5F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_35[]  = { 0x30, 0x78,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_36[]  = { 0x5C, 0x22,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_37[]  = { 0x5C, 0x5C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_38[]  = { 0x5C, 0x27,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_39[]  = { 0x5C, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_40[]  = { 0x5C, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_41[]  = { 0x5C, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_42[]  = { 0x5C, 0x75,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_43[]  = { 0x2F, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_44[]  = { 0x2F, 0x2A,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_45[]  = { 0x2A, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_46[]  = { 0x69, 0x6E, 0x63, 0x6C, 0x75, 0x64, 0x65,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pgruntLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pgruntLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pgruntLexer_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

 
/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER		    
#undef	    RULEMEMO		    
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or 16 bit input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_ASCII) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_ASCII

/* 8 bit "ASCII" (actually any 8 bit character set) */

#  define	    NEXTCHAR			((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP				((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR			((pANTLR3_UINT16)(INPUT->nextChar)) 
#  define	    DATAP				((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define	    CONSUME()											\
{																	\
    if	(NEXTCHAR < (DATAP + INPUT->sizeBuf))						\
    {																\
		INPUT->charPositionInLine++;								\
		if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)		\
		{															\
			INPUT->line++;											\
			INPUT->charPositionInLine	= 0;						\
			INPUT->currentLine		= (void *)(NEXTCHAR + 1);		\
		}															\
		INPUT->nextChar = (void *)(NEXTCHAR + 1);					\
    }																\
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()				INPUT->istream->consume(INPUT->istream)
#define	    LA(n)					INPUT->istream->_LA(INPUT->istream, n)

#endif
#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void	mT__77    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__78    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__79    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__80    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__81    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__82    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__83    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__84    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__85    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__86    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__87    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__88    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__89    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__90    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__91    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__92    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__93    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__94    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__95    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__96    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__97    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__98    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__99    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__100    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__101    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__102    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__103    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__104    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__105    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__106    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__107    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__108    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__109    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__110    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__111    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__112    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__113    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__114    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__115    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__116    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__117    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__118    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__119    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__120    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__121    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__122    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__123    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__124    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__125    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__126    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__127    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__128    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__129    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__130    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__131    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__132    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__133    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mT__134    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mIDENTIFIER    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mSTRING_LITERAL    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mDECIMAL_INTEGER_LITERAL    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mHEXADECIMAL_INTEGER_LITERAL    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mFLOAT_LITERAL    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mFLOAT_EXPONENT    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mSTRING_BASIC_CHAR    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mSTRING_ESC_SEQ    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mSL_COMMENT    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mML_COMMENT    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mWS    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mINCLUDE_FILENAME    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mLINE_COMMAND    (pgruntLexer ctx);
static ANTLR3_INLINE  void	mTokens    (pgruntLexer ctx);
static void	gruntLexerFree(pgruntLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
gruntLexerFree  (pgruntLexer ctx)
{
    LEXER->free(LEXER);
    
    ANTLR3_FREE(ctx);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "grunt.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called gruntLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return 
 *     - Success pgruntLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pgruntLexer gruntLexerNew         
(pANTLR3_INPUT_STREAM instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return gruntLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called gruntLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return 
 *     - Success pgruntLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pgruntLexer gruntLexerNewSSD         
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pgruntLexer ctx; // Context structure we will build and return

    ctx = (pgruntLexer) ANTLR3_CALLOC(1, sizeof(gruntLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in gruntLexer.h here so you can get a sense
     * of what goes where.
     */
    
    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);
    
    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our gruntLexer interface
     */
    ctx->mT__77	= mT__77;
    ctx->mT__78	= mT__78;
    ctx->mT__79	= mT__79;
    ctx->mT__80	= mT__80;
    ctx->mT__81	= mT__81;
    ctx->mT__82	= mT__82;
    ctx->mT__83	= mT__83;
    ctx->mT__84	= mT__84;
    ctx->mT__85	= mT__85;
    ctx->mT__86	= mT__86;
    ctx->mT__87	= mT__87;
    ctx->mT__88	= mT__88;
    ctx->mT__89	= mT__89;
    ctx->mT__90	= mT__90;
    ctx->mT__91	= mT__91;
    ctx->mT__92	= mT__92;
    ctx->mT__93	= mT__93;
    ctx->mT__94	= mT__94;
    ctx->mT__95	= mT__95;
    ctx->mT__96	= mT__96;
    ctx->mT__97	= mT__97;
    ctx->mT__98	= mT__98;
    ctx->mT__99	= mT__99;
    ctx->mT__100	= mT__100;
    ctx->mT__101	= mT__101;
    ctx->mT__102	= mT__102;
    ctx->mT__103	= mT__103;
    ctx->mT__104	= mT__104;
    ctx->mT__105	= mT__105;
    ctx->mT__106	= mT__106;
    ctx->mT__107	= mT__107;
    ctx->mT__108	= mT__108;
    ctx->mT__109	= mT__109;
    ctx->mT__110	= mT__110;
    ctx->mT__111	= mT__111;
    ctx->mT__112	= mT__112;
    ctx->mT__113	= mT__113;
    ctx->mT__114	= mT__114;
    ctx->mT__115	= mT__115;
    ctx->mT__116	= mT__116;
    ctx->mT__117	= mT__117;
    ctx->mT__118	= mT__118;
    ctx->mT__119	= mT__119;
    ctx->mT__120	= mT__120;
    ctx->mT__121	= mT__121;
    ctx->mT__122	= mT__122;
    ctx->mT__123	= mT__123;
    ctx->mT__124	= mT__124;
    ctx->mT__125	= mT__125;
    ctx->mT__126	= mT__126;
    ctx->mT__127	= mT__127;
    ctx->mT__128	= mT__128;
    ctx->mT__129	= mT__129;
    ctx->mT__130	= mT__130;
    ctx->mT__131	= mT__131;
    ctx->mT__132	= mT__132;
    ctx->mT__133	= mT__133;
    ctx->mT__134	= mT__134;
    ctx->mIDENTIFIER	= mIDENTIFIER;
    ctx->mSTRING_LITERAL	= mSTRING_LITERAL;
    ctx->mDECIMAL_INTEGER_LITERAL	= mDECIMAL_INTEGER_LITERAL;
    ctx->mHEXADECIMAL_INTEGER_LITERAL	= mHEXADECIMAL_INTEGER_LITERAL;
    ctx->mFLOAT_LITERAL	= mFLOAT_LITERAL;
    ctx->mFLOAT_EXPONENT	= mFLOAT_EXPONENT;
    ctx->mSTRING_BASIC_CHAR	= mSTRING_BASIC_CHAR;
    ctx->mSTRING_ESC_SEQ	= mSTRING_ESC_SEQ;
    ctx->mSL_COMMENT	= mSL_COMMENT;
    ctx->mML_COMMENT	= mML_COMMENT;
    ctx->mWS	= mWS;
    ctx->mINCLUDE_FILENAME	= mINCLUDE_FILENAME;
    ctx->mLINE_COMMAND	= mLINE_COMMAND;
    ctx->mTokens	= mTokens;
    
    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;
    
    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);
    
    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= gruntLexerFree;

    
    


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}

/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | IDENTIFIER | STRING_LITERAL | DECIMAL_INTEGER_LITERAL | HEXADECIMAL_INTEGER_LITERAL | FLOAT_LITERAL | SL_COMMENT | ML_COMMENT | WS | LINE_COMMAND );
 */
static const ANTLR3_INT32 dfa26_eot[161] =
    {
	-1, -1, 36, 36, 36, 36, 48, -1, 36, 36, -1, -1, 36, 36, -1, -1, -1, 36, 
	36, 59, 62, 64, 68, 70, 73, 76, 79, 82, 84, -1, 86, -1, 88, -1, -1, 36, 
	-1, -1, 91, 91, -1, -1, 36, 36, 36, 36, 36, -1, -1, 36, 36, 100, 36, 36, 
	36, 104, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 107, 
	-1, -1, 109, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, 
	-1, -1, 91, 36, 36, 36, 36, 36, 36, 117, -1, 36, 36, 36, -1, 36, -1, -1, 
	-1, -1, 36, 36, 36, 125, 36, 36, 36, -1, 129, 36, 36, 36, 36, 134, 36, 
	-1, 36, 137, 36, -1, 36, 36, 141, 36, -1, 36, 144, -1, 36, 146, 36, -1, 
	36, 36, -1, 36, -1, 151, 36, 153, 154, -1, 36, -1, -1, 36, 36, 36, 36, 
	160, -1
    };
static const ANTLR3_INT32 dfa26_eof[161] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa26_min[161] =
    {
	9, -1, 114, 97, 101, 111, 61, -1, 111, 102, -1, -1, 108, 119, -1, -1, 
	-1, 101, 104, 43, 45, 61, 42, 61, 60, 61, 38, 61, 61, -1, 61, -1, 48, -1, 
	-1, 95, -1, -1, 46, 46, -1, -1, 101, 110, 115, 116, 99, -1, -1, 110, 114, 
	48, 115, 105, 102, 48, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 61, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 116, -1, -1, 46, 97, 116, 101, 117, 97, 99, 48, -1, 101, 116, 
	97, -1, 108, -1, -1, -1, -1, 104, 107, 105, 48, 114, 108, 116, -1, 48, 
	99, 117, 101, 105, 48, 110, -1, 110, 48, 105, -1, 104, 108, 48, 115, -1, 
	117, 48, -1, 111, 48, 116, -1, 95, 101, -1, 110, -1, 48, 102, 48, 48, -1, 
	117, -1, -1, 110, 99, 95, 95, 48, -1
    };
static const ANTLR3_INT32 dfa26_max[161] =
    {
	126, -1, 114, 111, 101, 111, 61, -1, 117, 102, -1, -1, 108, 119, -1, -1, 
	-1, 111, 104, 61, 61, 61, 61, 61, 61, 62, 61, 124, 61, -1, 61, -1, 57, 
	-1, -1, 95, -1, -1, 120, 102, -1, -1, 101, 110, 115, 116, 99, -1, -1, 110, 
	114, 122, 115, 105, 102, 122, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 61, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 116, -1, -1, 102, 97, 116, 101, 117, 97, 99, 122, -1, 
	101, 116, 97, -1, 108, -1, -1, -1, -1, 104, 107, 105, 122, 114, 108, 116, 
	-1, 122, 99, 117, 101, 105, 122, 110, -1, 110, 122, 105, -1, 104, 108, 
	122, 115, -1, 117, 122, -1, 111, 122, 116, -1, 95, 101, -1, 110, -1, 122, 
	102, 122, 122, -1, 117, -1, -1, 110, 99, 95, 95, 122, -1
    };
static const ANTLR3_INT32 dfa26_accept[161] =
    {
	-1, 1, -1, -1, -1, -1, -1, 7, -1, -1, 10, 11, -1, -1, 14, 15, 17, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, 51, -1, 56, 57, -1, 
	59, 60, -1, -1, 66, 67, -1, -1, -1, -1, -1, 38, 6, -1, -1, -1, -1, -1, 
	-1, -1, -1, 22, 53, 46, 23, 54, 47, 24, 49, 25, 64, 65, 50, 26, 48, -1, 
	41, 40, -1, 43, 42, 29, 34, 37, 30, 33, 35, 31, 36, 39, 52, 63, 55, -1, 
	62, 61, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 21, -1, 27, 44, 
	28, 45, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, 16, 
	-1, -1, -1, 12, -1, -1, -1, -1, 2, -1, -1, 5, -1, -1, -1, 20, -1, -1, 4, 
	-1, 13, -1, -1, -1, -1, 18, -1, 3, 8, -1, -1, -1, -1, -1, 58
    };
static const ANTLR3_INT32 dfa26_special[161] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa26_T_empty	    NULL

static const ANTLR3_INT32 dfa26_T0[] =
    {
	87, -1, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 87, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 87, 87
    };static const ANTLR3_INT32 dfa26_T1[] =
    {
	111
    };static const ANTLR3_INT32 dfa26_T2[] =
    {
	93
    };static const ANTLR3_INT32 dfa26_T3[] =
    {
	118
    };static const ANTLR3_INT32 dfa26_T4[] =
    {
	123
    };static const ANTLR3_INT32 dfa26_T5[] =
    {
	101
    };static const ANTLR3_INT32 dfa26_T6[] =
    {
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1, -1, -1, -1, -1, -1, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, -1, -1, -1, -1, 36, -1, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36
    };static const ANTLR3_INT32 dfa26_T7[] =
    {
	112
    };static const ANTLR3_INT32 dfa26_T8[] =
    {
	94
    };static const ANTLR3_INT32 dfa26_T9[] =
    {
	135
    };static const ANTLR3_INT32 dfa26_T10[] =
    {
	130
    };static const ANTLR3_INT32 dfa26_T11[] =
    {
	124
    };static const ANTLR3_INT32 dfa26_T12[] =
    {
	119
    };static const ANTLR3_INT32 dfa26_T13[] =
    {
	149
    };static const ANTLR3_INT32 dfa26_T14[] =
    {
	102
    };static const ANTLR3_INT32 dfa26_T15[] =
    {
	143
    };static const ANTLR3_INT32 dfa26_T16[] =
    {
	139
    };static const ANTLR3_INT32 dfa26_T17[] =
    {
	96
    };static const ANTLR3_INT32 dfa26_T18[] =
    {
	114
    };static const ANTLR3_INT32 dfa26_T19[] =
    {
	126
    };static const ANTLR3_INT32 dfa26_T20[] =
    {
	136
    };static const ANTLR3_INT32 dfa26_T21[] =
    {
	95
    };static const ANTLR3_INT32 dfa26_T22[] =
    {
	113
    };static const ANTLR3_INT32 dfa26_T23[] =
    {
	97
    };static const ANTLR3_INT32 dfa26_T24[] =
    {
	115
    };static const ANTLR3_INT32 dfa26_T25[] =
    {
	155
    };static const ANTLR3_INT32 dfa26_T26[] =
    {
	156
    };static const ANTLR3_INT32 dfa26_T27[] =
    {
	127
    };static const ANTLR3_INT32 dfa26_T28[] =
    {
	148
    };static const ANTLR3_INT32 dfa26_T29[] =
    {
	152
    };static const ANTLR3_INT32 dfa26_T30[] =
    {
	40, 40, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 40, 30, 37, 41, -1, 23, 26, -1, 10, 11, 21, 19, 7, 
	20, 32, 22, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 16, 1, 24, 6, 25, 29, 
	-1, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 36, 36, 36, 36, 36, 36, 36, 33, -1, 34, 28, 35, -1, 36, 2, 3, 17, 
	12, 8, 36, 36, 9, 36, 36, 5, 36, 36, 36, 36, 36, 4, 13, 36, 36, 36, 18, 
	36, 36, 36, 14, 27, 15, 31
    };static const ANTLR3_INT32 dfa26_T31[] =
    {
	159
    };static const ANTLR3_INT32 dfa26_T32[] =
    {
	157
    };static const ANTLR3_INT32 dfa26_T33[] =
    {
	158
    };static const ANTLR3_INT32 dfa26_T34[] =
    {
	116
    };static const ANTLR3_INT32 dfa26_T35[] =
    {
	98
    };static const ANTLR3_INT32 dfa26_T36[] =
    {
	128
    };static const ANTLR3_INT32 dfa26_T37[] =
    {
	138
    };static const ANTLR3_INT32 dfa26_T38[] =
    {
	145
    };static const ANTLR3_INT32 dfa26_T39[] =
    {
	150
    };static const ANTLR3_INT32 dfa26_T40[] =
    {
	142
    };static const ANTLR3_INT32 dfa26_T41[] =
    {
	133
    };static const ANTLR3_INT32 dfa26_T42[] =
    {
	122
    };static const ANTLR3_INT32 dfa26_T43[] =
    {
	110
    };static const ANTLR3_INT32 dfa26_T44[] =
    {
	58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	57
    };static const ANTLR3_INT32 dfa26_T45[] =
    {
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87
    };static const ANTLR3_INT32 dfa26_T46[] =
    {
	61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60
    };static const ANTLR3_INT32 dfa26_T47[] =
    {
	85
    };static const ANTLR3_INT32 dfa26_T48[] =
    {
	147
    };static const ANTLR3_INT32 dfa26_T49[] =
    {
	140
    };static const ANTLR3_INT32 dfa26_T50[] =
    {
	103
    };static const ANTLR3_INT32 dfa26_T51[] =
    {
	131
    };static const ANTLR3_INT32 dfa26_T52[] =
    {
	87, -1, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 87, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 87, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 90
    };static const ANTLR3_INT32 dfa26_T53[] =
    {
	120
    };static const ANTLR3_INT32 dfa26_T54[] =
    {
	99
    };static const ANTLR3_INT32 dfa26_T55[] =
    {
	83
    };static const ANTLR3_INT32 dfa26_T56[] =
    {
	105
    };static const ANTLR3_INT32 dfa26_T57[] =
    {
	121
    };static const ANTLR3_INT32 dfa26_T58[] =
    {
	132
    };static const ANTLR3_INT32 dfa26_T59[] =
    {
	54, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55
    };static const ANTLR3_INT32 dfa26_T60[] =
    {
	45
    };static const ANTLR3_INT32 dfa26_T61[] =
    {
	80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 81
    };static const ANTLR3_INT32 dfa26_T62[] =
    {
	67, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 65
    };static const ANTLR3_INT32 dfa26_T63[] =
    {
	42
    };static const ANTLR3_INT32 dfa26_T64[] =
    {
	51
    };static const ANTLR3_INT32 dfa26_T65[] =
    {
	46
    };static const ANTLR3_INT32 dfa26_T66[] =
    {
	53
    };static const ANTLR3_INT32 dfa26_T67[] =
    {
	71, 72
    };static const ANTLR3_INT32 dfa26_T68[] =
    {
	89
    };static const ANTLR3_INT32 dfa26_T69[] =
    {
	52
    };static const ANTLR3_INT32 dfa26_T70[] =
    {
	50, -1, -1, -1, -1, -1, 49
    };static const ANTLR3_INT32 dfa26_T71[] =
    {
	69
    };static const ANTLR3_INT32 dfa26_T72[] =
    {
	63
    };static const ANTLR3_INT32 dfa26_T73[] =
    {
	44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43
    };static const ANTLR3_INT32 dfa26_T74[] =
    {
	108
    };static const ANTLR3_INT32 dfa26_T75[] =
    {
	56
    };static const ANTLR3_INT32 dfa26_T76[] =
    {
	78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 77
    };static const ANTLR3_INT32 dfa26_T77[] =
    {
	47
    };static const ANTLR3_INT32 dfa26_T78[] =
    {
	106
    };static const ANTLR3_INT32 dfa26_T79[] =
    {
	75, 74
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa26_transitions[] =
{
    dfa26_T30, dfa26_T_empty, dfa26_T63, dfa26_T73, dfa26_T60, dfa26_T65, 
    dfa26_T77, dfa26_T_empty, dfa26_T70, dfa26_T64, dfa26_T_empty, dfa26_T_empty, 
    dfa26_T69, dfa26_T66, dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, dfa26_T59, 
    dfa26_T75, dfa26_T44, dfa26_T46, dfa26_T72, dfa26_T62, dfa26_T71, dfa26_T67, 
    dfa26_T79, dfa26_T76, dfa26_T61, dfa26_T55, dfa26_T_empty, dfa26_T47, 
    dfa26_T_empty, dfa26_T45, dfa26_T_empty, dfa26_T_empty, dfa26_T68, dfa26_T_empty, 
    dfa26_T_empty, dfa26_T52, dfa26_T0, dfa26_T_empty, dfa26_T_empty, dfa26_T2, 
    dfa26_T8, dfa26_T21, dfa26_T17, dfa26_T23, dfa26_T_empty, dfa26_T_empty, 
    dfa26_T35, dfa26_T54, dfa26_T6, dfa26_T5, dfa26_T14, dfa26_T50, dfa26_T6, 
    dfa26_T56, dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, 
    dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, 
    dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, 
    dfa26_T78, dfa26_T_empty, dfa26_T_empty, dfa26_T74, dfa26_T_empty, dfa26_T_empty, 
    dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, 
    dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, 
    dfa26_T_empty, dfa26_T_empty, dfa26_T43, dfa26_T_empty, dfa26_T_empty, 
    dfa26_T0, dfa26_T1, dfa26_T7, dfa26_T22, dfa26_T18, dfa26_T24, dfa26_T34, 
    dfa26_T6, dfa26_T_empty, dfa26_T3, dfa26_T12, dfa26_T53, dfa26_T_empty, 
    dfa26_T57, dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, dfa26_T_empty, 
    dfa26_T42, dfa26_T4, dfa26_T11, dfa26_T6, dfa26_T19, dfa26_T27, dfa26_T36, 
    dfa26_T_empty, dfa26_T6, dfa26_T10, dfa26_T51, dfa26_T58, dfa26_T41, 
    dfa26_T6, dfa26_T9, dfa26_T_empty, dfa26_T20, dfa26_T6, dfa26_T37, dfa26_T_empty, 
    dfa26_T16, dfa26_T49, dfa26_T6, dfa26_T40, dfa26_T_empty, dfa26_T15, 
    dfa26_T6, dfa26_T_empty, dfa26_T38, dfa26_T6, dfa26_T48, dfa26_T_empty, 
    dfa26_T28, dfa26_T13, dfa26_T_empty, dfa26_T39, dfa26_T_empty, dfa26_T6, 
    dfa26_T29, dfa26_T6, dfa26_T6, dfa26_T_empty, dfa26_T25, dfa26_T_empty, 
    dfa26_T_empty, dfa26_T26, dfa26_T32, dfa26_T33, dfa26_T31, dfa26_T6, 
    dfa26_T_empty	
};


/* Declare tracking structure for Cyclic DFA 26
 */
static
ANTLR3_CYCLIC_DFA cdfa26
    =	{
	    26,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1:1: Tokens : ( T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | IDENTIFIER | STRING_LITERAL | DECIMAL_INTEGER_LITERAL | HEXADECIMAL_INTEGER_LITERAL | FLOAT_LITERAL | SL_COMMENT | ML_COMMENT | WS | LINE_COMMAND );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa26_eot,	    /* EOT table			    */
	    dfa26_eof,	    /* EOF table			    */
	    dfa26_min,	    /* Minimum tokens for each state    */
	    dfa26_max,	    /* Maximum tokens for each state    */
	    dfa26_accept,	/* Accept table			    */
	    dfa26_special,	/* Special transition states	    */
	    dfa26_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 26
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */ 

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 7:7: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__77
 *
 * Looks to match the characters the constitute the token T__77
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__77(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__77;
       
    
    // grunt.g:7:7: ( ';' )
    // grunt.g:7:9: ';'
    {
        MATCHC(';'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__77Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__77Ex; /* Prevent compiler warnings */
    ruleT__77Ex: ;

}
// $ANTLR end T__77

//   Comes from: 8:7: ( 'break' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__78
 *
 * Looks to match the characters the constitute the token T__78
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__78(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__78;
       
    
    // grunt.g:8:7: ( 'break' )
    // grunt.g:8:9: 'break'
    {
        MATCHS(lit_1); 
        if  (HASEXCEPTION())
        {
            goto ruleT__78Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__78Ex; /* Prevent compiler warnings */
    ruleT__78Ex: ;

}
// $ANTLR end T__78

//   Comes from: 9:7: ( 'continue' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__79
 *
 * Looks to match the characters the constitute the token T__79
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__79(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__79;
       
    
    // grunt.g:9:7: ( 'continue' )
    // grunt.g:9:9: 'continue'
    {
        MATCHS(lit_2); 
        if  (HASEXCEPTION())
        {
            goto ruleT__79Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__79Ex; /* Prevent compiler warnings */
    ruleT__79Ex: ;

}
// $ANTLR end T__79

//   Comes from: 10:7: ( 'return' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__80
 *
 * Looks to match the characters the constitute the token T__80
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__80(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__80;
       
    
    // grunt.g:10:7: ( 'return' )
    // grunt.g:10:9: 'return'
    {
        MATCHS(lit_3); 
        if  (HASEXCEPTION())
        {
            goto ruleT__80Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__80Ex; /* Prevent compiler warnings */
    ruleT__80Ex: ;

}
// $ANTLR end T__80

//   Comes from: 11:7: ( 'local' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__81
 *
 * Looks to match the characters the constitute the token T__81
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__81(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__81;
       
    
    // grunt.g:11:7: ( 'local' )
    // grunt.g:11:9: 'local'
    {
        MATCHS(lit_4); 
        if  (HASEXCEPTION())
        {
            goto ruleT__81Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__81Ex; /* Prevent compiler warnings */
    ruleT__81Ex: ;

}
// $ANTLR end T__81

//   Comes from: 12:7: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__82
 *
 * Looks to match the characters the constitute the token T__82
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__82(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__82;
       
    
    // grunt.g:12:7: ( '=' )
    // grunt.g:12:9: '='
    {
        MATCHC('='); 
        if  (HASEXCEPTION())
        {
            goto ruleT__82Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__82Ex; /* Prevent compiler warnings */
    ruleT__82Ex: ;

}
// $ANTLR end T__82

//   Comes from: 13:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__83
 *
 * Looks to match the characters the constitute the token T__83
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__83(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__83;
       
    
    // grunt.g:13:7: ( ',' )
    // grunt.g:13:9: ','
    {
        MATCHC(','); 
        if  (HASEXCEPTION())
        {
            goto ruleT__83Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__83Ex; /* Prevent compiler warnings */
    ruleT__83Ex: ;

}
// $ANTLR end T__83

//   Comes from: 14:7: ( 'function' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__84
 *
 * Looks to match the characters the constitute the token T__84
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__84(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__84;
       
    
    // grunt.g:14:7: ( 'function' )
    // grunt.g:14:9: 'function'
    {
        MATCHS(lit_5); 
        if  (HASEXCEPTION())
        {
            goto ruleT__84Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__84Ex; /* Prevent compiler warnings */
    ruleT__84Ex: ;

}
// $ANTLR end T__84

//   Comes from: 15:7: ( 'if' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__85
 *
 * Looks to match the characters the constitute the token T__85
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__85(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__85;
       
    
    // grunt.g:15:7: ( 'if' )
    // grunt.g:15:9: 'if'
    {
        MATCHS(lit_6); 
        if  (HASEXCEPTION())
        {
            goto ruleT__85Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__85Ex; /* Prevent compiler warnings */
    ruleT__85Ex: ;

}
// $ANTLR end T__85

//   Comes from: 16:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__86
 *
 * Looks to match the characters the constitute the token T__86
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__86(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__86;
       
    
    // grunt.g:16:7: ( '(' )
    // grunt.g:16:9: '('
    {
        MATCHC('('); 
        if  (HASEXCEPTION())
        {
            goto ruleT__86Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__86Ex; /* Prevent compiler warnings */
    ruleT__86Ex: ;

}
// $ANTLR end T__86

//   Comes from: 17:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__87
 *
 * Looks to match the characters the constitute the token T__87
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__87(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__87;
       
    
    // grunt.g:17:7: ( ')' )
    // grunt.g:17:9: ')'
    {
        MATCHC(')'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__87Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__87Ex; /* Prevent compiler warnings */
    ruleT__87Ex: ;

}
// $ANTLR end T__87

//   Comes from: 18:7: ( 'else' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__88
 *
 * Looks to match the characters the constitute the token T__88
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__88(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__88;
       
    
    // grunt.g:18:7: ( 'else' )
    // grunt.g:18:9: 'else'
    {
        MATCHS(lit_7); 
        if  (HASEXCEPTION())
        {
            goto ruleT__88Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__88Ex; /* Prevent compiler warnings */
    ruleT__88Ex: ;

}
// $ANTLR end T__88

//   Comes from: 19:7: ( 'switch' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__89
 *
 * Looks to match the characters the constitute the token T__89
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__89(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__89;
       
    
    // grunt.g:19:7: ( 'switch' )
    // grunt.g:19:9: 'switch'
    {
        MATCHS(lit_8); 
        if  (HASEXCEPTION())
        {
            goto ruleT__89Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__89Ex; /* Prevent compiler warnings */
    ruleT__89Ex: ;

}
// $ANTLR end T__89

//   Comes from: 20:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__90
 *
 * Looks to match the characters the constitute the token T__90
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__90(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__90;
       
    
    // grunt.g:20:7: ( '{' )
    // grunt.g:20:9: '{'
    {
        MATCHC('{'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__90Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__90Ex; /* Prevent compiler warnings */
    ruleT__90Ex: ;

}
// $ANTLR end T__90

//   Comes from: 21:7: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__91
 *
 * Looks to match the characters the constitute the token T__91
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__91(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__91;
       
    
    // grunt.g:21:7: ( '}' )
    // grunt.g:21:9: '}'
    {
        MATCHC('}'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__91Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__91Ex; /* Prevent compiler warnings */
    ruleT__91Ex: ;

}
// $ANTLR end T__91

//   Comes from: 22:7: ( 'case' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__92
 *
 * Looks to match the characters the constitute the token T__92
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__92(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__92;
       
    
    // grunt.g:22:7: ( 'case' )
    // grunt.g:22:9: 'case'
    {
        MATCHS(lit_9); 
        if  (HASEXCEPTION())
        {
            goto ruleT__92Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__92Ex; /* Prevent compiler warnings */
    ruleT__92Ex: ;

}
// $ANTLR end T__92

//   Comes from: 23:7: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__93
 *
 * Looks to match the characters the constitute the token T__93
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__93(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__93;
       
    
    // grunt.g:23:7: ( ':' )
    // grunt.g:23:9: ':'
    {
        MATCHC(':'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__93Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__93Ex; /* Prevent compiler warnings */
    ruleT__93Ex: ;

}
// $ANTLR end T__93

//   Comes from: 24:7: ( 'default' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__94
 *
 * Looks to match the characters the constitute the token T__94
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__94(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__94;
       
    
    // grunt.g:24:7: ( 'default' )
    // grunt.g:24:9: 'default'
    {
        MATCHS(lit_10); 
        if  (HASEXCEPTION())
        {
            goto ruleT__94Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__94Ex; /* Prevent compiler warnings */
    ruleT__94Ex: ;

}
// $ANTLR end T__94

//   Comes from: 25:7: ( 'for' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__95
 *
 * Looks to match the characters the constitute the token T__95
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__95(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__95;
       
    
    // grunt.g:25:7: ( 'for' )
    // grunt.g:25:9: 'for'
    {
        MATCHS(lit_11); 
        if  (HASEXCEPTION())
        {
            goto ruleT__95Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__95Ex; /* Prevent compiler warnings */
    ruleT__95Ex: ;

}
// $ANTLR end T__95

//   Comes from: 26:7: ( 'while' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__96
 *
 * Looks to match the characters the constitute the token T__96
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__96(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__96;
       
    
    // grunt.g:26:7: ( 'while' )
    // grunt.g:26:9: 'while'
    {
        MATCHS(lit_12); 
        if  (HASEXCEPTION())
        {
            goto ruleT__96Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__96Ex; /* Prevent compiler warnings */
    ruleT__96Ex: ;

}
// $ANTLR end T__96

//   Comes from: 27:7: ( 'do' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__97
 *
 * Looks to match the characters the constitute the token T__97
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__97(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__97;
       
    
    // grunt.g:27:7: ( 'do' )
    // grunt.g:27:9: 'do'
    {
        MATCHS(lit_13); 
        if  (HASEXCEPTION())
        {
            goto ruleT__97Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__97Ex; /* Prevent compiler warnings */
    ruleT__97Ex: ;

}
// $ANTLR end T__97

//   Comes from: 28:7: ( '+=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__98
 *
 * Looks to match the characters the constitute the token T__98
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__98(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__98;
       
    
    // grunt.g:28:7: ( '+=' )
    // grunt.g:28:9: '+='
    {
        MATCHS(lit_14); 
        if  (HASEXCEPTION())
        {
            goto ruleT__98Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__98Ex; /* Prevent compiler warnings */
    ruleT__98Ex: ;

}
// $ANTLR end T__98

//   Comes from: 29:7: ( '-=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__99
 *
 * Looks to match the characters the constitute the token T__99
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__99(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__99;
       
    
    // grunt.g:29:7: ( '-=' )
    // grunt.g:29:9: '-='
    {
        MATCHS(lit_15); 
        if  (HASEXCEPTION())
        {
            goto ruleT__99Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__99Ex; /* Prevent compiler warnings */
    ruleT__99Ex: ;

}
// $ANTLR end T__99

//   Comes from: 30:8: ( '*=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__100
 *
 * Looks to match the characters the constitute the token T__100
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__100(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__100;
       
    
    // grunt.g:30:8: ( '*=' )
    // grunt.g:30:10: '*='
    {
        MATCHS(lit_16); 
        if  (HASEXCEPTION())
        {
            goto ruleT__100Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__100Ex; /* Prevent compiler warnings */
    ruleT__100Ex: ;

}
// $ANTLR end T__100

//   Comes from: 31:8: ( '/=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__101
 *
 * Looks to match the characters the constitute the token T__101
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__101(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__101;
       
    
    // grunt.g:31:8: ( '/=' )
    // grunt.g:31:10: '/='
    {
        MATCHS(lit_17); 
        if  (HASEXCEPTION())
        {
            goto ruleT__101Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__101Ex; /* Prevent compiler warnings */
    ruleT__101Ex: ;

}
// $ANTLR end T__101

//   Comes from: 32:8: ( '%=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__102
 *
 * Looks to match the characters the constitute the token T__102
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__102(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__102;
       
    
    // grunt.g:32:8: ( '%=' )
    // grunt.g:32:10: '%='
    {
        MATCHS(lit_18); 
        if  (HASEXCEPTION())
        {
            goto ruleT__102Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__102Ex; /* Prevent compiler warnings */
    ruleT__102Ex: ;

}
// $ANTLR end T__102

//   Comes from: 33:8: ( '<<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__103
 *
 * Looks to match the characters the constitute the token T__103
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__103(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__103;
       
    
    // grunt.g:33:8: ( '<<=' )
    // grunt.g:33:10: '<<='
    {
        MATCHS(lit_19); 
        if  (HASEXCEPTION())
        {
            goto ruleT__103Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__103Ex; /* Prevent compiler warnings */
    ruleT__103Ex: ;

}
// $ANTLR end T__103

//   Comes from: 34:8: ( '>>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__104
 *
 * Looks to match the characters the constitute the token T__104
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__104(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__104;
       
    
    // grunt.g:34:8: ( '>>=' )
    // grunt.g:34:10: '>>='
    {
        MATCHS(lit_20); 
        if  (HASEXCEPTION())
        {
            goto ruleT__104Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__104Ex; /* Prevent compiler warnings */
    ruleT__104Ex: ;

}
// $ANTLR end T__104

//   Comes from: 35:8: ( '&=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__105
 *
 * Looks to match the characters the constitute the token T__105
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__105(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__105;
       
    
    // grunt.g:35:8: ( '&=' )
    // grunt.g:35:10: '&='
    {
        MATCHS(lit_21); 
        if  (HASEXCEPTION())
        {
            goto ruleT__105Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__105Ex; /* Prevent compiler warnings */
    ruleT__105Ex: ;

}
// $ANTLR end T__105

//   Comes from: 36:8: ( '|=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__106
 *
 * Looks to match the characters the constitute the token T__106
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__106(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__106;
       
    
    // grunt.g:36:8: ( '|=' )
    // grunt.g:36:10: '|='
    {
        MATCHS(lit_22); 
        if  (HASEXCEPTION())
        {
            goto ruleT__106Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__106Ex; /* Prevent compiler warnings */
    ruleT__106Ex: ;

}
// $ANTLR end T__106

//   Comes from: 37:8: ( '^=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__107
 *
 * Looks to match the characters the constitute the token T__107
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__107(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__107;
       
    
    // grunt.g:37:8: ( '^=' )
    // grunt.g:37:10: '^='
    {
        MATCHS(lit_23); 
        if  (HASEXCEPTION())
        {
            goto ruleT__107Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__107Ex; /* Prevent compiler warnings */
    ruleT__107Ex: ;

}
// $ANTLR end T__107

//   Comes from: 38:8: ( '?' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__108
 *
 * Looks to match the characters the constitute the token T__108
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__108(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__108;
       
    
    // grunt.g:38:8: ( '?' )
    // grunt.g:38:10: '?'
    {
        MATCHC('?'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__108Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__108Ex; /* Prevent compiler warnings */
    ruleT__108Ex: ;

}
// $ANTLR end T__108

//   Comes from: 39:8: ( '||' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__109
 *
 * Looks to match the characters the constitute the token T__109
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__109(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__109;
       
    
    // grunt.g:39:8: ( '||' )
    // grunt.g:39:10: '||'
    {
        MATCHS(lit_24); 
        if  (HASEXCEPTION())
        {
            goto ruleT__109Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__109Ex; /* Prevent compiler warnings */
    ruleT__109Ex: ;

}
// $ANTLR end T__109

//   Comes from: 40:8: ( '&&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__110
 *
 * Looks to match the characters the constitute the token T__110
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__110(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__110;
       
    
    // grunt.g:40:8: ( '&&' )
    // grunt.g:40:10: '&&'
    {
        MATCHS(lit_25); 
        if  (HASEXCEPTION())
        {
            goto ruleT__110Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__110Ex; /* Prevent compiler warnings */
    ruleT__110Ex: ;

}
// $ANTLR end T__110

//   Comes from: 41:8: ( '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__111
 *
 * Looks to match the characters the constitute the token T__111
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__111(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__111;
       
    
    // grunt.g:41:8: ( '|' )
    // grunt.g:41:10: '|'
    {
        MATCHC('|'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__111Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__111Ex; /* Prevent compiler warnings */
    ruleT__111Ex: ;

}
// $ANTLR end T__111

//   Comes from: 42:8: ( '^' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__112
 *
 * Looks to match the characters the constitute the token T__112
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__112(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__112;
       
    
    // grunt.g:42:8: ( '^' )
    // grunt.g:42:10: '^'
    {
        MATCHC('^'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__112Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__112Ex; /* Prevent compiler warnings */
    ruleT__112Ex: ;

}
// $ANTLR end T__112

//   Comes from: 43:8: ( '&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__113
 *
 * Looks to match the characters the constitute the token T__113
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__113(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__113;
       
    
    // grunt.g:43:8: ( '&' )
    // grunt.g:43:10: '&'
    {
        MATCHC('&'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__113Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__113Ex; /* Prevent compiler warnings */
    ruleT__113Ex: ;

}
// $ANTLR end T__113

//   Comes from: 44:8: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__114
 *
 * Looks to match the characters the constitute the token T__114
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__114(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__114;
       
    
    // grunt.g:44:8: ( '==' )
    // grunt.g:44:10: '=='
    {
        MATCHS(lit_26); 
        if  (HASEXCEPTION())
        {
            goto ruleT__114Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__114Ex; /* Prevent compiler warnings */
    ruleT__114Ex: ;

}
// $ANTLR end T__114

//   Comes from: 45:8: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__115
 *
 * Looks to match the characters the constitute the token T__115
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__115(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__115;
       
    
    // grunt.g:45:8: ( '!=' )
    // grunt.g:45:10: '!='
    {
        MATCHS(lit_27); 
        if  (HASEXCEPTION())
        {
            goto ruleT__115Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__115Ex; /* Prevent compiler warnings */
    ruleT__115Ex: ;

}
// $ANTLR end T__115

//   Comes from: 46:8: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__116
 *
 * Looks to match the characters the constitute the token T__116
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__116(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__116;
       
    
    // grunt.g:46:8: ( '<' )
    // grunt.g:46:10: '<'
    {
        MATCHC('<'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__116Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__116Ex; /* Prevent compiler warnings */
    ruleT__116Ex: ;

}
// $ANTLR end T__116

//   Comes from: 47:8: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__117
 *
 * Looks to match the characters the constitute the token T__117
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__117(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__117;
       
    
    // grunt.g:47:8: ( '<=' )
    // grunt.g:47:10: '<='
    {
        MATCHS(lit_28); 
        if  (HASEXCEPTION())
        {
            goto ruleT__117Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__117Ex; /* Prevent compiler warnings */
    ruleT__117Ex: ;

}
// $ANTLR end T__117

//   Comes from: 48:8: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__118
 *
 * Looks to match the characters the constitute the token T__118
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__118(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__118;
       
    
    // grunt.g:48:8: ( '>' )
    // grunt.g:48:10: '>'
    {
        MATCHC('>'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__118Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__118Ex; /* Prevent compiler warnings */
    ruleT__118Ex: ;

}
// $ANTLR end T__118

//   Comes from: 49:8: ( '>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__119
 *
 * Looks to match the characters the constitute the token T__119
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__119(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__119;
       
    
    // grunt.g:49:8: ( '>=' )
    // grunt.g:49:10: '>='
    {
        MATCHS(lit_29); 
        if  (HASEXCEPTION())
        {
            goto ruleT__119Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__119Ex; /* Prevent compiler warnings */
    ruleT__119Ex: ;

}
// $ANTLR end T__119

//   Comes from: 50:8: ( '<<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__120
 *
 * Looks to match the characters the constitute the token T__120
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__120(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__120;
       
    
    // grunt.g:50:8: ( '<<' )
    // grunt.g:50:10: '<<'
    {
        MATCHS(lit_30); 
        if  (HASEXCEPTION())
        {
            goto ruleT__120Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__120Ex; /* Prevent compiler warnings */
    ruleT__120Ex: ;

}
// $ANTLR end T__120

//   Comes from: 51:8: ( '>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__121
 *
 * Looks to match the characters the constitute the token T__121
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__121(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__121;
       
    
    // grunt.g:51:8: ( '>>' )
    // grunt.g:51:10: '>>'
    {
        MATCHS(lit_31); 
        if  (HASEXCEPTION())
        {
            goto ruleT__121Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__121Ex; /* Prevent compiler warnings */
    ruleT__121Ex: ;

}
// $ANTLR end T__121

//   Comes from: 52:8: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__122
 *
 * Looks to match the characters the constitute the token T__122
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__122(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__122;
       
    
    // grunt.g:52:8: ( '+' )
    // grunt.g:52:10: '+'
    {
        MATCHC('+'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__122Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__122Ex; /* Prevent compiler warnings */
    ruleT__122Ex: ;

}
// $ANTLR end T__122

//   Comes from: 53:8: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__123
 *
 * Looks to match the characters the constitute the token T__123
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__123(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__123;
       
    
    // grunt.g:53:8: ( '-' )
    // grunt.g:53:10: '-'
    {
        MATCHC('-'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__123Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__123Ex; /* Prevent compiler warnings */
    ruleT__123Ex: ;

}
// $ANTLR end T__123

//   Comes from: 54:8: ( '%' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__124
 *
 * Looks to match the characters the constitute the token T__124
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__124(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__124;
       
    
    // grunt.g:54:8: ( '%' )
    // grunt.g:54:10: '%'
    {
        MATCHC('%'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__124Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__124Ex; /* Prevent compiler warnings */
    ruleT__124Ex: ;

}
// $ANTLR end T__124

//   Comes from: 55:8: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__125
 *
 * Looks to match the characters the constitute the token T__125
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__125(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__125;
       
    
    // grunt.g:55:8: ( '*' )
    // grunt.g:55:10: '*'
    {
        MATCHC('*'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__125Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__125Ex; /* Prevent compiler warnings */
    ruleT__125Ex: ;

}
// $ANTLR end T__125

//   Comes from: 56:8: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__126
 *
 * Looks to match the characters the constitute the token T__126
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__126(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__126;
       
    
    // grunt.g:56:8: ( '/' )
    // grunt.g:56:10: '/'
    {
        MATCHC('/'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__126Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__126Ex; /* Prevent compiler warnings */
    ruleT__126Ex: ;

}
// $ANTLR end T__126

//   Comes from: 57:8: ( '~' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__127
 *
 * Looks to match the characters the constitute the token T__127
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__127(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__127;
       
    
    // grunt.g:57:8: ( '~' )
    // grunt.g:57:10: '~'
    {
        MATCHC('~'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__127Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__127Ex; /* Prevent compiler warnings */
    ruleT__127Ex: ;

}
// $ANTLR end T__127

//   Comes from: 58:8: ( '!' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__128
 *
 * Looks to match the characters the constitute the token T__128
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__128(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__128;
       
    
    // grunt.g:58:8: ( '!' )
    // grunt.g:58:10: '!'
    {
        MATCHC('!'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__128Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__128Ex; /* Prevent compiler warnings */
    ruleT__128Ex: ;

}
// $ANTLR end T__128

//   Comes from: 59:8: ( '++' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__129
 *
 * Looks to match the characters the constitute the token T__129
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__129(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__129;
       
    
    // grunt.g:59:8: ( '++' )
    // grunt.g:59:10: '++'
    {
        MATCHS(lit_32); 
        if  (HASEXCEPTION())
        {
            goto ruleT__129Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__129Ex; /* Prevent compiler warnings */
    ruleT__129Ex: ;

}
// $ANTLR end T__129

//   Comes from: 60:8: ( '--' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__130
 *
 * Looks to match the characters the constitute the token T__130
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__130(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__130;
       
    
    // grunt.g:60:8: ( '--' )
    // grunt.g:60:10: '--'
    {
        MATCHS(lit_33); 
        if  (HASEXCEPTION())
        {
            goto ruleT__130Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__130Ex; /* Prevent compiler warnings */
    ruleT__130Ex: ;

}
// $ANTLR end T__130

//   Comes from: 61:8: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__131
 *
 * Looks to match the characters the constitute the token T__131
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__131(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__131;
       
    
    // grunt.g:61:8: ( '.' )
    // grunt.g:61:10: '.'
    {
        MATCHC('.'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__131Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__131Ex; /* Prevent compiler warnings */
    ruleT__131Ex: ;

}
// $ANTLR end T__131

//   Comes from: 62:8: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__132
 *
 * Looks to match the characters the constitute the token T__132
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__132(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__132;
       
    
    // grunt.g:62:8: ( '[' )
    // grunt.g:62:10: '['
    {
        MATCHC('['); 
        if  (HASEXCEPTION())
        {
            goto ruleT__132Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__132Ex; /* Prevent compiler warnings */
    ruleT__132Ex: ;

}
// $ANTLR end T__132

//   Comes from: 63:8: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__133
 *
 * Looks to match the characters the constitute the token T__133
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__133(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__133;
       
    
    // grunt.g:63:8: ( ']' )
    // grunt.g:63:10: ']'
    {
        MATCHC(']'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__133Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__133Ex; /* Prevent compiler warnings */
    ruleT__133Ex: ;

}
// $ANTLR end T__133

//   Comes from: 64:8: ( '__this_func__' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__134
 *
 * Looks to match the characters the constitute the token T__134
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__134(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__134;
       
    
    // grunt.g:64:8: ( '__this_func__' )
    // grunt.g:64:10: '__this_func__'
    {
        MATCHS(lit_34); 
        if  (HASEXCEPTION())
        {
            goto ruleT__134Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__134Ex; /* Prevent compiler warnings */
    ruleT__134Ex: ;

}
// $ANTLR end T__134

//   Comes from: 355:2: ( ( '_' | 'a' .. 'z' | 'A' .. 'Z' ) ( '_' | '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IDENTIFIER
 *
 * Looks to match the characters the constitute the token IDENTIFIER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mIDENTIFIER(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = IDENTIFIER;
       
    
    // grunt.g:355:2: ( ( '_' | 'a' .. 'z' | 'A' .. 'Z' ) ( '_' | '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )* )
    // grunt.g:355:4: ( '_' | 'a' .. 'z' | 'A' .. 'Z' ) ( '_' | '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )*
    {
        if ( ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleIDENTIFIEREx;
        }


        // grunt.g:355:32: ( '_' | '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' )*

        for (;;)
        {
            int alt1=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA1_0 = LA(1);
                if ( (((LA1_0 >= '0') && (LA1_0 <= '9')) || ((LA1_0 >= 'A') && (LA1_0 <= 'Z')) || LA1_0 == '_' || ((LA1_0 >= 'a') && (LA1_0 <= 'z'))) ) 
                {
                    alt1=1;
                }

            }
            switch (alt1) 
            {
        	case 1:
        	    // grunt.g:
        	    {
        	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleIDENTIFIEREx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop1;	/* break out of the loop */
        	    break;
            }
        }
        loop1: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleIDENTIFIEREx; /* Prevent compiler warnings */
    ruleIDENTIFIEREx: ;

}
// $ANTLR end IDENTIFIER

//   Comes from: 360:2: ( '\"' ( ( STRING_BASIC_CHAR | STRING_ESC_SEQ )* ) '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING_LITERAL
 *
 * Looks to match the characters the constitute the token STRING_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING_LITERAL(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STRING_LITERAL;
       
    
    // grunt.g:360:2: ( '\"' ( ( STRING_BASIC_CHAR | STRING_ESC_SEQ )* ) '\"' )
    // grunt.g:360:4: '\"' ( ( STRING_BASIC_CHAR | STRING_ESC_SEQ )* ) '\"'
    {
        MATCHC('"'); 
        if  (HASEXCEPTION())
        {
            goto ruleSTRING_LITERALEx;
        }

        // grunt.g:360:8: ( ( STRING_BASIC_CHAR | STRING_ESC_SEQ )* )
        // grunt.g:360:9: ( STRING_BASIC_CHAR | STRING_ESC_SEQ )*
        {

            // grunt.g:360:9: ( STRING_BASIC_CHAR | STRING_ESC_SEQ )*

            for (;;)
            {
                int alt2=3;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA2_0 = LA(1);
                    if ( (((LA2_0 >= 0x0000) && (LA2_0 <= '!')) || ((LA2_0 >= '#') && (LA2_0 <= '[')) || ((LA2_0 >= ']') && (LA2_0 <= 0xFFFF))) ) 
                    {
                        alt2=1;
                    }
                    else if ( (LA2_0 == '\\') ) 
                    {
                        alt2=2;
                    }

                }
                switch (alt2) 
                {
            	case 1:
            	    // grunt.g:360:10: STRING_BASIC_CHAR
            	    {
            	        /* 360:10: STRING_BASIC_CHAR */
            	        mSTRING_BASIC_CHAR(ctx ); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleSTRING_LITERALEx;
            	        }


            	    }
            	    break;
            	case 2:
            	    // grunt.g:360:30: STRING_ESC_SEQ
            	    {
            	        /* 360:30: STRING_ESC_SEQ */
            	        mSTRING_ESC_SEQ(ctx ); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleSTRING_LITERALEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


        }

        MATCHC('"'); 
        if  (HASEXCEPTION())
        {
            goto ruleSTRING_LITERALEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSTRING_LITERALEx; /* Prevent compiler warnings */
    ruleSTRING_LITERALEx: ;

}
// $ANTLR end STRING_LITERAL

//   Comes from: 369:2: ( '0' | '1' .. '9' ( '0' .. '9' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DECIMAL_INTEGER_LITERAL
 *
 * Looks to match the characters the constitute the token DECIMAL_INTEGER_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDECIMAL_INTEGER_LITERAL(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DECIMAL_INTEGER_LITERAL;
       
    
    {
        //  grunt.g:369:2: ( '0' | '1' .. '9' ( '0' .. '9' )* )
        
        ANTLR3_UINT32 alt4;

        alt4=2;


        {
            int LA4_0 = LA(1);
            if ( (LA4_0 == '0') ) 
            {
                alt4=1;
            }
            else if ( (((LA4_0 >= '1') && (LA4_0 <= '9'))) ) 
            {
                alt4=2;
            }
            else 
            {
            
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto ruleDECIMAL_INTEGER_LITERALEx;
            }
        }
        switch (alt4) 
        {
    	case 1:
    	    // grunt.g:369:4: '0'
    	    {
    	        MATCHC('0'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleDECIMAL_INTEGER_LITERALEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // grunt.g:370:4: '1' .. '9' ( '0' .. '9' )*
    	    {
    	        MATCHRANGE('1', '9'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleDECIMAL_INTEGER_LITERALEx;
    	        }


    	        // grunt.g:370:13: ( '0' .. '9' )*

    	        for (;;)
    	        {
    	            int alt3=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA3_0 = LA(1);
    	                if ( (((LA3_0 >= '0') && (LA3_0 <= '9'))) ) 
    	                {
    	                    alt3=1;
    	                }

    	            }
    	            switch (alt3) 
    	            {
    	        	case 1:
    	        	    // grunt.g:370:14: '0' .. '9'
    	        	    {
    	        	        MATCHRANGE('0', '9'); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleDECIMAL_INTEGER_LITERALEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop3;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop3: ; /* Jump out to here if this rule does not match */


    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleDECIMAL_INTEGER_LITERALEx; /* Prevent compiler warnings */
    ruleDECIMAL_INTEGER_LITERALEx: ;

}
// $ANTLR end DECIMAL_INTEGER_LITERAL

//   Comes from: 374:2: ( '0x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEXADECIMAL_INTEGER_LITERAL
 *
 * Looks to match the characters the constitute the token HEXADECIMAL_INTEGER_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mHEXADECIMAL_INTEGER_LITERAL(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = HEXADECIMAL_INTEGER_LITERAL;
       
    
    // grunt.g:374:2: ( '0x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ )
    // grunt.g:374:4: '0x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
    {
        MATCHS(lit_35); 
        if  (HASEXCEPTION())
        {
            goto ruleHEXADECIMAL_INTEGER_LITERALEx;
        }


        // grunt.g:374:9: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
        {
            int cnt5=0;

            for (;;)
            {
                int alt5=2;
        	{
        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	    */
        	    int LA5_0 = LA(1);
        	    if ( (((LA5_0 >= '0') && (LA5_0 <= '9')) || ((LA5_0 >= 'A') && (LA5_0 <= 'F')) || ((LA5_0 >= 'a') && (LA5_0 <= 'f'))) ) 
        	    {
        	        alt5=1;
        	    }

        	}
        	switch (alt5) 
        	{
        	    case 1:
        	        // grunt.g:
        	        {
        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
        	            {
        	                CONSUME();

        	            }
        	            else 
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();    goto ruleHEXADECIMAL_INTEGER_LITERALEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt5 >= 1 )
        		{
        		    goto loop5;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleHEXADECIMAL_INTEGER_LITERALEx;
        	}
        	cnt5++;
            }
            loop5: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleHEXADECIMAL_INTEGER_LITERALEx; /* Prevent compiler warnings */
    ruleHEXADECIMAL_INTEGER_LITERALEx: ;

}
// $ANTLR end HEXADECIMAL_INTEGER_LITERAL

//   Comes from: 382:2: ( '.' ( '0' .. '9' )+ ( FLOAT_EXPONENT )? ( 'f' | 'F' )? | ( '0' .. '9' )+ ( ( '.' ( '0' .. '9' )* ( FLOAT_EXPONENT )? ( 'f' | 'F' )? ) | ( FLOAT_EXPONENT ( 'f' | 'F' )? ) | ( ( 'f' | 'F' ) ) ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOAT_LITERAL
 *
 * Looks to match the characters the constitute the token FLOAT_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFLOAT_LITERAL(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FLOAT_LITERAL;
       
    
    {
        //  grunt.g:382:2: ( '.' ( '0' .. '9' )+ ( FLOAT_EXPONENT )? ( 'f' | 'F' )? | ( '0' .. '9' )+ ( ( '.' ( '0' .. '9' )* ( FLOAT_EXPONENT )? ( 'f' | 'F' )? ) | ( FLOAT_EXPONENT ( 'f' | 'F' )? ) | ( ( 'f' | 'F' ) ) ) )
        
        ANTLR3_UINT32 alt15;

        alt15=2;


        {
            int LA15_0 = LA(1);
            if ( (LA15_0 == '.') ) 
            {
                alt15=1;
            }
            else if ( (((LA15_0 >= '0') && (LA15_0 <= '9'))) ) 
            {
                alt15=2;
            }
            else 
            {
            
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 15;
                EXCEPTION->state        = 0;


                goto ruleFLOAT_LITERALEx;
            }
        }
        switch (alt15) 
        {
    	case 1:
    	    // grunt.g:383:3: '.' ( '0' .. '9' )+ ( FLOAT_EXPONENT )? ( 'f' | 'F' )?
    	    {
    	        MATCHC('.'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOAT_LITERALEx;
    	        }

    	        // grunt.g:383:7: ( '0' .. '9' )+
    	        {
    	            int cnt6=0;

    	            for (;;)
    	            {
    	                int alt6=2;
    	        	{
    	        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	        	    */
    	        	    int LA6_0 = LA(1);
    	        	    if ( (((LA6_0 >= '0') && (LA6_0 <= '9'))) ) 
    	        	    {
    	        	        alt6=1;
    	        	    }

    	        	}
    	        	switch (alt6) 
    	        	{
    	        	    case 1:
    	        	        // grunt.g:383:8: '0' .. '9'
    	        	        {
    	        	            MATCHRANGE('0', '9'); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOAT_LITERALEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt6 >= 1 )
    	        		{
    	        		    goto loop6;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOAT_LITERALEx;
    	        	}
    	        	cnt6++;
    	            }
    	            loop6: ;	/* Jump to here if this rule does not match */
    	        }

    	        // grunt.g:383:19: ( FLOAT_EXPONENT )?
    	        {
    	            int alt7=2;
    	            {
    	                int LA7_0 = LA(1);
    	                if ( (LA7_0 == 'E' || LA7_0 == 'e') ) 
    	                {
    	                    alt7=1;
    	                }
    	            }
    	            switch (alt7) 
    	            {
    	        	case 1:
    	        	    // grunt.g:383:19: FLOAT_EXPONENT
    	        	    {
    	        	        /* 383:19: FLOAT_EXPONENT */
    	        	        mFLOAT_EXPONENT(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOAT_LITERALEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	        // grunt.g:383:35: ( 'f' | 'F' )?
    	        {
    	            int alt8=2;
    	            {
    	                int LA8_0 = LA(1);
    	                if ( (LA8_0 == 'F' || LA8_0 == 'f') ) 
    	                {
    	                    alt8=1;
    	                }
    	            }
    	            switch (alt8) 
    	            {
    	        	case 1:
    	        	    // grunt.g:
    	        	    {
    	        	        if ( LA(1) == 'F' || LA(1) == 'f' )
    	        	        {
    	        	            CONSUME();

    	        	        }
    	        	        else 
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();    goto ruleFLOAT_LITERALEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // grunt.g:384:4: ( '0' .. '9' )+ ( ( '.' ( '0' .. '9' )* ( FLOAT_EXPONENT )? ( 'f' | 'F' )? ) | ( FLOAT_EXPONENT ( 'f' | 'F' )? ) | ( ( 'f' | 'F' ) ) )
    	    {
    	        // grunt.g:384:4: ( '0' .. '9' )+
    	        {
    	            int cnt9=0;

    	            for (;;)
    	            {
    	                int alt9=2;
    	        	{
    	        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	        	    */
    	        	    int LA9_0 = LA(1);
    	        	    if ( (((LA9_0 >= '0') && (LA9_0 <= '9'))) ) 
    	        	    {
    	        	        alt9=1;
    	        	    }

    	        	}
    	        	switch (alt9) 
    	        	{
    	        	    case 1:
    	        	        // grunt.g:384:5: '0' .. '9'
    	        	        {
    	        	            MATCHRANGE('0', '9'); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOAT_LITERALEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt9 >= 1 )
    	        		{
    	        		    goto loop9;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOAT_LITERALEx;
    	        	}
    	        	cnt9++;
    	            }
    	            loop9: ;	/* Jump to here if this rule does not match */
    	        }

    	        // grunt.g:384:16: ( ( '.' ( '0' .. '9' )* ( FLOAT_EXPONENT )? ( 'f' | 'F' )? ) | ( FLOAT_EXPONENT ( 'f' | 'F' )? ) | ( ( 'f' | 'F' ) ) )
    	        {
    	            int alt14=3;
    	            switch ( LA(1) ) 
    	            {
    	            case '.':
    	            	{
    	            		alt14=1;
    	            	}
    	                break;
    	            case 'E':
    	            case 'e':
    	            	{
    	            		alt14=2;
    	            	}
    	                break;
    	            case 'F':
    	            case 'f':
    	            	{
    	            		alt14=3;
    	            	}
    	                break;

    	            default:
    	                CONSTRUCTEX();
    	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    	                EXCEPTION->message      = (void *)"";
    	                EXCEPTION->decisionNum  = 14;
    	                EXCEPTION->state        = 0;


    	                goto ruleFLOAT_LITERALEx;
    	            }

    	            switch (alt14) 
    	            {
    	        	case 1:
    	        	    // grunt.g:385:6: ( '.' ( '0' .. '9' )* ( FLOAT_EXPONENT )? ( 'f' | 'F' )? )
    	        	    {
    	        	        // grunt.g:385:6: ( '.' ( '0' .. '9' )* ( FLOAT_EXPONENT )? ( 'f' | 'F' )? )
    	        	        // grunt.g:385:7: '.' ( '0' .. '9' )* ( FLOAT_EXPONENT )? ( 'f' | 'F' )?
    	        	        {
    	        	            MATCHC('.'); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOAT_LITERALEx;
    	        	            }


    	        	            // grunt.g:385:11: ( '0' .. '9' )*

    	        	            for (;;)
    	        	            {
    	        	                int alt10=2;
    	        	                {
    	        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	        	                    */
    	        	                    int LA10_0 = LA(1);
    	        	                    if ( (((LA10_0 >= '0') && (LA10_0 <= '9'))) ) 
    	        	                    {
    	        	                        alt10=1;
    	        	                    }

    	        	                }
    	        	                switch (alt10) 
    	        	                {
    	        	            	case 1:
    	        	            	    // grunt.g:385:12: '0' .. '9'
    	        	            	    {
    	        	            	        MATCHRANGE('0', '9'); 
    	        	            	        if  (HASEXCEPTION())
    	        	            	        {
    	        	            	            goto ruleFLOAT_LITERALEx;
    	        	            	        }


    	        	            	    }
    	        	            	    break;

    	        	            	default:
    	        	            	    goto loop10;	/* break out of the loop */
    	        	            	    break;
    	        	                }
    	        	            }
    	        	            loop10: ; /* Jump out to here if this rule does not match */


    	        	            // grunt.g:385:23: ( FLOAT_EXPONENT )?
    	        	            {
    	        	                int alt11=2;
    	        	                {
    	        	                    int LA11_0 = LA(1);
    	        	                    if ( (LA11_0 == 'E' || LA11_0 == 'e') ) 
    	        	                    {
    	        	                        alt11=1;
    	        	                    }
    	        	                }
    	        	                switch (alt11) 
    	        	                {
    	        	            	case 1:
    	        	            	    // grunt.g:385:23: FLOAT_EXPONENT
    	        	            	    {
    	        	            	        /* 385:23: FLOAT_EXPONENT */
    	        	            	        mFLOAT_EXPONENT(ctx ); 
    	        	            	        if  (HASEXCEPTION())
    	        	            	        {
    	        	            	            goto ruleFLOAT_LITERALEx;
    	        	            	        }


    	        	            	    }
    	        	            	    break;

    	        	                }
    	        	            }

    	        	            // grunt.g:385:39: ( 'f' | 'F' )?
    	        	            {
    	        	                int alt12=2;
    	        	                {
    	        	                    int LA12_0 = LA(1);
    	        	                    if ( (LA12_0 == 'F' || LA12_0 == 'f') ) 
    	        	                    {
    	        	                        alt12=1;
    	        	                    }
    	        	                }
    	        	                switch (alt12) 
    	        	                {
    	        	            	case 1:
    	        	            	    // grunt.g:
    	        	            	    {
    	        	            	        if ( LA(1) == 'F' || LA(1) == 'f' )
    	        	            	        {
    	        	            	            CONSUME();

    	        	            	        }
    	        	            	        else 
    	        	            	        {
    	        	            	            CONSTRUCTEX();
    	        	            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            	            LRECOVER();    goto ruleFLOAT_LITERALEx;
    	        	            	        }


    	        	            	    }
    	        	            	    break;

    	        	                }
    	        	            }

    	        	        }


    	        	    }
    	        	    break;
    	        	case 2:
    	        	    // grunt.g:386:7: ( FLOAT_EXPONENT ( 'f' | 'F' )? )
    	        	    {
    	        	        // grunt.g:386:7: ( FLOAT_EXPONENT ( 'f' | 'F' )? )
    	        	        // grunt.g:386:8: FLOAT_EXPONENT ( 'f' | 'F' )?
    	        	        {
    	        	            /* 386:8: FLOAT_EXPONENT ( 'f' | 'F' )? */
    	        	            mFLOAT_EXPONENT(ctx ); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOAT_LITERALEx;
    	        	            }


    	        	            // grunt.g:386:23: ( 'f' | 'F' )?
    	        	            {
    	        	                int alt13=2;
    	        	                {
    	        	                    int LA13_0 = LA(1);
    	        	                    if ( (LA13_0 == 'F' || LA13_0 == 'f') ) 
    	        	                    {
    	        	                        alt13=1;
    	        	                    }
    	        	                }
    	        	                switch (alt13) 
    	        	                {
    	        	            	case 1:
    	        	            	    // grunt.g:
    	        	            	    {
    	        	            	        if ( LA(1) == 'F' || LA(1) == 'f' )
    	        	            	        {
    	        	            	            CONSUME();

    	        	            	        }
    	        	            	        else 
    	        	            	        {
    	        	            	            CONSTRUCTEX();
    	        	            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            	            LRECOVER();    goto ruleFLOAT_LITERALEx;
    	        	            	        }


    	        	            	    }
    	        	            	    break;

    	        	                }
    	        	            }

    	        	        }


    	        	    }
    	        	    break;
    	        	case 3:
    	        	    // grunt.g:387:7: ( ( 'f' | 'F' ) )
    	        	    {
    	        	        // grunt.g:387:7: ( ( 'f' | 'F' ) )
    	        	        // grunt.g:387:8: ( 'f' | 'F' )
    	        	        {
    	        	            if ( LA(1) == 'F' || LA(1) == 'f' )
    	        	            {
    	        	                CONSUME();

    	        	            }
    	        	            else 
    	        	            {
    	        	                CONSTRUCTEX();
    	        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	                LRECOVER();    goto ruleFLOAT_LITERALEx;
    	        	            }


    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleFLOAT_LITERALEx; /* Prevent compiler warnings */
    ruleFLOAT_LITERALEx: ;

}
// $ANTLR end FLOAT_LITERAL

//   Comes from: 393:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOAT_EXPONENT
 *
 * Looks to match the characters the constitute the token FLOAT_EXPONENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFLOAT_EXPONENT(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // grunt.g:393:2: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    // grunt.g:393:4: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    {
        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleFLOAT_EXPONENTEx;
        }


        // grunt.g:393:16: ( '+' | '-' )?
        {
            int alt16=2;
            {
                int LA16_0 = LA(1);
                if ( (LA16_0 == '+' || LA16_0 == '-') ) 
                {
                    alt16=1;
                }
            }
            switch (alt16) 
            {
        	case 1:
        	    // grunt.g:
        	    {
        	        if ( LA(1) == '+' || LA(1) == '-' )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleFLOAT_EXPONENTEx;
        	        }


        	    }
        	    break;

            }
        }
        // grunt.g:393:29: ( '0' .. '9' )+
        {
            int cnt17=0;

            for (;;)
            {
                int alt17=2;
        	{
        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	    */
        	    int LA17_0 = LA(1);
        	    if ( (((LA17_0 >= '0') && (LA17_0 <= '9'))) ) 
        	    {
        	        alt17=1;
        	    }

        	}
        	switch (alt17) 
        	{
        	    case 1:
        	        // grunt.g:393:30: '0' .. '9'
        	        {
        	            MATCHRANGE('0', '9'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleFLOAT_EXPONENTEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt17 >= 1 )
        		{
        		    goto loop17;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleFLOAT_EXPONENTEx;
        	}
        	cnt17++;
            }
            loop17: ;	/* Jump to here if this rule does not match */
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleFLOAT_EXPONENTEx; /* Prevent compiler warnings */
    ruleFLOAT_EXPONENTEx: ;

}
// $ANTLR end FLOAT_EXPONENT

//   Comes from: 398:2: (~ ( '\"' | '\\\\' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING_BASIC_CHAR
 *
 * Looks to match the characters the constitute the token STRING_BASIC_CHAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING_BASIC_CHAR(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // grunt.g:398:2: (~ ( '\"' | '\\\\' ) )
    // grunt.g:398:4: ~ ( '\"' | '\\\\' )
    {
        if ( ((LA(1) >= 0x0000) && (LA(1) <= '!')) || ((LA(1) >= '#') && (LA(1) <= '[')) || ((LA(1) >= ']') && (LA(1) <= 0xFFFF)) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSTRING_BASIC_CHAREx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleSTRING_BASIC_CHAREx; /* Prevent compiler warnings */
    ruleSTRING_BASIC_CHAREx: ;

}
// $ANTLR end STRING_BASIC_CHAR

//   Comes from: 403:2: ( '\\\\\"' | '\\\\\\\\' | '\\\\\\'' | '\\\\r' | '\\\\n' | '\\\\t' | '\\\\u' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING_ESC_SEQ
 *
 * Looks to match the characters the constitute the token STRING_ESC_SEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING_ESC_SEQ(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    {
        //  grunt.g:403:2: ( '\\\\\"' | '\\\\\\\\' | '\\\\\\'' | '\\\\r' | '\\\\n' | '\\\\t' | '\\\\u' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
        
        ANTLR3_UINT32 alt18;

        alt18=7;


        {
            int LA18_0 = LA(1);
            if ( (LA18_0 == '\\') ) 
            {
                switch ( LA(2) ) 
                {
                case '"':
                	{
                		alt18=1;
                	}
                    break;
                case '\\':
                	{
                		alt18=2;
                	}
                    break;
                case '\'':
                	{
                		alt18=3;
                	}
                    break;
                case 'r':
                	{
                		alt18=4;
                	}
                    break;
                case 'n':
                	{
                		alt18=5;
                	}
                    break;
                case 't':
                	{
                		alt18=6;
                	}
                    break;
                case 'u':
                	{
                		alt18=7;
                	}
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 18;
                    EXCEPTION->state        = 1;


                    goto ruleSTRING_ESC_SEQEx;
                }

            }
            else 
            {
            
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 18;
                EXCEPTION->state        = 0;


                goto ruleSTRING_ESC_SEQEx;
            }
        }
        switch (alt18) 
        {
    	case 1:
    	    // grunt.g:403:4: '\\\\\"'
    	    {
    	        MATCHS(lit_36); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRING_ESC_SEQEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // grunt.g:404:4: '\\\\\\\\'
    	    {
    	        MATCHS(lit_37); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRING_ESC_SEQEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // grunt.g:405:4: '\\\\\\''
    	    {
    	        MATCHS(lit_38); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRING_ESC_SEQEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // grunt.g:406:4: '\\\\r'
    	    {
    	        MATCHS(lit_39); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRING_ESC_SEQEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // grunt.g:407:4: '\\\\n'
    	    {
    	        MATCHS(lit_40); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRING_ESC_SEQEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // grunt.g:408:4: '\\\\t'
    	    {
    	        MATCHS(lit_41); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRING_ESC_SEQEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // grunt.g:409:4: '\\\\u' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
    	    {
    	        MATCHS(lit_42); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRING_ESC_SEQEx;
    	        }


    	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
    	        {
    	            CONSUME();

    	        }
    	        else 
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();    goto ruleSTRING_ESC_SEQEx;
    	        }

    	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
    	        {
    	            CONSUME();

    	        }
    	        else 
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();    goto ruleSTRING_ESC_SEQEx;
    	        }

    	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
    	        {
    	            CONSUME();

    	        }
    	        else 
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();    goto ruleSTRING_ESC_SEQEx;
    	        }

    	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
    	        {
    	            CONSUME();

    	        }
    	        else 
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();    goto ruleSTRING_ESC_SEQEx;
    	        }


    	    }
    	    break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleSTRING_ESC_SEQEx; /* Prevent compiler warnings */
    ruleSTRING_ESC_SEQEx: ;

}
// $ANTLR end STRING_ESC_SEQ

//   Comes from: 413:2: ( '//' (~ '\\n' )* ( '\\n' )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SL_COMMENT
 *
 * Looks to match the characters the constitute the token SL_COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSL_COMMENT(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SL_COMMENT;
       
    
    // grunt.g:413:2: ( '//' (~ '\\n' )* ( '\\n' )? )
    // grunt.g:413:4: '//' (~ '\\n' )* ( '\\n' )?
    {
        MATCHS(lit_43); 
        if  (HASEXCEPTION())
        {
            goto ruleSL_COMMENTEx;
        }



        // grunt.g:413:9: (~ '\\n' )*

        for (;;)
        {
            int alt19=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA19_0 = LA(1);
                if ( (((LA19_0 >= 0x0000) && (LA19_0 <= '\t')) || ((LA19_0 >= 0x000B) && (LA19_0 <= 0xFFFF))) ) 
                {
                    alt19=1;
                }

            }
            switch (alt19) 
            {
        	case 1:
        	    // grunt.g:413:10: ~ '\\n'
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleSL_COMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop19;	/* break out of the loop */
        	    break;
            }
        }
        loop19: ; /* Jump out to here if this rule does not match */


        // grunt.g:413:18: ( '\\n' )?
        {
            int alt20=2;
            {
                int LA20_0 = LA(1);
                if ( (LA20_0 == '\n') ) 
                {
                    alt20=1;
                }
            }
            switch (alt20) 
            {
        	case 1:
        	    // grunt.g:413:18: '\\n'
        	    {
        	        MATCHC('\n'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleSL_COMMENTEx;
        	        }


        	    }
        	    break;

            }
        }
        {

            			LEXSTATE->channel = HIDDEN;
            		
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSL_COMMENTEx; /* Prevent compiler warnings */
    ruleSL_COMMENTEx: ;

}
// $ANTLR end SL_COMMENT

//   Comes from: 420:2: ( '/*' ( options {greedy=false; } : . )* '*/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ML_COMMENT
 *
 * Looks to match the characters the constitute the token ML_COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mML_COMMENT(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ML_COMMENT;
       
    
    // grunt.g:420:2: ( '/*' ( options {greedy=false; } : . )* '*/' )
    // grunt.g:420:4: '/*' ( options {greedy=false; } : . )* '*/'
    {
        MATCHS(lit_44); 
        if  (HASEXCEPTION())
        {
            goto ruleML_COMMENTEx;
        }



        // grunt.g:420:9: ( options {greedy=false; } : . )*

        for (;;)
        {
            int alt21=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA21_0 = LA(1);
                if ( (LA21_0 == '*') ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA21_1 = LA(2);
                        if ( (LA21_1 == '/') ) 
                        {
                            alt21=2;
                        }
                        else if ( (((LA21_1 >= 0x0000) && (LA21_1 <= '.')) || ((LA21_1 >= '0') && (LA21_1 <= 0xFFFF))) ) 
                        {
                            alt21=1;
                        }

                    }
                }
                else if ( (((LA21_0 >= 0x0000) && (LA21_0 <= ')')) || ((LA21_0 >= '+') && (LA21_0 <= 0xFFFF))) ) 
                {
                    alt21=1;
                }

            }
            switch (alt21) 
            {
        	case 1:
        	    // grunt.g:420:37: .
        	    {
        	        MATCHANY(); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleML_COMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop21;	/* break out of the loop */
        	    break;
            }
        }
        loop21: ; /* Jump out to here if this rule does not match */

        MATCHS(lit_45); 
        if  (HASEXCEPTION())
        {
            goto ruleML_COMMENTEx;
        }


        {

            			LEXSTATE->channel = HIDDEN;
            		
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleML_COMMENTEx; /* Prevent compiler warnings */
    ruleML_COMMENTEx: ;

}
// $ANTLR end ML_COMMENT

//   Comes from: 427:2: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS;
       
    
    // grunt.g:427:2: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
    // grunt.g:427:4: ( ' ' | '\\t' | '\\r' | '\\n' )+
    {
        // grunt.g:427:4: ( ' ' | '\\t' | '\\r' | '\\n' )+
        {
            int cnt22=0;

            for (;;)
            {
                int alt22=2;
        	{
        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	    */
        	    int LA22_0 = LA(1);
        	    if ( (((LA22_0 >= '\t') && (LA22_0 <= '\n')) || LA22_0 == '\r' || LA22_0 == ' ') ) 
        	    {
        	        alt22=1;
        	    }

        	}
        	switch (alt22) 
        	{
        	    case 1:
        	        // grunt.g:
        	        {
        	            if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || LA(1) == '\r' || LA(1) == ' ' )
        	            {
        	                CONSUME();

        	            }
        	            else 
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();    goto ruleWSEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt22 >= 1 )
        		{
        		    goto loop22;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleWSEx;
        	}
        	cnt22++;
            }
            loop22: ;	/* Jump to here if this rule does not match */
        }
        {
            LEXSTATE->channel = HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 432:2: ( ( STRING_BASIC_CHAR | STRING_ESC_SEQ )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INCLUDE_FILENAME
 *
 * Looks to match the characters the constitute the token INCLUDE_FILENAME
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINCLUDE_FILENAME(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // grunt.g:432:2: ( ( STRING_BASIC_CHAR | STRING_ESC_SEQ )+ )
    // grunt.g:432:4: ( STRING_BASIC_CHAR | STRING_ESC_SEQ )+
    {
        // grunt.g:432:4: ( STRING_BASIC_CHAR | STRING_ESC_SEQ )+
        {
            int cnt23=0;

            for (;;)
            {
                int alt23=3;
        	{
        	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	    */
        	    int LA23_0 = LA(1);
        	    if ( (((LA23_0 >= 0x0000) && (LA23_0 <= '!')) || ((LA23_0 >= '#') && (LA23_0 <= '[')) || ((LA23_0 >= ']') && (LA23_0 <= 0xFFFF))) ) 
        	    {
        	        alt23=1;
        	    }
        	    else if ( (LA23_0 == '\\') ) 
        	    {
        	        alt23=2;
        	    }

        	}
        	switch (alt23) 
        	{
        	    case 1:
        	        // grunt.g:432:5: STRING_BASIC_CHAR
        	        {
        	            /* 432:5: STRING_BASIC_CHAR */
        	            mSTRING_BASIC_CHAR(ctx ); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleINCLUDE_FILENAMEEx;
        	            }


        	        }
        	        break;
        	    case 2:
        	        // grunt.g:432:25: STRING_ESC_SEQ
        	        {
        	            /* 432:25: STRING_ESC_SEQ */
        	            mSTRING_ESC_SEQ(ctx ); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleINCLUDE_FILENAMEEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt23 >= 1 )
        		{
        		    goto loop23;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleINCLUDE_FILENAMEEx;
        	}
        	cnt23++;
            }
            loop23: ;	/* Jump to here if this rule does not match */
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleINCLUDE_FILENAMEEx; /* Prevent compiler warnings */
    ruleINCLUDE_FILENAMEEx: ;

}
// $ANTLR end INCLUDE_FILENAME

//   Comes from: 436:2: ( '#' ( ' ' | '\\t' | '\\r' | '\\n' )* ( ( 'include' ( ' ' | '\\t' | '\\r' | '\\n' )* '\"' fn= INCLUDE_FILENAME '\"' ) ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LINE_COMMAND
 *
 * Looks to match the characters the constitute the token LINE_COMMAND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLINE_COMMAND(pgruntLexer ctx)
{
	ANTLR3_UINT32	_type;
    pANTLR3_COMMON_TOKEN fn;


    fn = NULL;

    _type	    = LINE_COMMAND;
       
    
    // grunt.g:436:2: ( '#' ( ' ' | '\\t' | '\\r' | '\\n' )* ( ( 'include' ( ' ' | '\\t' | '\\r' | '\\n' )* '\"' fn= INCLUDE_FILENAME '\"' ) ) )
    // grunt.g:436:4: '#' ( ' ' | '\\t' | '\\r' | '\\n' )* ( ( 'include' ( ' ' | '\\t' | '\\r' | '\\n' )* '\"' fn= INCLUDE_FILENAME '\"' ) )
    {
        MATCHC('#'); 
        if  (HASEXCEPTION())
        {
            goto ruleLINE_COMMANDEx;
        }


        // grunt.g:436:8: ( ' ' | '\\t' | '\\r' | '\\n' )*

        for (;;)
        {
            int alt24=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA24_0 = LA(1);
                if ( (((LA24_0 >= '\t') && (LA24_0 <= '\n')) || LA24_0 == '\r' || LA24_0 == ' ') ) 
                {
                    alt24=1;
                }

            }
            switch (alt24) 
            {
        	case 1:
        	    // grunt.g:
        	    {
        	        if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || LA(1) == '\r' || LA(1) == ' ' )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleLINE_COMMANDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop24;	/* break out of the loop */
        	    break;
            }
        }
        loop24: ; /* Jump out to here if this rule does not match */

        // grunt.g:437:3: ( ( 'include' ( ' ' | '\\t' | '\\r' | '\\n' )* '\"' fn= INCLUDE_FILENAME '\"' ) )
        // grunt.g:438:4: ( 'include' ( ' ' | '\\t' | '\\r' | '\\n' )* '\"' fn= INCLUDE_FILENAME '\"' )
        {
            // grunt.g:438:4: ( 'include' ( ' ' | '\\t' | '\\r' | '\\n' )* '\"' fn= INCLUDE_FILENAME '\"' )
            // grunt.g:439:5: 'include' ( ' ' | '\\t' | '\\r' | '\\n' )* '\"' fn= INCLUDE_FILENAME '\"'
            {
                MATCHS(lit_46); 
                if  (HASEXCEPTION())
                {
                    goto ruleLINE_COMMANDEx;
                }



                // grunt.g:439:15: ( ' ' | '\\t' | '\\r' | '\\n' )*

                for (;;)
                {
                    int alt25=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA25_0 = LA(1);
                        if ( (((LA25_0 >= '\t') && (LA25_0 <= '\n')) || LA25_0 == '\r' || LA25_0 == ' ') ) 
                        {
                            alt25=1;
                        }

                    }
                    switch (alt25) 
                    {
                	case 1:
                	    // grunt.g:
                	    {
                	        if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || LA(1) == '\r' || LA(1) == ' ' )
                	        {
                	            CONSUME();

                	        }
                	        else 
                	        {
                	            CONSTRUCTEX();
                	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                	            LRECOVER();    goto ruleLINE_COMMANDEx;
                	        }


                	    }
                	    break;

                	default:
                	    goto loop25;	/* break out of the loop */
                	    break;
                    }
                }
                loop25: ; /* Jump out to here if this rule does not match */

                MATCHC('"'); 
                if  (HASEXCEPTION())
                {
                    goto ruleLINE_COMMANDEx;
                }

                /* 439:5: 'include' ( ' ' | '\\t' | '\\r' | '\\n' )* '\"' fn= INCLUDE_FILENAME '\"' */
                {
                    ANTLR3_MARKER fnStart1076 = GETCHARINDEX();
                mINCLUDE_FILENAME(ctx ); 
                    if  (HASEXCEPTION())
                    {
                        goto ruleLINE_COMMANDEx;
                    }

                    fn = LEXSTATE->tokFactory->newToken(LEXSTATE->tokFactory);
                    fn->setType(fn, ANTLR3_TOKEN_INVALID);
                    fn->setStartIndex(fn, fnStart1076);
                    fn->setStopIndex(fn, GETCHARINDEX()-1);
                    fn->input = INPUT;
                }
                MATCHC('"'); 
                if  (HASEXCEPTION())
                {
                    goto ruleLINE_COMMANDEx;
                }

                {

                    					ANTLR3_STRING* fn_str = (fn->getText(fn));
                    					wprintf(L"including: %s\n", fn_str->chars);
                    					fn_str = fn_str->to8(fn_str);
                    					ANTLR3_INPUT_STREAM* is = antlr3AsciiFileStreamNew(fn_str->chars);
                    					if(is)
                    						PUSHSTREAM(is);
                    				
                }

            }


        }

        {
            LEXSTATE->channel = HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLINE_COMMANDEx; /* Prevent compiler warnings */
    ruleLINE_COMMANDEx: ;

    fn = NULL;

}
// $ANTLR end LINE_COMMAND

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void 
mTokens(pgruntLexer ctx)
{
    {
        //  grunt.g:1:8: ( T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | IDENTIFIER | STRING_LITERAL | DECIMAL_INTEGER_LITERAL | HEXADECIMAL_INTEGER_LITERAL | FLOAT_LITERAL | SL_COMMENT | ML_COMMENT | WS | LINE_COMMAND )
        
        ANTLR3_UINT32 alt26;

        alt26=67;

        alt26 = cdfa26.predict(ctx, RECOGNIZER, ISTREAM, &cdfa26);
        if  (HASEXCEPTION())
        {
            goto ruleTokensEx;
        }

        switch (alt26) 
        {
    	case 1:
    	    // grunt.g:1:10: T__77
    	    {
    	        /* 1:10: T__77 */
    	        mT__77(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // grunt.g:1:16: T__78
    	    {
    	        /* 1:16: T__78 */
    	        mT__78(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // grunt.g:1:22: T__79
    	    {
    	        /* 1:22: T__79 */
    	        mT__79(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // grunt.g:1:28: T__80
    	    {
    	        /* 1:28: T__80 */
    	        mT__80(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // grunt.g:1:34: T__81
    	    {
    	        /* 1:34: T__81 */
    	        mT__81(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // grunt.g:1:40: T__82
    	    {
    	        /* 1:40: T__82 */
    	        mT__82(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // grunt.g:1:46: T__83
    	    {
    	        /* 1:46: T__83 */
    	        mT__83(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // grunt.g:1:52: T__84
    	    {
    	        /* 1:52: T__84 */
    	        mT__84(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // grunt.g:1:58: T__85
    	    {
    	        /* 1:58: T__85 */
    	        mT__85(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // grunt.g:1:64: T__86
    	    {
    	        /* 1:64: T__86 */
    	        mT__86(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 11:
    	    // grunt.g:1:70: T__87
    	    {
    	        /* 1:70: T__87 */
    	        mT__87(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 12:
    	    // grunt.g:1:76: T__88
    	    {
    	        /* 1:76: T__88 */
    	        mT__88(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 13:
    	    // grunt.g:1:82: T__89
    	    {
    	        /* 1:82: T__89 */
    	        mT__89(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 14:
    	    // grunt.g:1:88: T__90
    	    {
    	        /* 1:88: T__90 */
    	        mT__90(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 15:
    	    // grunt.g:1:94: T__91
    	    {
    	        /* 1:94: T__91 */
    	        mT__91(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 16:
    	    // grunt.g:1:100: T__92
    	    {
    	        /* 1:100: T__92 */
    	        mT__92(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 17:
    	    // grunt.g:1:106: T__93
    	    {
    	        /* 1:106: T__93 */
    	        mT__93(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 18:
    	    // grunt.g:1:112: T__94
    	    {
    	        /* 1:112: T__94 */
    	        mT__94(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 19:
    	    // grunt.g:1:118: T__95
    	    {
    	        /* 1:118: T__95 */
    	        mT__95(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 20:
    	    // grunt.g:1:124: T__96
    	    {
    	        /* 1:124: T__96 */
    	        mT__96(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 21:
    	    // grunt.g:1:130: T__97
    	    {
    	        /* 1:130: T__97 */
    	        mT__97(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 22:
    	    // grunt.g:1:136: T__98
    	    {
    	        /* 1:136: T__98 */
    	        mT__98(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 23:
    	    // grunt.g:1:142: T__99
    	    {
    	        /* 1:142: T__99 */
    	        mT__99(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 24:
    	    // grunt.g:1:148: T__100
    	    {
    	        /* 1:148: T__100 */
    	        mT__100(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 25:
    	    // grunt.g:1:155: T__101
    	    {
    	        /* 1:155: T__101 */
    	        mT__101(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 26:
    	    // grunt.g:1:162: T__102
    	    {
    	        /* 1:162: T__102 */
    	        mT__102(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 27:
    	    // grunt.g:1:169: T__103
    	    {
    	        /* 1:169: T__103 */
    	        mT__103(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 28:
    	    // grunt.g:1:176: T__104
    	    {
    	        /* 1:176: T__104 */
    	        mT__104(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 29:
    	    // grunt.g:1:183: T__105
    	    {
    	        /* 1:183: T__105 */
    	        mT__105(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 30:
    	    // grunt.g:1:190: T__106
    	    {
    	        /* 1:190: T__106 */
    	        mT__106(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 31:
    	    // grunt.g:1:197: T__107
    	    {
    	        /* 1:197: T__107 */
    	        mT__107(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 32:
    	    // grunt.g:1:204: T__108
    	    {
    	        /* 1:204: T__108 */
    	        mT__108(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 33:
    	    // grunt.g:1:211: T__109
    	    {
    	        /* 1:211: T__109 */
    	        mT__109(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 34:
    	    // grunt.g:1:218: T__110
    	    {
    	        /* 1:218: T__110 */
    	        mT__110(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 35:
    	    // grunt.g:1:225: T__111
    	    {
    	        /* 1:225: T__111 */
    	        mT__111(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 36:
    	    // grunt.g:1:232: T__112
    	    {
    	        /* 1:232: T__112 */
    	        mT__112(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 37:
    	    // grunt.g:1:239: T__113
    	    {
    	        /* 1:239: T__113 */
    	        mT__113(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 38:
    	    // grunt.g:1:246: T__114
    	    {
    	        /* 1:246: T__114 */
    	        mT__114(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 39:
    	    // grunt.g:1:253: T__115
    	    {
    	        /* 1:253: T__115 */
    	        mT__115(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 40:
    	    // grunt.g:1:260: T__116
    	    {
    	        /* 1:260: T__116 */
    	        mT__116(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 41:
    	    // grunt.g:1:267: T__117
    	    {
    	        /* 1:267: T__117 */
    	        mT__117(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 42:
    	    // grunt.g:1:274: T__118
    	    {
    	        /* 1:274: T__118 */
    	        mT__118(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 43:
    	    // grunt.g:1:281: T__119
    	    {
    	        /* 1:281: T__119 */
    	        mT__119(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 44:
    	    // grunt.g:1:288: T__120
    	    {
    	        /* 1:288: T__120 */
    	        mT__120(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 45:
    	    // grunt.g:1:295: T__121
    	    {
    	        /* 1:295: T__121 */
    	        mT__121(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 46:
    	    // grunt.g:1:302: T__122
    	    {
    	        /* 1:302: T__122 */
    	        mT__122(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 47:
    	    // grunt.g:1:309: T__123
    	    {
    	        /* 1:309: T__123 */
    	        mT__123(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 48:
    	    // grunt.g:1:316: T__124
    	    {
    	        /* 1:316: T__124 */
    	        mT__124(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 49:
    	    // grunt.g:1:323: T__125
    	    {
    	        /* 1:323: T__125 */
    	        mT__125(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 50:
    	    // grunt.g:1:330: T__126
    	    {
    	        /* 1:330: T__126 */
    	        mT__126(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 51:
    	    // grunt.g:1:337: T__127
    	    {
    	        /* 1:337: T__127 */
    	        mT__127(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 52:
    	    // grunt.g:1:344: T__128
    	    {
    	        /* 1:344: T__128 */
    	        mT__128(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 53:
    	    // grunt.g:1:351: T__129
    	    {
    	        /* 1:351: T__129 */
    	        mT__129(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 54:
    	    // grunt.g:1:358: T__130
    	    {
    	        /* 1:358: T__130 */
    	        mT__130(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 55:
    	    // grunt.g:1:365: T__131
    	    {
    	        /* 1:365: T__131 */
    	        mT__131(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 56:
    	    // grunt.g:1:372: T__132
    	    {
    	        /* 1:372: T__132 */
    	        mT__132(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 57:
    	    // grunt.g:1:379: T__133
    	    {
    	        /* 1:379: T__133 */
    	        mT__133(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 58:
    	    // grunt.g:1:386: T__134
    	    {
    	        /* 1:386: T__134 */
    	        mT__134(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 59:
    	    // grunt.g:1:393: IDENTIFIER
    	    {
    	        /* 1:393: IDENTIFIER */
    	        mIDENTIFIER(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 60:
    	    // grunt.g:1:404: STRING_LITERAL
    	    {
    	        /* 1:404: STRING_LITERAL */
    	        mSTRING_LITERAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 61:
    	    // grunt.g:1:419: DECIMAL_INTEGER_LITERAL
    	    {
    	        /* 1:419: DECIMAL_INTEGER_LITERAL */
    	        mDECIMAL_INTEGER_LITERAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 62:
    	    // grunt.g:1:443: HEXADECIMAL_INTEGER_LITERAL
    	    {
    	        /* 1:443: HEXADECIMAL_INTEGER_LITERAL */
    	        mHEXADECIMAL_INTEGER_LITERAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 63:
    	    // grunt.g:1:471: FLOAT_LITERAL
    	    {
    	        /* 1:471: FLOAT_LITERAL */
    	        mFLOAT_LITERAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 64:
    	    // grunt.g:1:485: SL_COMMENT
    	    {
    	        /* 1:485: SL_COMMENT */
    	        mSL_COMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 65:
    	    // grunt.g:1:496: ML_COMMENT
    	    {
    	        /* 1:496: ML_COMMENT */
    	        mML_COMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 66:
    	    // grunt.g:1:507: WS
    	    {
    	        /* 1:507: WS */
    	        mWS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 67:
    	    // grunt.g:1:510: LINE_COMMAND
    	    {
    	        /* 1:510: LINE_COMMAND */
    	        mLINE_COMMAND(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;

        }
    }

    
    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */ 


/* End of code
 * =============================================================================
 */
