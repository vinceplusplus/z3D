/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : grunt.g
 *     -                            On : 2009-03-20 09:47:19
 *     -                for the parser : gruntParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */


extern "C++"
{

#include "../z3D/Core/Header.h"
using namespace z3D::Core;
#include "../z3D/Core/z_off_debug_new.h"

	wcs		grunt_unescape_string(const wcs& s);
}


/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "gruntParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pgruntParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pgruntParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pgruntParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   gruntParserTokenNames[131+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "OP_UNARY_MINUS",
        (pANTLR3_UINT8) "OP_ASSIGN",
        (pANTLR3_UINT8) "OP_ADD_ASSIGN",
        (pANTLR3_UINT8) "OP_SUB_ASSIGN",
        (pANTLR3_UINT8) "OP_MUL_ASSIGN",
        (pANTLR3_UINT8) "OP_DIV_ASSIGN",
        (pANTLR3_UINT8) "OP_MOD_ASSIGN",
        (pANTLR3_UINT8) "OP_SHIFT_LEFT_ASSIGN",
        (pANTLR3_UINT8) "OP_SHIFT_RIGHT_ASSIGN",
        (pANTLR3_UINT8) "OP_AND_ASSIGN",
        (pANTLR3_UINT8) "OP_OR_ASSIGN",
        (pANTLR3_UINT8) "OP_XOR_ASSIGN",
        (pANTLR3_UINT8) "OP_CONDITIONAL",
        (pANTLR3_UINT8) "OP_LOGICAL_OR",
        (pANTLR3_UINT8) "OP_LOGICAL_AND",
        (pANTLR3_UINT8) "OP_BITWISE_OR",
        (pANTLR3_UINT8) "OP_BITWISE_XOR",
        (pANTLR3_UINT8) "OP_BITWISE_AND",
        (pANTLR3_UINT8) "OP_NOT_EQUAL",
        (pANTLR3_UINT8) "OP_EQUAL",
        (pANTLR3_UINT8) "OP_LESS",
        (pANTLR3_UINT8) "OP_LESS_EQUAL",
        (pANTLR3_UINT8) "OP_GREATER",
        (pANTLR3_UINT8) "OP_GREATER_EQUAL",
        (pANTLR3_UINT8) "OP_SHIFT_LEFT",
        (pANTLR3_UINT8) "OP_SHIFT_RIGHT",
        (pANTLR3_UINT8) "OP_ADD",
        (pANTLR3_UINT8) "OP_SUB",
        (pANTLR3_UINT8) "OP_MOD",
        (pANTLR3_UINT8) "OP_MUL",
        (pANTLR3_UINT8) "OP_DIV",
        (pANTLR3_UINT8) "OP_POST_INCR",
        (pANTLR3_UINT8) "OP_POST_DECR",
        (pANTLR3_UINT8) "OP_BITWISE_NOT",
        (pANTLR3_UINT8) "OP_LOGICAL_NOT",
        (pANTLR3_UINT8) "OP_NEGATE",
        (pANTLR3_UINT8) "OP_PRE_INCR",
        (pANTLR3_UINT8) "OP_PRE_DECR",
        (pANTLR3_UINT8) "OP_ELEMENT",
        (pANTLR3_UINT8) "OP_INDEX",
        (pANTLR3_UINT8) "OP_CALL_FUNC",
        (pANTLR3_UINT8) "COMMA_BLOCK",
        (pANTLR3_UINT8) "CP_BLOCK",
        (pANTLR3_UINT8) "ARGUMENT_LIST",
        (pANTLR3_UINT8) "PARAMETER_LIST",
        (pANTLR3_UINT8) "IF_STAT",
        (pANTLR3_UINT8) "SWITCH_STAT",
        (pANTLR3_UINT8) "SWITCH_CASE_LABEL",
        (pANTLR3_UINT8) "FOR_STAT",
        (pANTLR3_UINT8) "WHILE_STAT",
        (pANTLR3_UINT8) "DO_WHILE_STAT",
        (pANTLR3_UINT8) "LOCAL_DECLARATION_STAT",
        (pANTLR3_UINT8) "EMPTY_EXPR",
        (pANTLR3_UINT8) "BREAK_STAT",
        (pANTLR3_UINT8) "CONTINUE_STAT",
        (pANTLR3_UINT8) "FUNC_DEF",
        (pANTLR3_UINT8) "RETURN_STAT",
        (pANTLR3_UINT8) "THIS_FUNC",
        (pANTLR3_UINT8) "DICT_VALUE",
        (pANTLR3_UINT8) "DICT_ELEM_VALUE",
        (pANTLR3_UINT8) "IDENTIFIER",
        (pANTLR3_UINT8) "STRING_LITERAL",
        (pANTLR3_UINT8) "STRING_BASIC_CHAR",
        (pANTLR3_UINT8) "STRING_ESC_SEQ",
        (pANTLR3_UINT8) "DECIMAL_INTEGER_LITERAL",
        (pANTLR3_UINT8) "HEXADECIMAL_INTEGER_LITERAL",
        (pANTLR3_UINT8) "FLOAT_LITERAL",
        (pANTLR3_UINT8) "FLOAT_EXPONENT",
        (pANTLR3_UINT8) "SL_COMMENT",
        (pANTLR3_UINT8) "ML_COMMENT",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "INCLUDE_FILENAME",
        (pANTLR3_UINT8) "LINE_COMMAND",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'local'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'<<='",
        (pANTLR3_UINT8) "'>>='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'__this_func__'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static gruntParser_prog_return	prog    (pgruntParser ctx);
static gruntParser_stat_return	stat    (pgruntParser ctx);
static gruntParser_local_declaration_stat_return	local_declaration_stat    (pgruntParser ctx);
static gruntParser_function_definition_return	function_definition    (pgruntParser ctx);
static gruntParser_selection_stat_return	selection_stat    (pgruntParser ctx);
static gruntParser_if_stat_return	if_stat    (pgruntParser ctx);
static gruntParser_switch_stat_return	switch_stat    (pgruntParser ctx);
static gruntParser_switch_case_label_return	switch_case_label    (pgruntParser ctx);
static gruntParser_iteration_stat_return	iteration_stat    (pgruntParser ctx);
static gruntParser_for_stat_return	for_stat    (pgruntParser ctx);
static gruntParser_for_init_expr_return	for_init_expr    (pgruntParser ctx);
static gruntParser_for_cond_expr_return	for_cond_expr    (pgruntParser ctx);
static gruntParser_for_loop_expr_return	for_loop_expr    (pgruntParser ctx);
static gruntParser_while_stat_return	while_stat    (pgruntParser ctx);
static gruntParser_do_while_stat_return	do_while_stat    (pgruntParser ctx);
static gruntParser_compound_stat_return	compound_stat    (pgruntParser ctx);
static gruntParser_comma_stat_return	comma_stat    (pgruntParser ctx);
static gruntParser_parameter_list_return	parameter_list    (pgruntParser ctx);
static gruntParser_argument_list_return	argument_list    (pgruntParser ctx);
static gruntParser_expr_return	expr    (pgruntParser ctx);
static gruntParser_assignment_expr_return	assignment_expr    (pgruntParser ctx);
static gruntParser_conditional_expr_return	conditional_expr    (pgruntParser ctx);
static gruntParser_logical_or_expr_return	logical_or_expr    (pgruntParser ctx);
static gruntParser_logical_and_expr_return	logical_and_expr    (pgruntParser ctx);
static gruntParser_bitwise_or_expr_return	bitwise_or_expr    (pgruntParser ctx);
static gruntParser_bitwise_xor_expr_return	bitwise_xor_expr    (pgruntParser ctx);
static gruntParser_bitwise_and_expr_return	bitwise_and_expr    (pgruntParser ctx);
static gruntParser_equality_expr_return	equality_expr    (pgruntParser ctx);
static gruntParser_inequality_expr_return	inequality_expr    (pgruntParser ctx);
static gruntParser_bitwise_shift_expr_return	bitwise_shift_expr    (pgruntParser ctx);
static gruntParser_add_expr_return	add_expr    (pgruntParser ctx);
static gruntParser_mul_expr_return	mul_expr    (pgruntParser ctx);
static gruntParser_pre_unary_expr_return	pre_unary_expr    (pgruntParser ctx);
static gruntParser_post_unary_expr_return	post_unary_expr    (pgruntParser ctx);
static gruntParser_primary_expr_return	primary_expr    (pgruntParser ctx);
static gruntParser_dictionary_value_return	dictionary_value    (pgruntParser ctx);
static gruntParser_string_literal_rule_return	string_literal_rule    (pgruntParser ctx);
static gruntParser_integer_literal_rule_return	integer_literal_rule    (pgruntParser ctx);
static gruntParser_float_literal_rule_return	float_literal_rule    (pgruntParser ctx);
static ANTLR3_BOOLEAN	synpred1_grunt    (pgruntParser ctx);
static ANTLR3_BOOLEAN	synpred2_grunt    (pgruntParser ctx);
static void	gruntParserFree(pgruntParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "grunt.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new gruntParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pgruntParser
gruntParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return gruntParserNewSSD(instream, NULL);
}

/** \brief Create a new gruntParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pgruntParser
gruntParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pgruntParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pgruntParser) ANTLR3_CALLOC(1, sizeof(gruntParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in gruntParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our gruntParser interface
     */
    ctx->prog	= prog;
    ctx->stat	= stat;
    ctx->local_declaration_stat	= local_declaration_stat;
    ctx->function_definition	= function_definition;
    ctx->selection_stat	= selection_stat;
    ctx->if_stat	= if_stat;
    ctx->switch_stat	= switch_stat;
    ctx->switch_case_label	= switch_case_label;
    ctx->iteration_stat	= iteration_stat;
    ctx->for_stat	= for_stat;
    ctx->for_init_expr	= for_init_expr;
    ctx->for_cond_expr	= for_cond_expr;
    ctx->for_loop_expr	= for_loop_expr;
    ctx->while_stat	= while_stat;
    ctx->do_while_stat	= do_while_stat;
    ctx->compound_stat	= compound_stat;
    ctx->comma_stat	= comma_stat;
    ctx->parameter_list	= parameter_list;
    ctx->argument_list	= argument_list;
    ctx->expr	= expr;
    ctx->assignment_expr	= assignment_expr;
    ctx->conditional_expr	= conditional_expr;
    ctx->logical_or_expr	= logical_or_expr;
    ctx->logical_and_expr	= logical_and_expr;
    ctx->bitwise_or_expr	= bitwise_or_expr;
    ctx->bitwise_xor_expr	= bitwise_xor_expr;
    ctx->bitwise_and_expr	= bitwise_and_expr;
    ctx->equality_expr	= equality_expr;
    ctx->inequality_expr	= inequality_expr;
    ctx->bitwise_shift_expr	= bitwise_shift_expr;
    ctx->add_expr	= add_expr;
    ctx->mul_expr	= mul_expr;
    ctx->pre_unary_expr	= pre_unary_expr;
    ctx->post_unary_expr	= post_unary_expr;
    ctx->primary_expr	= primary_expr;
    ctx->dictionary_value	= dictionary_value;
    ctx->string_literal_rule	= string_literal_rule;
    ctx->integer_literal_rule	= integer_literal_rule;
    ctx->float_literal_rule	= float_literal_rule;
    ctx->synpred1_grunt	= synpred1_grunt;
    ctx->synpred2_grunt	= synpred2_grunt;
    ctx->free			= gruntParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = gruntParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 gruntParserFree(pgruntParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return gruntParserTokenNames; 
}


    	static void	patch_STRING_LITERAL(pANTLR3_COMMON_TOKEN token, pgruntParser ctx)
    	{
    		wcs s = grunt_unescape_string(wcs((const wchar_t*)token->getText(token)->chars + 1, (size_t)(token->getText(token)->len - 2)));
    		token->setText(token, ctx->adaptor->strFactory->newStr(ctx->adaptor->strFactory, (ANTLR3_UINT8*)s.c_str()));
    	}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_stat_in_prog324  */
static	ANTLR3_BITWORD FOLLOW_stat_in_prog324_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8C0000038673E073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_stat_in_prog324	= { FOLLOW_stat_in_prog324_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_comma_stat_in_stat345  */
static	ANTLR3_BITWORD FOLLOW_comma_stat_in_stat345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_comma_stat_in_stat345	= { FOLLOW_comma_stat_in_stat345_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_stat347  */
static	ANTLR3_BITWORD FOLLOW_77_in_stat347_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_stat347	= { FOLLOW_77_in_stat347_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_compound_stat_in_stat356  */
static	ANTLR3_BITWORD FOLLOW_compound_stat_in_stat356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_compound_stat_in_stat356	= { FOLLOW_compound_stat_in_stat356_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selection_stat_in_stat361  */
static	ANTLR3_BITWORD FOLLOW_selection_stat_in_stat361_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_selection_stat_in_stat361	= { FOLLOW_selection_stat_in_stat361_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iteration_stat_in_stat366  */
static	ANTLR3_BITWORD FOLLOW_iteration_stat_in_stat366_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iteration_stat_in_stat366	= { FOLLOW_iteration_stat_in_stat366_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_local_declaration_stat_in_stat371  */
static	ANTLR3_BITWORD FOLLOW_local_declaration_stat_in_stat371_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_local_declaration_stat_in_stat371	= { FOLLOW_local_declaration_stat_in_stat371_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_stat373  */
static	ANTLR3_BITWORD FOLLOW_77_in_stat373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_stat373	= { FOLLOW_77_in_stat373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_stat383  */
static	ANTLR3_BITWORD FOLLOW_77_in_stat383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_stat383	= { FOLLOW_77_in_stat383_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_78_in_stat396  */
static	ANTLR3_BITWORD FOLLOW_78_in_stat396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_78_in_stat396	= { FOLLOW_78_in_stat396_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_stat398  */
static	ANTLR3_BITWORD FOLLOW_77_in_stat398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_stat398	= { FOLLOW_77_in_stat398_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_79_in_stat410  */
static	ANTLR3_BITWORD FOLLOW_79_in_stat410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_79_in_stat410	= { FOLLOW_79_in_stat410_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_stat412  */
static	ANTLR3_BITWORD FOLLOW_77_in_stat412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_stat412	= { FOLLOW_77_in_stat412_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_80_in_stat424  */
static	ANTLR3_BITWORD FOLLOW_80_in_stat424_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004502073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_80_in_stat424	= { FOLLOW_80_in_stat424_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_stat426  */
static	ANTLR3_BITWORD FOLLOW_expr_in_stat426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_stat426	= { FOLLOW_expr_in_stat426_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_stat429  */
static	ANTLR3_BITWORD FOLLOW_77_in_stat429_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_stat429	= { FOLLOW_77_in_stat429_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_81_in_local_declaration_stat451  */
static	ANTLR3_BITWORD FOLLOW_81_in_local_declaration_stat451_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_81_in_local_declaration_stat451	= { FOLLOW_81_in_local_declaration_stat451_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_local_declaration_stat454  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_local_declaration_stat454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x00000000000C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_local_declaration_stat454	= { FOLLOW_IDENTIFIER_in_local_declaration_stat454_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_82_in_local_declaration_stat457  */
static	ANTLR3_BITWORD FOLLOW_82_in_local_declaration_stat457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_82_in_local_declaration_stat457	= { FOLLOW_82_in_local_declaration_stat457_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_local_declaration_stat459  */
static	ANTLR3_BITWORD FOLLOW_expr_in_local_declaration_stat459_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_local_declaration_stat459	= { FOLLOW_expr_in_local_declaration_stat459_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_local_declaration_stat475  */
static	ANTLR3_BITWORD FOLLOW_83_in_local_declaration_stat475_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_local_declaration_stat475	= { FOLLOW_83_in_local_declaration_stat475_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_local_declaration_stat477  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_local_declaration_stat477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x00000000000C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_local_declaration_stat477	= { FOLLOW_IDENTIFIER_in_local_declaration_stat477_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_82_in_local_declaration_stat480  */
static	ANTLR3_BITWORD FOLLOW_82_in_local_declaration_stat480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_82_in_local_declaration_stat480	= { FOLLOW_82_in_local_declaration_stat480_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_local_declaration_stat482  */
static	ANTLR3_BITWORD FOLLOW_expr_in_local_declaration_stat482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_local_declaration_stat482	= { FOLLOW_expr_in_local_declaration_stat482_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_84_in_function_definition510  */
static	ANTLR3_BITWORD FOLLOW_84_in_function_definition510_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_84_in_function_definition510	= { FOLLOW_84_in_function_definition510_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_parameter_list_in_function_definition512  */
static	ANTLR3_BITWORD FOLLOW_parameter_list_in_function_definition512_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_parameter_list_in_function_definition512	= { FOLLOW_parameter_list_in_function_definition512_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_compound_stat_in_function_definition514  */
static	ANTLR3_BITWORD FOLLOW_compound_stat_in_function_definition514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_compound_stat_in_function_definition514	= { FOLLOW_compound_stat_in_function_definition514_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_if_stat_in_selection_stat537  */
static	ANTLR3_BITWORD FOLLOW_if_stat_in_selection_stat537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_if_stat_in_selection_stat537	= { FOLLOW_if_stat_in_selection_stat537_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switch_stat_in_selection_stat542  */
static	ANTLR3_BITWORD FOLLOW_switch_stat_in_selection_stat542_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switch_stat_in_selection_stat542	= { FOLLOW_switch_stat_in_selection_stat542_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_85_in_if_stat553  */
static	ANTLR3_BITWORD FOLLOW_85_in_if_stat553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_85_in_if_stat553	= { FOLLOW_85_in_if_stat553_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_if_stat555  */
static	ANTLR3_BITWORD FOLLOW_86_in_if_stat555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_if_stat555	= { FOLLOW_86_in_if_stat555_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_if_stat557  */
static	ANTLR3_BITWORD FOLLOW_expr_in_if_stat557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_if_stat557	= { FOLLOW_expr_in_if_stat557_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_if_stat559  */
static	ANTLR3_BITWORD FOLLOW_87_in_if_stat559_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C0000038773E073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_if_stat559	= { FOLLOW_87_in_if_stat559_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stat_in_if_stat565  */
static	ANTLR3_BITWORD FOLLOW_stat_in_if_stat565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_stat_in_if_stat565	= { FOLLOW_stat_in_if_stat565_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_88_in_if_stat575  */
static	ANTLR3_BITWORD FOLLOW_88_in_if_stat575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C0000038673E073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_88_in_if_stat575	= { FOLLOW_88_in_if_stat575_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stat_in_if_stat581  */
static	ANTLR3_BITWORD FOLLOW_stat_in_if_stat581_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stat_in_if_stat581	= { FOLLOW_stat_in_if_stat581_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_89_in_switch_stat613  */
static	ANTLR3_BITWORD FOLLOW_89_in_switch_stat613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_89_in_switch_stat613	= { FOLLOW_89_in_switch_stat613_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_switch_stat615  */
static	ANTLR3_BITWORD FOLLOW_86_in_switch_stat615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_switch_stat615	= { FOLLOW_86_in_switch_stat615_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_switch_stat618  */
static	ANTLR3_BITWORD FOLLOW_expr_in_switch_stat618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_switch_stat618	= { FOLLOW_expr_in_switch_stat618_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_switch_stat625  */
static	ANTLR3_BITWORD FOLLOW_87_in_switch_stat625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_switch_stat625	= { FOLLOW_87_in_switch_stat625_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_90_in_switch_stat627  */
static	ANTLR3_BITWORD FOLLOW_90_in_switch_stat627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C000003DE73E073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_90_in_switch_stat627	= { FOLLOW_90_in_switch_stat627_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switch_case_label_in_switch_stat631  */
static	ANTLR3_BITWORD FOLLOW_switch_case_label_in_switch_stat631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C000003DE73E073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_switch_case_label_in_switch_stat631	= { FOLLOW_switch_case_label_in_switch_stat631_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stat_in_switch_stat644  */
static	ANTLR3_BITWORD FOLLOW_stat_in_switch_stat644_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C000003DE73E073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_stat_in_switch_stat644	= { FOLLOW_stat_in_switch_stat644_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_91_in_switch_stat656  */
static	ANTLR3_BITWORD FOLLOW_91_in_switch_stat656_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_91_in_switch_stat656	= { FOLLOW_91_in_switch_stat656_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_switch_case_label676  */
static	ANTLR3_BITWORD FOLLOW_92_in_switch_case_label676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_switch_case_label676	= { FOLLOW_92_in_switch_case_label676_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_switch_case_label678  */
static	ANTLR3_BITWORD FOLLOW_expr_in_switch_case_label678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_switch_case_label678	= { FOLLOW_expr_in_switch_case_label678_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_93_in_switch_case_label680  */
static	ANTLR3_BITWORD FOLLOW_93_in_switch_case_label680_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_93_in_switch_case_label680	= { FOLLOW_93_in_switch_case_label680_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_94_in_switch_case_label694  */
static	ANTLR3_BITWORD FOLLOW_94_in_switch_case_label694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_94_in_switch_case_label694	= { FOLLOW_94_in_switch_case_label694_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_93_in_switch_case_label696  */
static	ANTLR3_BITWORD FOLLOW_93_in_switch_case_label696_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_93_in_switch_case_label696	= { FOLLOW_93_in_switch_case_label696_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_for_stat_in_iteration_stat712  */
static	ANTLR3_BITWORD FOLLOW_for_stat_in_iteration_stat712_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_for_stat_in_iteration_stat712	= { FOLLOW_for_stat_in_iteration_stat712_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_while_stat_in_iteration_stat717  */
static	ANTLR3_BITWORD FOLLOW_while_stat_in_iteration_stat717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_while_stat_in_iteration_stat717	= { FOLLOW_while_stat_in_iteration_stat717_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_do_while_stat_in_iteration_stat722  */
static	ANTLR3_BITWORD FOLLOW_do_while_stat_in_iteration_stat722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_do_while_stat_in_iteration_stat722	= { FOLLOW_do_while_stat_in_iteration_stat722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_for_stat733  */
static	ANTLR3_BITWORD FOLLOW_95_in_for_stat733_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_for_stat733	= { FOLLOW_95_in_for_stat733_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_for_stat735  */
static	ANTLR3_BITWORD FOLLOW_86_in_for_stat735_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004522073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_for_stat735	= { FOLLOW_86_in_for_stat735_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_for_init_expr_in_for_stat737  */
static	ANTLR3_BITWORD FOLLOW_for_init_expr_in_for_stat737_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_for_init_expr_in_for_stat737	= { FOLLOW_for_init_expr_in_for_stat737_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_for_stat739  */
static	ANTLR3_BITWORD FOLLOW_77_in_for_stat739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004502073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_for_stat739	= { FOLLOW_77_in_for_stat739_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_for_cond_expr_in_for_stat741  */
static	ANTLR3_BITWORD FOLLOW_for_cond_expr_in_for_stat741_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_for_cond_expr_in_for_stat741	= { FOLLOW_for_cond_expr_in_for_stat741_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_for_stat743  */
static	ANTLR3_BITWORD FOLLOW_77_in_for_stat743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004D00073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_for_stat743	= { FOLLOW_77_in_for_stat743_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_for_loop_expr_in_for_stat745  */
static	ANTLR3_BITWORD FOLLOW_for_loop_expr_in_for_stat745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_for_loop_expr_in_for_stat745	= { FOLLOW_for_loop_expr_in_for_stat745_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_for_stat747  */
static	ANTLR3_BITWORD FOLLOW_87_in_for_stat747_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C0000038673E073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_for_stat747	= { FOLLOW_87_in_for_stat747_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stat_in_for_stat749  */
static	ANTLR3_BITWORD FOLLOW_stat_in_for_stat749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stat_in_for_stat749	= { FOLLOW_stat_in_for_stat749_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_local_declaration_stat_in_for_init_expr776  */
static	ANTLR3_BITWORD FOLLOW_local_declaration_stat_in_for_init_expr776_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_local_declaration_stat_in_for_init_expr776	= { FOLLOW_local_declaration_stat_in_for_init_expr776_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_comma_stat_in_for_init_expr781  */
static	ANTLR3_BITWORD FOLLOW_comma_stat_in_for_init_expr781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_comma_stat_in_for_init_expr781	= { FOLLOW_comma_stat_in_for_init_expr781_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_for_cond_expr799  */
static	ANTLR3_BITWORD FOLLOW_expr_in_for_cond_expr799_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_for_cond_expr799	= { FOLLOW_expr_in_for_cond_expr799_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_comma_stat_in_for_loop_expr817  */
static	ANTLR3_BITWORD FOLLOW_comma_stat_in_for_loop_expr817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_comma_stat_in_for_loop_expr817	= { FOLLOW_comma_stat_in_for_loop_expr817_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_96_in_while_stat835  */
static	ANTLR3_BITWORD FOLLOW_96_in_while_stat835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_96_in_while_stat835	= { FOLLOW_96_in_while_stat835_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_while_stat837  */
static	ANTLR3_BITWORD FOLLOW_86_in_while_stat837_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_while_stat837	= { FOLLOW_86_in_while_stat837_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_while_stat839  */
static	ANTLR3_BITWORD FOLLOW_expr_in_while_stat839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_while_stat839	= { FOLLOW_expr_in_while_stat839_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_while_stat841  */
static	ANTLR3_BITWORD FOLLOW_87_in_while_stat841_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C0000038673E073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_while_stat841	= { FOLLOW_87_in_while_stat841_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stat_in_while_stat843  */
static	ANTLR3_BITWORD FOLLOW_stat_in_while_stat843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_stat_in_while_stat843	= { FOLLOW_stat_in_while_stat843_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_97_in_do_while_stat866  */
static	ANTLR3_BITWORD FOLLOW_97_in_do_while_stat866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_97_in_do_while_stat866	= { FOLLOW_97_in_do_while_stat866_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_compound_stat_in_do_while_stat868  */
static	ANTLR3_BITWORD FOLLOW_compound_stat_in_do_while_stat868_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_compound_stat_in_do_while_stat868	= { FOLLOW_compound_stat_in_do_while_stat868_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_96_in_do_while_stat870  */
static	ANTLR3_BITWORD FOLLOW_96_in_do_while_stat870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_96_in_do_while_stat870	= { FOLLOW_96_in_do_while_stat870_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_do_while_stat872  */
static	ANTLR3_BITWORD FOLLOW_86_in_do_while_stat872_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_do_while_stat872	= { FOLLOW_86_in_do_while_stat872_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_do_while_stat874  */
static	ANTLR3_BITWORD FOLLOW_expr_in_do_while_stat874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_do_while_stat874	= { FOLLOW_expr_in_do_while_stat874_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_do_while_stat876  */
static	ANTLR3_BITWORD FOLLOW_87_in_do_while_stat876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_do_while_stat876	= { FOLLOW_87_in_do_while_stat876_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_do_while_stat878  */
static	ANTLR3_BITWORD FOLLOW_77_in_do_while_stat878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_do_while_stat878	= { FOLLOW_77_in_do_while_stat878_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_90_in_compound_stat901  */
static	ANTLR3_BITWORD FOLLOW_90_in_compound_stat901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C0000038E73E073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_90_in_compound_stat901	= { FOLLOW_90_in_compound_stat901_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_stat_in_compound_stat903  */
static	ANTLR3_BITWORD FOLLOW_stat_in_compound_stat903_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C0000038E73E073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_stat_in_compound_stat903	= { FOLLOW_stat_in_compound_stat903_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_91_in_compound_stat906  */
static	ANTLR3_BITWORD FOLLOW_91_in_compound_stat906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_91_in_compound_stat906	= { FOLLOW_91_in_compound_stat906_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_comma_stat931  */
static	ANTLR3_BITWORD FOLLOW_expr_in_comma_stat931_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_comma_stat931	= { FOLLOW_expr_in_comma_stat931_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_comma_stat939  */
static	ANTLR3_BITWORD FOLLOW_83_in_comma_stat939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_comma_stat939	= { FOLLOW_83_in_comma_stat939_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_comma_stat945  */
static	ANTLR3_BITWORD FOLLOW_expr_in_comma_stat945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_comma_stat945	= { FOLLOW_expr_in_comma_stat945_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_parameter_list969  */
static	ANTLR3_BITWORD FOLLOW_86_in_parameter_list969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000800001) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_parameter_list969	= { FOLLOW_86_in_parameter_list969_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_parameter_list986  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_parameter_list986_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000880000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_parameter_list986	= { FOLLOW_IDENTIFIER_in_parameter_list986_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_parameter_list989  */
static	ANTLR3_BITWORD FOLLOW_83_in_parameter_list989_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_parameter_list989	= { FOLLOW_83_in_parameter_list989_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_parameter_list995  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_parameter_list995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000880000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_parameter_list995	= { FOLLOW_IDENTIFIER_in_parameter_list995_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_parameter_list1011  */
static	ANTLR3_BITWORD FOLLOW_87_in_parameter_list1011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_parameter_list1011	= { FOLLOW_87_in_parameter_list1011_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_argument_list1022  */
static	ANTLR3_BITWORD FOLLOW_86_in_argument_list1022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004D00073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_argument_list1022	= { FOLLOW_86_in_argument_list1022_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_argument_list1032  */
static	ANTLR3_BITWORD FOLLOW_expr_in_argument_list1032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000880000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_argument_list1032	= { FOLLOW_expr_in_argument_list1032_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_argument_list1035  */
static	ANTLR3_BITWORD FOLLOW_83_in_argument_list1035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_argument_list1035	= { FOLLOW_83_in_argument_list1035_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_argument_list1041  */
static	ANTLR3_BITWORD FOLLOW_expr_in_argument_list1041_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000880000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_argument_list1041	= { FOLLOW_expr_in_argument_list1041_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_argument_list1046  */
static	ANTLR3_BITWORD FOLLOW_87_in_argument_list1046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_argument_list1046	= { FOLLOW_87_in_argument_list1046_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expr_in_expr1067  */
static	ANTLR3_BITWORD FOLLOW_assignment_expr_in_expr1067_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expr_in_expr1067	= { FOLLOW_assignment_expr_in_expr1067_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditional_expr_in_assignment_expr1078  */
static	ANTLR3_BITWORD FOLLOW_conditional_expr_in_assignment_expr1078_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x00000FFC00040000) };
static  ANTLR3_BITSET_LIST FOLLOW_conditional_expr_in_assignment_expr1078	= { FOLLOW_conditional_expr_in_assignment_expr1078_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_82_in_assignment_expr1096  */
static	ANTLR3_BITWORD FOLLOW_82_in_assignment_expr1096_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_82_in_assignment_expr1096	= { FOLLOW_82_in_assignment_expr1096_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expr_in_assignment_expr1098  */
static	ANTLR3_BITWORD FOLLOW_assignment_expr_in_assignment_expr1098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expr_in_assignment_expr1098	= { FOLLOW_assignment_expr_in_assignment_expr1098_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_98_in_assignment_expr1117  */
static	ANTLR3_BITWORD FOLLOW_98_in_assignment_expr1117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_98_in_assignment_expr1117	= { FOLLOW_98_in_assignment_expr1117_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expr_in_assignment_expr1119  */
static	ANTLR3_BITWORD FOLLOW_assignment_expr_in_assignment_expr1119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expr_in_assignment_expr1119	= { FOLLOW_assignment_expr_in_assignment_expr1119_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_99_in_assignment_expr1138  */
static	ANTLR3_BITWORD FOLLOW_99_in_assignment_expr1138_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_99_in_assignment_expr1138	= { FOLLOW_99_in_assignment_expr1138_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expr_in_assignment_expr1140  */
static	ANTLR3_BITWORD FOLLOW_assignment_expr_in_assignment_expr1140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expr_in_assignment_expr1140	= { FOLLOW_assignment_expr_in_assignment_expr1140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_100_in_assignment_expr1159  */
static	ANTLR3_BITWORD FOLLOW_100_in_assignment_expr1159_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_100_in_assignment_expr1159	= { FOLLOW_100_in_assignment_expr1159_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expr_in_assignment_expr1161  */
static	ANTLR3_BITWORD FOLLOW_assignment_expr_in_assignment_expr1161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expr_in_assignment_expr1161	= { FOLLOW_assignment_expr_in_assignment_expr1161_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_101_in_assignment_expr1180  */
static	ANTLR3_BITWORD FOLLOW_101_in_assignment_expr1180_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_101_in_assignment_expr1180	= { FOLLOW_101_in_assignment_expr1180_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expr_in_assignment_expr1182  */
static	ANTLR3_BITWORD FOLLOW_assignment_expr_in_assignment_expr1182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expr_in_assignment_expr1182	= { FOLLOW_assignment_expr_in_assignment_expr1182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_102_in_assignment_expr1201  */
static	ANTLR3_BITWORD FOLLOW_102_in_assignment_expr1201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_102_in_assignment_expr1201	= { FOLLOW_102_in_assignment_expr1201_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expr_in_assignment_expr1203  */
static	ANTLR3_BITWORD FOLLOW_assignment_expr_in_assignment_expr1203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expr_in_assignment_expr1203	= { FOLLOW_assignment_expr_in_assignment_expr1203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_103_in_assignment_expr1222  */
static	ANTLR3_BITWORD FOLLOW_103_in_assignment_expr1222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_103_in_assignment_expr1222	= { FOLLOW_103_in_assignment_expr1222_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expr_in_assignment_expr1224  */
static	ANTLR3_BITWORD FOLLOW_assignment_expr_in_assignment_expr1224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expr_in_assignment_expr1224	= { FOLLOW_assignment_expr_in_assignment_expr1224_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_104_in_assignment_expr1243  */
static	ANTLR3_BITWORD FOLLOW_104_in_assignment_expr1243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_104_in_assignment_expr1243	= { FOLLOW_104_in_assignment_expr1243_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expr_in_assignment_expr1245  */
static	ANTLR3_BITWORD FOLLOW_assignment_expr_in_assignment_expr1245_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expr_in_assignment_expr1245	= { FOLLOW_assignment_expr_in_assignment_expr1245_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_105_in_assignment_expr1264  */
static	ANTLR3_BITWORD FOLLOW_105_in_assignment_expr1264_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_105_in_assignment_expr1264	= { FOLLOW_105_in_assignment_expr1264_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expr_in_assignment_expr1266  */
static	ANTLR3_BITWORD FOLLOW_assignment_expr_in_assignment_expr1266_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expr_in_assignment_expr1266	= { FOLLOW_assignment_expr_in_assignment_expr1266_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_106_in_assignment_expr1285  */
static	ANTLR3_BITWORD FOLLOW_106_in_assignment_expr1285_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_106_in_assignment_expr1285	= { FOLLOW_106_in_assignment_expr1285_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expr_in_assignment_expr1287  */
static	ANTLR3_BITWORD FOLLOW_assignment_expr_in_assignment_expr1287_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expr_in_assignment_expr1287	= { FOLLOW_assignment_expr_in_assignment_expr1287_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_107_in_assignment_expr1306  */
static	ANTLR3_BITWORD FOLLOW_107_in_assignment_expr1306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_107_in_assignment_expr1306	= { FOLLOW_107_in_assignment_expr1306_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignment_expr_in_assignment_expr1308  */
static	ANTLR3_BITWORD FOLLOW_assignment_expr_in_assignment_expr1308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignment_expr_in_assignment_expr1308	= { FOLLOW_assignment_expr_in_assignment_expr1308_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_or_expr_in_conditional_expr1335  */
static	ANTLR3_BITWORD FOLLOW_logical_or_expr_in_conditional_expr1335_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_or_expr_in_conditional_expr1335	= { FOLLOW_logical_or_expr_in_conditional_expr1335_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_108_in_conditional_expr1343  */
static	ANTLR3_BITWORD FOLLOW_108_in_conditional_expr1343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_108_in_conditional_expr1343	= { FOLLOW_108_in_conditional_expr1343_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_conditional_expr1345  */
static	ANTLR3_BITWORD FOLLOW_expr_in_conditional_expr1345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_conditional_expr1345	= { FOLLOW_expr_in_conditional_expr1345_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_93_in_conditional_expr1347  */
static	ANTLR3_BITWORD FOLLOW_93_in_conditional_expr1347_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_93_in_conditional_expr1347	= { FOLLOW_93_in_conditional_expr1347_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditional_expr_in_conditional_expr1349  */
static	ANTLR3_BITWORD FOLLOW_conditional_expr_in_conditional_expr1349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditional_expr_in_conditional_expr1349	= { FOLLOW_conditional_expr_in_conditional_expr1349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_and_expr_in_logical_or_expr1375  */
static	ANTLR3_BITWORD FOLLOW_logical_and_expr_in_logical_or_expr1375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_and_expr_in_logical_or_expr1375	= { FOLLOW_logical_and_expr_in_logical_or_expr1375_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_109_in_logical_or_expr1383  */
static	ANTLR3_BITWORD FOLLOW_109_in_logical_or_expr1383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_109_in_logical_or_expr1383	= { FOLLOW_109_in_logical_or_expr1383_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_and_expr_in_logical_or_expr1385  */
static	ANTLR3_BITWORD FOLLOW_logical_and_expr_in_logical_or_expr1385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_and_expr_in_logical_or_expr1385	= { FOLLOW_logical_and_expr_in_logical_or_expr1385_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwise_or_expr_in_logical_and_expr1410  */
static	ANTLR3_BITWORD FOLLOW_bitwise_or_expr_in_logical_and_expr1410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwise_or_expr_in_logical_and_expr1410	= { FOLLOW_bitwise_or_expr_in_logical_and_expr1410_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_110_in_logical_and_expr1418  */
static	ANTLR3_BITWORD FOLLOW_110_in_logical_and_expr1418_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_110_in_logical_and_expr1418	= { FOLLOW_110_in_logical_and_expr1418_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwise_or_expr_in_logical_and_expr1420  */
static	ANTLR3_BITWORD FOLLOW_bitwise_or_expr_in_logical_and_expr1420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwise_or_expr_in_logical_and_expr1420	= { FOLLOW_bitwise_or_expr_in_logical_and_expr1420_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwise_xor_expr_in_bitwise_or_expr1445  */
static	ANTLR3_BITWORD FOLLOW_bitwise_xor_expr_in_bitwise_or_expr1445_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwise_xor_expr_in_bitwise_or_expr1445	= { FOLLOW_bitwise_xor_expr_in_bitwise_or_expr1445_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_111_in_bitwise_or_expr1453  */
static	ANTLR3_BITWORD FOLLOW_111_in_bitwise_or_expr1453_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_111_in_bitwise_or_expr1453	= { FOLLOW_111_in_bitwise_or_expr1453_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwise_xor_expr_in_bitwise_or_expr1455  */
static	ANTLR3_BITWORD FOLLOW_bitwise_xor_expr_in_bitwise_or_expr1455_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwise_xor_expr_in_bitwise_or_expr1455	= { FOLLOW_bitwise_xor_expr_in_bitwise_or_expr1455_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwise_and_expr_in_bitwise_xor_expr1480  */
static	ANTLR3_BITWORD FOLLOW_bitwise_and_expr_in_bitwise_xor_expr1480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwise_and_expr_in_bitwise_xor_expr1480	= { FOLLOW_bitwise_and_expr_in_bitwise_xor_expr1480_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_112_in_bitwise_xor_expr1488  */
static	ANTLR3_BITWORD FOLLOW_112_in_bitwise_xor_expr1488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_112_in_bitwise_xor_expr1488	= { FOLLOW_112_in_bitwise_xor_expr1488_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwise_and_expr_in_bitwise_xor_expr1490  */
static	ANTLR3_BITWORD FOLLOW_bitwise_and_expr_in_bitwise_xor_expr1490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwise_and_expr_in_bitwise_xor_expr1490	= { FOLLOW_bitwise_and_expr_in_bitwise_xor_expr1490_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equality_expr_in_bitwise_and_expr1515  */
static	ANTLR3_BITWORD FOLLOW_equality_expr_in_bitwise_and_expr1515_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equality_expr_in_bitwise_and_expr1515	= { FOLLOW_equality_expr_in_bitwise_and_expr1515_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_113_in_bitwise_and_expr1523  */
static	ANTLR3_BITWORD FOLLOW_113_in_bitwise_and_expr1523_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_113_in_bitwise_and_expr1523	= { FOLLOW_113_in_bitwise_and_expr1523_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equality_expr_in_bitwise_and_expr1525  */
static	ANTLR3_BITWORD FOLLOW_equality_expr_in_bitwise_and_expr1525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equality_expr_in_bitwise_and_expr1525	= { FOLLOW_equality_expr_in_bitwise_and_expr1525_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_inequality_expr_in_equality_expr1550  */
static	ANTLR3_BITWORD FOLLOW_inequality_expr_in_equality_expr1550_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x000C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_inequality_expr_in_equality_expr1550	= { FOLLOW_inequality_expr_in_equality_expr1550_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_114_in_equality_expr1564  */
static	ANTLR3_BITWORD FOLLOW_114_in_equality_expr1564_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_114_in_equality_expr1564	= { FOLLOW_114_in_equality_expr1564_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_inequality_expr_in_equality_expr1566  */
static	ANTLR3_BITWORD FOLLOW_inequality_expr_in_equality_expr1566_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x000C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_inequality_expr_in_equality_expr1566	= { FOLLOW_inequality_expr_in_equality_expr1566_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_115_in_equality_expr1586  */
static	ANTLR3_BITWORD FOLLOW_115_in_equality_expr1586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_115_in_equality_expr1586	= { FOLLOW_115_in_equality_expr1586_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_inequality_expr_in_equality_expr1588  */
static	ANTLR3_BITWORD FOLLOW_inequality_expr_in_equality_expr1588_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x000C000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_inequality_expr_in_equality_expr1588	= { FOLLOW_inequality_expr_in_equality_expr1588_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwise_shift_expr_in_inequality_expr1617  */
static	ANTLR3_BITWORD FOLLOW_bitwise_shift_expr_in_inequality_expr1617_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x00F0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwise_shift_expr_in_inequality_expr1617	= { FOLLOW_bitwise_shift_expr_in_inequality_expr1617_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_116_in_inequality_expr1631  */
static	ANTLR3_BITWORD FOLLOW_116_in_inequality_expr1631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_116_in_inequality_expr1631	= { FOLLOW_116_in_inequality_expr1631_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwise_shift_expr_in_inequality_expr1633  */
static	ANTLR3_BITWORD FOLLOW_bitwise_shift_expr_in_inequality_expr1633_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x00F0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwise_shift_expr_in_inequality_expr1633	= { FOLLOW_bitwise_shift_expr_in_inequality_expr1633_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_117_in_inequality_expr1653  */
static	ANTLR3_BITWORD FOLLOW_117_in_inequality_expr1653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_117_in_inequality_expr1653	= { FOLLOW_117_in_inequality_expr1653_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwise_shift_expr_in_inequality_expr1655  */
static	ANTLR3_BITWORD FOLLOW_bitwise_shift_expr_in_inequality_expr1655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x00F0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwise_shift_expr_in_inequality_expr1655	= { FOLLOW_bitwise_shift_expr_in_inequality_expr1655_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_118_in_inequality_expr1675  */
static	ANTLR3_BITWORD FOLLOW_118_in_inequality_expr1675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_118_in_inequality_expr1675	= { FOLLOW_118_in_inequality_expr1675_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwise_shift_expr_in_inequality_expr1677  */
static	ANTLR3_BITWORD FOLLOW_bitwise_shift_expr_in_inequality_expr1677_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x00F0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwise_shift_expr_in_inequality_expr1677	= { FOLLOW_bitwise_shift_expr_in_inequality_expr1677_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_119_in_inequality_expr1697  */
static	ANTLR3_BITWORD FOLLOW_119_in_inequality_expr1697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_119_in_inequality_expr1697	= { FOLLOW_119_in_inequality_expr1697_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwise_shift_expr_in_inequality_expr1699  */
static	ANTLR3_BITWORD FOLLOW_bitwise_shift_expr_in_inequality_expr1699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x00F0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwise_shift_expr_in_inequality_expr1699	= { FOLLOW_bitwise_shift_expr_in_inequality_expr1699_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_add_expr_in_bitwise_shift_expr1728  */
static	ANTLR3_BITWORD FOLLOW_add_expr_in_bitwise_shift_expr1728_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0300000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_add_expr_in_bitwise_shift_expr1728	= { FOLLOW_add_expr_in_bitwise_shift_expr1728_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_120_in_bitwise_shift_expr1742  */
static	ANTLR3_BITWORD FOLLOW_120_in_bitwise_shift_expr1742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_120_in_bitwise_shift_expr1742	= { FOLLOW_120_in_bitwise_shift_expr1742_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_add_expr_in_bitwise_shift_expr1744  */
static	ANTLR3_BITWORD FOLLOW_add_expr_in_bitwise_shift_expr1744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0300000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_add_expr_in_bitwise_shift_expr1744	= { FOLLOW_add_expr_in_bitwise_shift_expr1744_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_121_in_bitwise_shift_expr1764  */
static	ANTLR3_BITWORD FOLLOW_121_in_bitwise_shift_expr1764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_121_in_bitwise_shift_expr1764	= { FOLLOW_121_in_bitwise_shift_expr1764_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_add_expr_in_bitwise_shift_expr1766  */
static	ANTLR3_BITWORD FOLLOW_add_expr_in_bitwise_shift_expr1766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0300000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_add_expr_in_bitwise_shift_expr1766	= { FOLLOW_add_expr_in_bitwise_shift_expr1766_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_mul_expr_in_add_expr1795  */
static	ANTLR3_BITWORD FOLLOW_mul_expr_in_add_expr1795_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0C00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_mul_expr_in_add_expr1795	= { FOLLOW_mul_expr_in_add_expr1795_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_add_expr1809  */
static	ANTLR3_BITWORD FOLLOW_122_in_add_expr1809_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_add_expr1809	= { FOLLOW_122_in_add_expr1809_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_mul_expr_in_add_expr1811  */
static	ANTLR3_BITWORD FOLLOW_mul_expr_in_add_expr1811_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0C00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_mul_expr_in_add_expr1811	= { FOLLOW_mul_expr_in_add_expr1811_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_123_in_add_expr1831  */
static	ANTLR3_BITWORD FOLLOW_123_in_add_expr1831_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_123_in_add_expr1831	= { FOLLOW_123_in_add_expr1831_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_mul_expr_in_add_expr1833  */
static	ANTLR3_BITWORD FOLLOW_mul_expr_in_add_expr1833_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0C00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_mul_expr_in_add_expr1833	= { FOLLOW_mul_expr_in_add_expr1833_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pre_unary_expr_in_mul_expr1862  */
static	ANTLR3_BITWORD FOLLOW_pre_unary_expr_in_mul_expr1862_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x7000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_pre_unary_expr_in_mul_expr1862	= { FOLLOW_pre_unary_expr_in_mul_expr1862_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_mul_expr1876  */
static	ANTLR3_BITWORD FOLLOW_124_in_mul_expr1876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_mul_expr1876	= { FOLLOW_124_in_mul_expr1876_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pre_unary_expr_in_mul_expr1878  */
static	ANTLR3_BITWORD FOLLOW_pre_unary_expr_in_mul_expr1878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x7000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_pre_unary_expr_in_mul_expr1878	= { FOLLOW_pre_unary_expr_in_mul_expr1878_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_mul_expr1898  */
static	ANTLR3_BITWORD FOLLOW_125_in_mul_expr1898_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_mul_expr1898	= { FOLLOW_125_in_mul_expr1898_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pre_unary_expr_in_mul_expr1900  */
static	ANTLR3_BITWORD FOLLOW_pre_unary_expr_in_mul_expr1900_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x7000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_pre_unary_expr_in_mul_expr1900	= { FOLLOW_pre_unary_expr_in_mul_expr1900_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_mul_expr1920  */
static	ANTLR3_BITWORD FOLLOW_126_in_mul_expr1920_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_mul_expr1920	= { FOLLOW_126_in_mul_expr1920_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pre_unary_expr_in_mul_expr1922  */
static	ANTLR3_BITWORD FOLLOW_pre_unary_expr_in_mul_expr1922_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x7000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_pre_unary_expr_in_mul_expr1922	= { FOLLOW_pre_unary_expr_in_mul_expr1922_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_post_unary_expr_in_pre_unary_expr1952  */
static	ANTLR3_BITWORD FOLLOW_post_unary_expr_in_pre_unary_expr1952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_post_unary_expr_in_pre_unary_expr1952	= { FOLLOW_post_unary_expr_in_pre_unary_expr1952_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_pre_unary_expr1957  */
static	ANTLR3_BITWORD FOLLOW_127_in_pre_unary_expr1957_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_pre_unary_expr1957	= { FOLLOW_127_in_pre_unary_expr1957_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pre_unary_expr_in_pre_unary_expr1959  */
static	ANTLR3_BITWORD FOLLOW_pre_unary_expr_in_pre_unary_expr1959_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_pre_unary_expr_in_pre_unary_expr1959	= { FOLLOW_pre_unary_expr_in_pre_unary_expr1959_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_pre_unary_expr1972  */
static	ANTLR3_BITWORD FOLLOW_128_in_pre_unary_expr1972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_pre_unary_expr1972	= { FOLLOW_128_in_pre_unary_expr1972_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pre_unary_expr_in_pre_unary_expr1974  */
static	ANTLR3_BITWORD FOLLOW_pre_unary_expr_in_pre_unary_expr1974_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_pre_unary_expr_in_pre_unary_expr1974	= { FOLLOW_pre_unary_expr_in_pre_unary_expr1974_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_123_in_pre_unary_expr1987  */
static	ANTLR3_BITWORD FOLLOW_123_in_pre_unary_expr1987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_123_in_pre_unary_expr1987	= { FOLLOW_123_in_pre_unary_expr1987_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pre_unary_expr_in_pre_unary_expr1989  */
static	ANTLR3_BITWORD FOLLOW_pre_unary_expr_in_pre_unary_expr1989_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_pre_unary_expr_in_pre_unary_expr1989	= { FOLLOW_pre_unary_expr_in_pre_unary_expr1989_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_pre_unary_expr2002  */
static	ANTLR3_BITWORD FOLLOW_122_in_pre_unary_expr2002_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_pre_unary_expr2002	= { FOLLOW_122_in_pre_unary_expr2002_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pre_unary_expr_in_pre_unary_expr2004  */
static	ANTLR3_BITWORD FOLLOW_pre_unary_expr_in_pre_unary_expr2004_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_pre_unary_expr_in_pre_unary_expr2004	= { FOLLOW_pre_unary_expr_in_pre_unary_expr2004_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_pre_unary_expr2013  */
static	ANTLR3_BITWORD FOLLOW_129_in_pre_unary_expr2013_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_pre_unary_expr2013	= { FOLLOW_129_in_pre_unary_expr2013_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pre_unary_expr_in_pre_unary_expr2015  */
static	ANTLR3_BITWORD FOLLOW_pre_unary_expr_in_pre_unary_expr2015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_pre_unary_expr_in_pre_unary_expr2015	= { FOLLOW_pre_unary_expr_in_pre_unary_expr2015_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_pre_unary_expr2028  */
static	ANTLR3_BITWORD FOLLOW_130_in_pre_unary_expr2028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_pre_unary_expr2028	= { FOLLOW_130_in_pre_unary_expr2028_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_pre_unary_expr_in_pre_unary_expr2030  */
static	ANTLR3_BITWORD FOLLOW_pre_unary_expr_in_pre_unary_expr2030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_pre_unary_expr_in_pre_unary_expr2030	= { FOLLOW_pre_unary_expr_in_pre_unary_expr2030_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_expr_in_post_unary_expr2050  */
static	ANTLR3_BITWORD FOLLOW_primary_expr_in_post_unary_expr2050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000400000), ANTLR3_UINT64_LIT(0x000000000000001E) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_expr_in_post_unary_expr2050	= { FOLLOW_primary_expr_in_post_unary_expr2050_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_post_unary_expr2063  */
static	ANTLR3_BITWORD FOLLOW_129_in_post_unary_expr2063_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000400000), ANTLR3_UINT64_LIT(0x000000000000001E) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_post_unary_expr2063	= { FOLLOW_129_in_post_unary_expr2063_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_post_unary_expr2079  */
static	ANTLR3_BITWORD FOLLOW_130_in_post_unary_expr2079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000400000), ANTLR3_UINT64_LIT(0x000000000000001E) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_post_unary_expr2079	= { FOLLOW_130_in_post_unary_expr2079_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_post_unary_expr2095  */
static	ANTLR3_BITWORD FOLLOW_131_in_post_unary_expr2095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_post_unary_expr2095	= { FOLLOW_131_in_post_unary_expr2095_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_post_unary_expr2097  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_post_unary_expr2097_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000400000), ANTLR3_UINT64_LIT(0x000000000000001E) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_post_unary_expr2097	= { FOLLOW_IDENTIFIER_in_post_unary_expr2097_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_post_unary_expr2115  */
static	ANTLR3_BITWORD FOLLOW_132_in_post_unary_expr2115_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_post_unary_expr2115	= { FOLLOW_132_in_post_unary_expr2115_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_post_unary_expr2117  */
static	ANTLR3_BITWORD FOLLOW_expr_in_post_unary_expr2117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_post_unary_expr2117	= { FOLLOW_expr_in_post_unary_expr2117_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_post_unary_expr2119  */
static	ANTLR3_BITWORD FOLLOW_133_in_post_unary_expr2119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000400000), ANTLR3_UINT64_LIT(0x000000000000001E) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_post_unary_expr2119	= { FOLLOW_133_in_post_unary_expr2119_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_argument_list_in_post_unary_expr2137  */
static	ANTLR3_BITWORD FOLLOW_argument_list_in_post_unary_expr2137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000400000), ANTLR3_UINT64_LIT(0x000000000000001E) };
static  ANTLR3_BITSET_LIST FOLLOW_argument_list_in_post_unary_expr2137	= { FOLLOW_argument_list_in_post_unary_expr2137_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_rule_in_primary_expr2166  */
static	ANTLR3_BITWORD FOLLOW_string_literal_rule_in_primary_expr2166_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_rule_in_primary_expr2166	= { FOLLOW_string_literal_rule_in_primary_expr2166_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_literal_rule_in_primary_expr2171  */
static	ANTLR3_BITWORD FOLLOW_integer_literal_rule_in_primary_expr2171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_literal_rule_in_primary_expr2171	= { FOLLOW_integer_literal_rule_in_primary_expr2171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_float_literal_rule_in_primary_expr2176  */
static	ANTLR3_BITWORD FOLLOW_float_literal_rule_in_primary_expr2176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_float_literal_rule_in_primary_expr2176	= { FOLLOW_float_literal_rule_in_primary_expr2176_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_primary_expr2181  */
static	ANTLR3_BITWORD FOLLOW_86_in_primary_expr2181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_primary_expr2181	= { FOLLOW_86_in_primary_expr2181_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_primary_expr2183  */
static	ANTLR3_BITWORD FOLLOW_expr_in_primary_expr2183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_primary_expr2183	= { FOLLOW_expr_in_primary_expr2183_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_primary_expr2185  */
static	ANTLR3_BITWORD FOLLOW_87_in_primary_expr2185_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_primary_expr2185	= { FOLLOW_87_in_primary_expr2185_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_primary_expr2195  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_primary_expr2195_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_primary_expr2195	= { FOLLOW_IDENTIFIER_in_primary_expr2195_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_definition_in_primary_expr2200  */
static	ANTLR3_BITWORD FOLLOW_function_definition_in_primary_expr2200_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_definition_in_primary_expr2200	= { FOLLOW_function_definition_in_primary_expr2200_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_134_in_primary_expr2205  */
static	ANTLR3_BITWORD FOLLOW_134_in_primary_expr2205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_134_in_primary_expr2205	= { FOLLOW_134_in_primary_expr2205_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dictionary_value_in_primary_expr2215  */
static	ANTLR3_BITWORD FOLLOW_dictionary_value_in_primary_expr2215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dictionary_value_in_primary_expr2215	= { FOLLOW_dictionary_value_in_primary_expr2215_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_90_in_dictionary_value2226  */
static	ANTLR3_BITWORD FOLLOW_90_in_dictionary_value2226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000008000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_90_in_dictionary_value2226	= { FOLLOW_90_in_dictionary_value2226_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_dictionary_value2240  */
static	ANTLR3_BITWORD FOLLOW_131_in_dictionary_value2240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_dictionary_value2240	= { FOLLOW_131_in_dictionary_value2240_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_dictionary_value2247  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_dictionary_value2247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_dictionary_value2247	= { FOLLOW_IDENTIFIER_in_dictionary_value2247_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_LITERAL_in_dictionary_value2255  */
static	ANTLR3_BITWORD FOLLOW_STRING_LITERAL_in_dictionary_value2255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_LITERAL_in_dictionary_value2255	= { FOLLOW_STRING_LITERAL_in_dictionary_value2255_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_82_in_dictionary_value2260  */
static	ANTLR3_BITWORD FOLLOW_82_in_dictionary_value2260_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_82_in_dictionary_value2260	= { FOLLOW_82_in_dictionary_value2260_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_dictionary_value2262  */
static	ANTLR3_BITWORD FOLLOW_expr_in_dictionary_value2262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000008080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_dictionary_value2262	= { FOLLOW_expr_in_dictionary_value2262_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_dictionary_value2277  */
static	ANTLR3_BITWORD FOLLOW_83_in_dictionary_value2277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_dictionary_value2277	= { FOLLOW_83_in_dictionary_value2277_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_dictionary_value2279  */
static	ANTLR3_BITWORD FOLLOW_131_in_dictionary_value2279_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_dictionary_value2279	= { FOLLOW_131_in_dictionary_value2279_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_dictionary_value2286  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_dictionary_value2286_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_dictionary_value2286	= { FOLLOW_IDENTIFIER_in_dictionary_value2286_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_LITERAL_in_dictionary_value2294  */
static	ANTLR3_BITWORD FOLLOW_STRING_LITERAL_in_dictionary_value2294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_LITERAL_in_dictionary_value2294	= { FOLLOW_STRING_LITERAL_in_dictionary_value2294_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_82_in_dictionary_value2299  */
static	ANTLR3_BITWORD FOLLOW_82_in_dictionary_value2299_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8C00000004500073), ANTLR3_UINT64_LIT(0x0000000000000047) };
static  ANTLR3_BITSET_LIST FOLLOW_82_in_dictionary_value2299	= { FOLLOW_82_in_dictionary_value2299_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expr_in_dictionary_value2301  */
static	ANTLR3_BITWORD FOLLOW_expr_in_dictionary_value2301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000008080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expr_in_dictionary_value2301	= { FOLLOW_expr_in_dictionary_value2301_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_91_in_dictionary_value2330  */
static	ANTLR3_BITWORD FOLLOW_91_in_dictionary_value2330_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_91_in_dictionary_value2330	= { FOLLOW_91_in_dictionary_value2330_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_LITERAL_in_string_literal_rule2341  */
static	ANTLR3_BITWORD FOLLOW_STRING_LITERAL_in_string_literal_rule2341_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_LITERAL_in_string_literal_rule2341	= { FOLLOW_STRING_LITERAL_in_string_literal_rule2341_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_integer_literal_rule0  */
static	ANTLR3_BITWORD FOLLOW_set_in_integer_literal_rule0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_integer_literal_rule0	= { FOLLOW_set_in_integer_literal_rule0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_LITERAL_in_float_literal_rule2500  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_LITERAL_in_float_literal_rule2500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_LITERAL_in_float_literal_rule2500	= { FOLLOW_FLOAT_LITERAL_in_float_literal_rule2500_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_comma_stat_in_synpred1_grunt338  */
static	ANTLR3_BITWORD FOLLOW_comma_stat_in_synpred1_grunt338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_comma_stat_in_synpred1_grunt338	= { FOLLOW_comma_stat_in_synpred1_grunt338_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_77_in_synpred1_grunt340  */
static	ANTLR3_BITWORD FOLLOW_77_in_synpred1_grunt340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_77_in_synpred1_grunt340	= { FOLLOW_77_in_synpred1_grunt340_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_88_in_synpred2_grunt570  */
static	ANTLR3_BITWORD FOLLOW_88_in_synpred2_grunt570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_88_in_synpred2_grunt570	= { FOLLOW_88_in_synpred2_grunt570_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    132:1: stat : ( ( comma_stat ';' )=> comma_stat ';' -> comma_stat | compound_stat | selection_stat | iteration_stat | local_declaration_stat ';' -> local_declaration_stat | ';' -> EMPTY_EXPR | 'break' ';' -> BREAK_STAT | 'continue' ';' -> CONTINUE_STAT | 'return' ( expr )? ';' -> ^( RETURN_STAT ( expr )? ) );
 */
static const ANTLR3_INT32 dfa3_eot[26] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa3_eof[26] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa3_min[26] =
    {
	64, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa3_max[26] =
    {
	134, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa3_accept[26] =
    {
	-1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 3, -1, 4, -1, -1, 5, 6, 
	7, 8, 9, 2
    };
static const ANTLR3_INT32 dfa3_special[26] =
    {	
	0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa3_T_empty	    NULL

static const ANTLR3_INT32 dfa3_T0[] =
    {
	5, 1, -1, -1, 2, 2, 3, -1, -1, -1, -1, -1, -1, 21, 22, 23, 24, 20, -1, 
	-1, 6, 15, 4, -1, -1, 15, 8, -1, -1, -1, -1, 17, 17, 17, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 12, 11, -1, -1, -1, 9, 10, 13, 14, -1, -1, -1, 7
    };static const ANTLR3_INT32 dfa3_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa3_transitions[] =
{
    dfa3_T0, dfa3_T_empty, dfa3_T_empty, dfa3_T_empty, dfa3_T_empty, dfa3_T_empty, 
    dfa3_T_empty, dfa3_T_empty, dfa3_T1, dfa3_T_empty, dfa3_T_empty, dfa3_T_empty, 
    dfa3_T_empty, dfa3_T_empty, dfa3_T_empty, dfa3_T_empty, dfa3_T_empty, 
    dfa3_T_empty, dfa3_T_empty, dfa3_T_empty, dfa3_T_empty, dfa3_T_empty, 
    dfa3_T_empty, dfa3_T_empty, dfa3_T_empty, dfa3_T_empty	
};

static ANTLR3_INT32 dfa3_sst(pgruntParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA3_0;

    	    ANTLR3_MARKER index3_0;


    		LA3_0 = LA(1);

    	 
    	    index3_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA3_0 == STRING_LITERAL) && (synpred1_grunt(ctx)))
    	    {
    	        s = 1;
    	    }

    	    else if ( (((LA3_0 >= DECIMAL_INTEGER_LITERAL) && (LA3_0 <= HEXADECIMAL_INTEGER_LITERAL))) && (synpred1_grunt(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA3_0 == FLOAT_LITERAL) && (synpred1_grunt(ctx)))
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA3_0 == 86) && (synpred1_grunt(ctx)))
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA3_0 == IDENTIFIER) && (synpred1_grunt(ctx)))
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA3_0 == 84) && (synpred1_grunt(ctx)))
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA3_0 == 134) && (synpred1_grunt(ctx)))
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA3_0 == 90) )
    	    {
    	        s = 8;
    	    }

    	    else if ( (LA3_0 == 127) && (synpred1_grunt(ctx)))
    	    {
    	        s = 9;
    	    }

    	    else if ( (LA3_0 == 128) && (synpred1_grunt(ctx)))
    	    {
    	        s = 10;
    	    }

    	    else if ( (LA3_0 == 123) && (synpred1_grunt(ctx)))
    	    {
    	        s = 11;
    	    }

    	    else if ( (LA3_0 == 122) && (synpred1_grunt(ctx)))
    	    {
    	        s = 12;
    	    }

    	    else if ( (LA3_0 == 129) && (synpred1_grunt(ctx)))
    	    {
    	        s = 13;
    	    }

    	    else if ( (LA3_0 == 130) && (synpred1_grunt(ctx)))
    	    {
    	        s = 14;
    	    }

    	    else if ( (LA3_0 == 85 || LA3_0 == 89) )
    	    {
    	        s = 15;
    	    }

    	    else if ( (((LA3_0 >= 95) && (LA3_0 <= 97))) )
    	    {
    	        s = 17;
    	    }

    	    else if ( (LA3_0 == 81) )
    	    {
    	        s = 20;
    	    }

    	    else if ( (LA3_0 == 77) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (LA3_0 == 78) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (LA3_0 == 79) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (LA3_0 == 80) )
    	    {
    	        s = 24;
    	    }

    	 
    		SEEK(index3_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA3_8;

    	    ANTLR3_MARKER index3_8;


    		LA3_8 = LA(1);

    	 
    	    index3_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred1_grunt(ctx)) )
    	    {
    	        s = 14;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 25;
    	    }

    	 
    		SEEK(index3_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"132:1: stat : ( ( comma_stat ';' )=> comma_stat ';' -> comma_stat | compound_stat | selection_stat | iteration_stat | local_declaration_stat ';' -> local_declaration_stat | ';' -> EMPTY_EXPR | 'break' ';' -> BREAK_STAT | 'continue' ';' -> CONTINUE_STAT | 'return' ( expr )? ';' -> ^( RETURN_STAT ( expr )? ) );";
    EXCEPTION->decisionNum  = 3;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 3
 */
static
ANTLR3_CYCLIC_DFA cdfa3
    =	{
	    3,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"132:1: stat : ( ( comma_stat ';' )=> comma_stat ';' -> comma_stat | compound_stat | selection_stat | iteration_stat | local_declaration_stat ';' -> local_declaration_stat | ';' -> EMPTY_EXPR | 'break' ';' -> BREAK_STAT | 'continue' ';' -> CONTINUE_STAT | 'return' ( expr )? ';' -> ^( RETURN_STAT ( expr )? ) );",	
	    (CDFA_SPECIAL_FUNC) dfa3_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa3_eot,	    /* EOT table			    */
	    dfa3_eof,	    /* EOF table			    */
	    dfa3_min,	    /* Minimum tokens for each state    */
	    dfa3_max,	    /* Maximum tokens for each state    */
	    dfa3_accept,	/* Accept table			    */
	    dfa3_special,	/* Special transition states	    */
	    dfa3_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 3
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start prog
 * grunt.g:118:1: prog : ( stat )* ;
 */
static gruntParser_prog_return
prog(pgruntParser ctx)
{   
    gruntParser_prog_return retval;

    pANTLR3_BASE_TREE root_0;

    gruntParser_stat_return stat1;
    #undef	RETURN_TYPE_stat1
    #define	RETURN_TYPE_stat1 gruntParser_stat_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    stat1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // grunt.g:129:2: ( ( stat )* )
        // grunt.g:129:4: ( stat )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // grunt.g:129:4: ( stat )*

            for (;;)
            {
                int alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (((LA1_0 >= IDENTIFIER) && (LA1_0 <= STRING_LITERAL)) || ((LA1_0 >= DECIMAL_INTEGER_LITERAL) && (LA1_0 <= FLOAT_LITERAL)) || ((LA1_0 >= 77) && (LA1_0 <= 81)) || ((LA1_0 >= 84) && (LA1_0 <= 86)) || ((LA1_0 >= 89) && (LA1_0 <= 90)) || ((LA1_0 >= 95) && (LA1_0 <= 97)) || ((LA1_0 >= 122) && (LA1_0 <= 123)) || ((LA1_0 >= 127) && (LA1_0 <= 130)) || LA1_0 == 134) ) 
                    {
                        alt1=1;
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // grunt.g:129:5: stat
            	    {
            	        FOLLOWPUSH(FOLLOW_stat_in_prog324);
            	        stat1=stat(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, stat1.tree);

            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogEx; /* Prevent compiler warnings */
    ruleprogEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }
    else
    {
	if ( BACKTRACKING==0 ) 
	{

	    	ANTLR3_BASE_TREE* tree = retval.tree;
	    	if(tree)
	    	{
	    		ANTLR3_STRING* s = tree->toStringTree(tree);
	    		_putws(wstring((const wchar_t*)s->chars, s->len).c_str());
	    	}

	}
    }

    return retval;
}
/* $ANTLR end prog */

/** 
 * $ANTLR start stat
 * grunt.g:132:1: stat : ( ( comma_stat ';' )=> comma_stat ';' -> comma_stat | compound_stat | selection_stat | iteration_stat | local_declaration_stat ';' -> local_declaration_stat | ';' -> EMPTY_EXPR | 'break' ';' -> BREAK_STAT | 'continue' ';' -> CONTINUE_STAT | 'return' ( expr )? ';' -> ^( RETURN_STAT ( expr )? ) );
 */
static gruntParser_stat_return
stat(pgruntParser ctx)
{   
    gruntParser_stat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal3;
    pANTLR3_COMMON_TOKEN    char_literal8;
    pANTLR3_COMMON_TOKEN    char_literal9;
    pANTLR3_COMMON_TOKEN    string_literal10;
    pANTLR3_COMMON_TOKEN    char_literal11;
    pANTLR3_COMMON_TOKEN    string_literal12;
    pANTLR3_COMMON_TOKEN    char_literal13;
    pANTLR3_COMMON_TOKEN    string_literal14;
    pANTLR3_COMMON_TOKEN    char_literal16;
    gruntParser_comma_stat_return comma_stat2;
    #undef	RETURN_TYPE_comma_stat2
    #define	RETURN_TYPE_comma_stat2 gruntParser_comma_stat_return

    gruntParser_compound_stat_return compound_stat4;
    #undef	RETURN_TYPE_compound_stat4
    #define	RETURN_TYPE_compound_stat4 gruntParser_compound_stat_return

    gruntParser_selection_stat_return selection_stat5;
    #undef	RETURN_TYPE_selection_stat5
    #define	RETURN_TYPE_selection_stat5 gruntParser_selection_stat_return

    gruntParser_iteration_stat_return iteration_stat6;
    #undef	RETURN_TYPE_iteration_stat6
    #define	RETURN_TYPE_iteration_stat6 gruntParser_iteration_stat_return

    gruntParser_local_declaration_stat_return local_declaration_stat7;
    #undef	RETURN_TYPE_local_declaration_stat7
    #define	RETURN_TYPE_local_declaration_stat7 gruntParser_local_declaration_stat_return

    gruntParser_expr_return expr15;
    #undef	RETURN_TYPE_expr15
    #define	RETURN_TYPE_expr15 gruntParser_expr_return

    pANTLR3_BASE_TREE char_literal3_tree;
    pANTLR3_BASE_TREE char_literal8_tree;
    pANTLR3_BASE_TREE char_literal9_tree;
    pANTLR3_BASE_TREE string_literal10_tree;
    pANTLR3_BASE_TREE char_literal11_tree;
    pANTLR3_BASE_TREE string_literal12_tree;
    pANTLR3_BASE_TREE char_literal13_tree;
    pANTLR3_BASE_TREE string_literal14_tree;
    pANTLR3_BASE_TREE char_literal16_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_79;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_78;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_80;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_comma_stat;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_local_declaration_stat;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal3       = NULL;
    char_literal8       = NULL;
    char_literal9       = NULL;
    string_literal10       = NULL;
    char_literal11       = NULL;
    string_literal12       = NULL;
    char_literal13       = NULL;
    string_literal14       = NULL;
    char_literal16       = NULL;
    comma_stat2.tree = NULL;

    compound_stat4.tree = NULL;

    selection_stat5.tree = NULL;

    iteration_stat6.tree = NULL;

    local_declaration_stat7.tree = NULL;

    expr15.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal3_tree   = NULL;
    char_literal8_tree   = NULL;
    char_literal9_tree   = NULL;
    string_literal10_tree   = NULL;
    char_literal11_tree   = NULL;
    string_literal12_tree   = NULL;
    char_literal13_tree   = NULL;
    string_literal14_tree   = NULL;
    char_literal16_tree   = NULL;

    stream_79   = NULL;
    #define CREATE_stream_79  if (stream_79 == NULL) {stream_79 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 79"); } 
    stream_78   = NULL;
    #define CREATE_stream_78  if (stream_78 == NULL) {stream_78 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 78"); } 
    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_80   = NULL;
    #define CREATE_stream_80  if (stream_80 == NULL) {stream_80 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 80"); } 
    stream_comma_stat   = NULL;
    #define CREATE_stream_comma_stat  if (stream_comma_stat == NULL) {stream_comma_stat = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule comma_stat"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_local_declaration_stat   = NULL;
    #define CREATE_stream_local_declaration_stat  if (stream_local_declaration_stat == NULL) {stream_local_declaration_stat = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule local_declaration_stat"); }

    retval.tree  = NULL;
    {
        {
            //  grunt.g:133:2: ( ( comma_stat ';' )=> comma_stat ';' -> comma_stat | compound_stat | selection_stat | iteration_stat | local_declaration_stat ';' -> local_declaration_stat | ';' -> EMPTY_EXPR | 'break' ';' -> BREAK_STAT | 'continue' ';' -> CONTINUE_STAT | 'return' ( expr )? ';' -> ^( RETURN_STAT ( expr )? ) )
            
            ANTLR3_UINT32 alt3;

            alt3=9;

            alt3 = cdfa3.predict(ctx, RECOGNIZER, ISTREAM, &cdfa3);
            if  (HASEXCEPTION())
            {
                goto rulestatEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt3) 
            {
        	case 1:
        	    // grunt.g:133:4: ( comma_stat ';' )=> comma_stat ';'
        	    {
        	        FOLLOWPUSH(FOLLOW_comma_stat_in_stat345);
        	        comma_stat2=comma_stat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_comma_stat; stream_comma_stat->add(stream_comma_stat, comma_stat2.tree, NULL); }
        	        char_literal3 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_stat347); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal3, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : comma_stat
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 133:39: -> comma_stat
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_comma_stat == NULL ? NULL : stream_comma_stat->nextTree(stream_comma_stat));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // grunt.g:134:4: compound_stat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_compound_stat_in_stat356);
        	        compound_stat4=compound_stat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, compound_stat4.tree);

        	    }
        	    break;
        	case 3:
        	    // grunt.g:135:4: selection_stat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_selection_stat_in_stat361);
        	        selection_stat5=selection_stat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, selection_stat5.tree);

        	    }
        	    break;
        	case 4:
        	    // grunt.g:136:4: iteration_stat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_iteration_stat_in_stat366);
        	        iteration_stat6=iteration_stat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, iteration_stat6.tree);

        	    }
        	    break;
        	case 5:
        	    // grunt.g:137:4: local_declaration_stat ';'
        	    {
        	        FOLLOWPUSH(FOLLOW_local_declaration_stat_in_stat371);
        	        local_declaration_stat7=local_declaration_stat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_local_declaration_stat; stream_local_declaration_stat->add(stream_local_declaration_stat, local_declaration_stat7.tree, NULL); }
        	        char_literal8 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_stat373); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal8, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : local_declaration_stat
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 137:32: -> local_declaration_stat
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_local_declaration_stat == NULL ? NULL : stream_local_declaration_stat->nextTree(stream_local_declaration_stat));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // grunt.g:138:4: ';'
        	    {
        	        char_literal9 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_stat383); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal9, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 138:12: -> EMPTY_EXPR
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EMPTY_EXPR, (pANTLR3_UINT8)"EMPTY_EXPR"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // grunt.g:139:4: 'break' ';'
        	    {
        	        string_literal10 = (pANTLR3_COMMON_TOKEN) MATCHT(78, &FOLLOW_78_in_stat396); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_78; stream_78->add(stream_78, string_literal10, NULL); }

        	        char_literal11 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_stat398); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal11, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 139:19: -> BREAK_STAT
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BREAK_STAT, (pANTLR3_UINT8)"BREAK_STAT"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // grunt.g:140:4: 'continue' ';'
        	    {
        	        string_literal12 = (pANTLR3_COMMON_TOKEN) MATCHT(79, &FOLLOW_79_in_stat410); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_79; stream_79->add(stream_79, string_literal12, NULL); }

        	        char_literal13 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_stat412); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal13, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 140:22: -> CONTINUE_STAT
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTINUE_STAT, (pANTLR3_UINT8)"CONTINUE_STAT"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // grunt.g:141:4: 'return' ( expr )? ';'
        	    {
        	        string_literal14 = (pANTLR3_COMMON_TOKEN) MATCHT(80, &FOLLOW_80_in_stat424); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_80; stream_80->add(stream_80, string_literal14, NULL); }


        	        // grunt.g:141:13: ( expr )?
        	        {
        	            int alt2=2;
        	            {
        	                int LA2_0 = LA(1);
        	                if ( (((LA2_0 >= IDENTIFIER) && (LA2_0 <= STRING_LITERAL)) || ((LA2_0 >= DECIMAL_INTEGER_LITERAL) && (LA2_0 <= FLOAT_LITERAL)) || LA2_0 == 84 || LA2_0 == 86 || LA2_0 == 90 || ((LA2_0 >= 122) && (LA2_0 <= 123)) || ((LA2_0 >= 127) && (LA2_0 <= 130)) || LA2_0 == 134) ) 
        	                {
        	                    alt2=1;
        	                }
        	            }
        	            switch (alt2) 
        	            {
        	        	case 1:
        	        	    // grunt.g:141:13: expr
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expr_in_stat426);
        	        	        expr15=expr(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr15.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }
        	        char_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_stat429); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal16, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 141:25: -> ^( RETURN_STAT ( expr )? )
        	        	{
        	        	    // grunt.g:141:28: ^( RETURN_STAT ( expr )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RETURN_STAT, (pANTLR3_UINT8)"RETURN_STAT"), root_1));

        	        	        // grunt.g:141:42: ( expr )?
        	        	        {
        	        	        	if ( (stream_expr != NULL && stream_expr->hasNext(stream_expr))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	        	}
        	        	        	if ( stream_expr != NULL) stream_expr->reset(stream_expr);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatEx; /* Prevent compiler warnings */
    rulestatEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_79 != NULL) stream_79->free(stream_79);
        if (stream_78 != NULL) stream_78->free(stream_78);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_80 != NULL) stream_80->free(stream_80);
        if (stream_comma_stat != NULL) stream_comma_stat->free(stream_comma_stat);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_local_declaration_stat != NULL) stream_local_declaration_stat->free(stream_local_declaration_stat);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end stat */

/** 
 * $ANTLR start local_declaration_stat
 * grunt.g:144:1: local_declaration_stat : 'local' ( IDENTIFIER ( '=' expr )? -> ^( LOCAL_DECLARATION_STAT IDENTIFIER expr ) ) ( ',' IDENTIFIER ( '=' expr )? -> $local_declaration_stat ^( LOCAL_DECLARATION_STAT IDENTIFIER expr ) )* ;
 */
static gruntParser_local_declaration_stat_return
local_declaration_stat(pgruntParser ctx)
{   
    gruntParser_local_declaration_stat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal17;
    pANTLR3_COMMON_TOKEN    IDENTIFIER18;
    pANTLR3_COMMON_TOKEN    char_literal19;
    pANTLR3_COMMON_TOKEN    char_literal21;
    pANTLR3_COMMON_TOKEN    IDENTIFIER22;
    pANTLR3_COMMON_TOKEN    char_literal23;
    gruntParser_expr_return expr20;
    #undef	RETURN_TYPE_expr20
    #define	RETURN_TYPE_expr20 gruntParser_expr_return

    gruntParser_expr_return expr24;
    #undef	RETURN_TYPE_expr24
    #define	RETURN_TYPE_expr24 gruntParser_expr_return

    pANTLR3_BASE_TREE string_literal17_tree;
    pANTLR3_BASE_TREE IDENTIFIER18_tree;
    pANTLR3_BASE_TREE char_literal19_tree;
    pANTLR3_BASE_TREE char_literal21_tree;
    pANTLR3_BASE_TREE IDENTIFIER22_tree;
    pANTLR3_BASE_TREE char_literal23_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_82;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_83;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_81;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal17       = NULL;
    IDENTIFIER18       = NULL;
    char_literal19       = NULL;
    char_literal21       = NULL;
    IDENTIFIER22       = NULL;
    char_literal23       = NULL;
    expr20.tree = NULL;

    expr24.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal17_tree   = NULL;
    IDENTIFIER18_tree   = NULL;
    char_literal19_tree   = NULL;
    char_literal21_tree   = NULL;
    IDENTIFIER22_tree   = NULL;
    char_literal23_tree   = NULL;

    stream_82   = NULL;
    #define CREATE_stream_82  if (stream_82 == NULL) {stream_82 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 82"); } 
    stream_83   = NULL;
    #define CREATE_stream_83  if (stream_83 == NULL) {stream_83 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 83"); } 
    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 
    stream_81   = NULL;
    #define CREATE_stream_81  if (stream_81 == NULL) {stream_81 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 81"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:145:2: ( 'local' ( IDENTIFIER ( '=' expr )? -> ^( LOCAL_DECLARATION_STAT IDENTIFIER expr ) ) ( ',' IDENTIFIER ( '=' expr )? -> $local_declaration_stat ^( LOCAL_DECLARATION_STAT IDENTIFIER expr ) )* )
        // grunt.g:145:4: 'local' ( IDENTIFIER ( '=' expr )? -> ^( LOCAL_DECLARATION_STAT IDENTIFIER expr ) ) ( ',' IDENTIFIER ( '=' expr )? -> $local_declaration_stat ^( LOCAL_DECLARATION_STAT IDENTIFIER expr ) )*
        {
            string_literal17 = (pANTLR3_COMMON_TOKEN) MATCHT(81, &FOLLOW_81_in_local_declaration_stat451); 
            if  (HASEXCEPTION())
            {
                goto rulelocal_declaration_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_81; stream_81->add(stream_81, string_literal17, NULL); }

            // grunt.g:145:12: ( IDENTIFIER ( '=' expr )? -> ^( LOCAL_DECLARATION_STAT IDENTIFIER expr ) )
            // grunt.g:145:13: IDENTIFIER ( '=' expr )?
            {
                IDENTIFIER18 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_local_declaration_stat454); 
                if  (HASEXCEPTION())
                {
                    goto rulelocal_declaration_statEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, IDENTIFIER18, NULL); }


                // grunt.g:145:24: ( '=' expr )?
                {
                    int alt4=2;
                    {
                        int LA4_0 = LA(1);
                        if ( (LA4_0 == 82) ) 
                        {
                            alt4=1;
                        }
                    }
                    switch (alt4) 
                    {
                	case 1:
                	    // grunt.g:145:25: '=' expr
                	    {
                	        char_literal19 = (pANTLR3_COMMON_TOKEN) MATCHT(82, &FOLLOW_82_in_local_declaration_stat457); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulelocal_declaration_statEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_82; stream_82->add(stream_82, char_literal19, NULL); }

                	        FOLLOWPUSH(FOLLOW_expr_in_local_declaration_stat459);
                	        expr20=expr(ctx);

                	        FOLLOWPOP();
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulelocal_declaration_statEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        }
                	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr20.tree, NULL); }

                	    }
                	    break;

                    }
                }

                 
                /* AST REWRITE
                 * elements          : IDENTIFIER, expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 145:36: -> ^( LOCAL_DECLARATION_STAT IDENTIFIER expr )
                	{
                	    // grunt.g:145:39: ^( LOCAL_DECLARATION_STAT IDENTIFIER expr )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LOCAL_DECLARATION_STAT, (pANTLR3_UINT8)"LOCAL_DECLARATION_STAT"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENTIFIER == NULL ? NULL : stream_IDENTIFIER->nextNode(stream_IDENTIFIER));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:145:82: ( ',' IDENTIFIER ( '=' expr )? -> $local_declaration_stat ^( LOCAL_DECLARATION_STAT IDENTIFIER expr ) )*

            for (;;)
            {
                int alt6=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == 83) ) 
                    {
                        alt6=1;
                    }

                }
                switch (alt6) 
                {
            	case 1:
            	    // grunt.g:145:83: ',' IDENTIFIER ( '=' expr )?
            	    {
            	        char_literal21 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_local_declaration_stat475); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelocal_declaration_statEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_83; stream_83->add(stream_83, char_literal21, NULL); }

            	        IDENTIFIER22 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_local_declaration_stat477); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelocal_declaration_statEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, IDENTIFIER22, NULL); }


            	        // grunt.g:145:98: ( '=' expr )?
            	        {
            	            int alt5=2;
            	            {
            	                int LA5_0 = LA(1);
            	                if ( (LA5_0 == 82) ) 
            	                {
            	                    alt5=1;
            	                }
            	            }
            	            switch (alt5) 
            	            {
            	        	case 1:
            	        	    // grunt.g:145:99: '=' expr
            	        	    {
            	        	        char_literal23 = (pANTLR3_COMMON_TOKEN) MATCHT(82, &FOLLOW_82_in_local_declaration_stat480); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelocal_declaration_statEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_82; stream_82->add(stream_82, char_literal23, NULL); }

            	        	        FOLLOWPUSH(FOLLOW_expr_in_local_declaration_stat482);
            	        	        expr24=expr(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelocal_declaration_statEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr24.tree, NULL); }

            	        	    }
            	        	    break;

            	            }
            	        }

            	         
            	        /* AST REWRITE
            	         * elements          : local_declaration_stat, expr, IDENTIFIER
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 145:110: -> $local_declaration_stat ^( LOCAL_DECLARATION_STAT IDENTIFIER expr )
            	        	{
            	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	    // grunt.g:145:137: ^( LOCAL_DECLARATION_STAT IDENTIFIER expr )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LOCAL_DECLARATION_STAT, (pANTLR3_UINT8)"LOCAL_DECLARATION_STAT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENTIFIER == NULL ? NULL : stream_IDENTIFIER->nextNode(stream_IDENTIFIER));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelocal_declaration_statEx; /* Prevent compiler warnings */
    rulelocal_declaration_statEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_82 != NULL) stream_82->free(stream_82);
        if (stream_83 != NULL) stream_83->free(stream_83);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);
        if (stream_81 != NULL) stream_81->free(stream_81);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end local_declaration_stat */

/** 
 * $ANTLR start function_definition
 * grunt.g:148:1: function_definition : 'function' parameter_list compound_stat -> ^( FUNC_DEF parameter_list compound_stat ) ;
 */
static gruntParser_function_definition_return
function_definition(pgruntParser ctx)
{   
    gruntParser_function_definition_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal25;
    gruntParser_parameter_list_return parameter_list26;
    #undef	RETURN_TYPE_parameter_list26
    #define	RETURN_TYPE_parameter_list26 gruntParser_parameter_list_return

    gruntParser_compound_stat_return compound_stat27;
    #undef	RETURN_TYPE_compound_stat27
    #define	RETURN_TYPE_compound_stat27 gruntParser_compound_stat_return

    pANTLR3_BASE_TREE string_literal25_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_84;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_compound_stat;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_parameter_list;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal25       = NULL;
    parameter_list26.tree = NULL;

    compound_stat27.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal25_tree   = NULL;

    stream_84   = NULL;
    #define CREATE_stream_84  if (stream_84 == NULL) {stream_84 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 84"); } 
    stream_compound_stat   = NULL;
    #define CREATE_stream_compound_stat  if (stream_compound_stat == NULL) {stream_compound_stat = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule compound_stat"); }
    stream_parameter_list   = NULL;
    #define CREATE_stream_parameter_list  if (stream_parameter_list == NULL) {stream_parameter_list = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule parameter_list"); }

    retval.tree  = NULL;
    {
        // grunt.g:149:2: ( 'function' parameter_list compound_stat -> ^( FUNC_DEF parameter_list compound_stat ) )
        // grunt.g:149:4: 'function' parameter_list compound_stat
        {
            string_literal25 = (pANTLR3_COMMON_TOKEN) MATCHT(84, &FOLLOW_84_in_function_definition510); 
            if  (HASEXCEPTION())
            {
                goto rulefunction_definitionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_84; stream_84->add(stream_84, string_literal25, NULL); }

            FOLLOWPUSH(FOLLOW_parameter_list_in_function_definition512);
            parameter_list26=parameter_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunction_definitionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_parameter_list; stream_parameter_list->add(stream_parameter_list, parameter_list26.tree, NULL); }
            FOLLOWPUSH(FOLLOW_compound_stat_in_function_definition514);
            compound_stat27=compound_stat(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunction_definitionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_compound_stat; stream_compound_stat->add(stream_compound_stat, compound_stat27.tree, NULL); }

             
            /* AST REWRITE
             * elements          : parameter_list, compound_stat
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 150:3: -> ^( FUNC_DEF parameter_list compound_stat )
            	{
            	    // grunt.g:150:6: ^( FUNC_DEF parameter_list compound_stat )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_DEF, (pANTLR3_UINT8)"FUNC_DEF"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_parameter_list == NULL ? NULL : stream_parameter_list->nextTree(stream_parameter_list));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_compound_stat == NULL ? NULL : stream_compound_stat->nextTree(stream_compound_stat));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunction_definitionEx; /* Prevent compiler warnings */
    rulefunction_definitionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_84 != NULL) stream_84->free(stream_84);
        if (stream_compound_stat != NULL) stream_compound_stat->free(stream_compound_stat);
        if (stream_parameter_list != NULL) stream_parameter_list->free(stream_parameter_list);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end function_definition */

/** 
 * $ANTLR start selection_stat
 * grunt.g:153:1: selection_stat : ( if_stat | switch_stat );
 */
static gruntParser_selection_stat_return
selection_stat(pgruntParser ctx)
{   
    gruntParser_selection_stat_return retval;

    pANTLR3_BASE_TREE root_0;

    gruntParser_if_stat_return if_stat28;
    #undef	RETURN_TYPE_if_stat28
    #define	RETURN_TYPE_if_stat28 gruntParser_if_stat_return

    gruntParser_switch_stat_return switch_stat29;
    #undef	RETURN_TYPE_switch_stat29
    #define	RETURN_TYPE_switch_stat29 gruntParser_switch_stat_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    if_stat28.tree = NULL;

    switch_stat29.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  grunt.g:154:2: ( if_stat | switch_stat )
            
            ANTLR3_UINT32 alt7;

            alt7=2;


            {
                int LA7_0 = LA(1);
                if ( (LA7_0 == 85) ) 
                {
                    alt7=1;
                }
                else if ( (LA7_0 == 89) ) 
                {
                    alt7=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 7;
                    EXCEPTION->state        = 0;


                    goto ruleselection_statEx;
                }
            }
            switch (alt7) 
            {
        	case 1:
        	    // grunt.g:154:4: if_stat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_if_stat_in_selection_stat537);
        	        if_stat28=if_stat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselection_statEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, if_stat28.tree);

        	    }
        	    break;
        	case 2:
        	    // grunt.g:155:4: switch_stat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_switch_stat_in_selection_stat542);
        	        switch_stat29=switch_stat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselection_statEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switch_stat29.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleselection_statEx; /* Prevent compiler warnings */
    ruleselection_statEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end selection_stat */

/** 
 * $ANTLR start if_stat
 * grunt.g:158:1: if_stat : 'if' '(' expr ')' s1= stat ( ( ( 'else' )=> 'else' s2= stat ) | ) -> ^( IF_STAT expr $s1 $s2) ;
 */
static gruntParser_if_stat_return
if_stat(pgruntParser ctx)
{   
    gruntParser_if_stat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal30;
    pANTLR3_COMMON_TOKEN    char_literal31;
    pANTLR3_COMMON_TOKEN    char_literal33;
    pANTLR3_COMMON_TOKEN    string_literal34;
    gruntParser_stat_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 gruntParser_stat_return

    gruntParser_stat_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 gruntParser_stat_return

    gruntParser_expr_return expr32;
    #undef	RETURN_TYPE_expr32
    #define	RETURN_TYPE_expr32 gruntParser_expr_return

    pANTLR3_BASE_TREE string_literal30_tree;
    pANTLR3_BASE_TREE char_literal31_tree;
    pANTLR3_BASE_TREE char_literal33_tree;
    pANTLR3_BASE_TREE string_literal34_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_86;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_87;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_88;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_85;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stat;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal30       = NULL;
    char_literal31       = NULL;
    char_literal33       = NULL;
    string_literal34       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    expr32.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal30_tree   = NULL;
    char_literal31_tree   = NULL;
    char_literal33_tree   = NULL;
    string_literal34_tree   = NULL;

    stream_86   = NULL;
    #define CREATE_stream_86  if (stream_86 == NULL) {stream_86 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 86"); } 
    stream_87   = NULL;
    #define CREATE_stream_87  if (stream_87 == NULL) {stream_87 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 87"); } 
    stream_88   = NULL;
    #define CREATE_stream_88  if (stream_88 == NULL) {stream_88 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 88"); } 
    stream_85   = NULL;
    #define CREATE_stream_85  if (stream_85 == NULL) {stream_85 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 85"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_stat   = NULL;
    #define CREATE_stream_stat  if (stream_stat == NULL) {stream_stat = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stat"); }

    retval.tree  = NULL;
    {
        // grunt.g:159:2: ( 'if' '(' expr ')' s1= stat ( ( ( 'else' )=> 'else' s2= stat ) | ) -> ^( IF_STAT expr $s1 $s2) )
        // grunt.g:159:4: 'if' '(' expr ')' s1= stat ( ( ( 'else' )=> 'else' s2= stat ) | )
        {
            string_literal30 = (pANTLR3_COMMON_TOKEN) MATCHT(85, &FOLLOW_85_in_if_stat553); 
            if  (HASEXCEPTION())
            {
                goto ruleif_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_85; stream_85->add(stream_85, string_literal30, NULL); }

            char_literal31 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_if_stat555); 
            if  (HASEXCEPTION())
            {
                goto ruleif_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_86; stream_86->add(stream_86, char_literal31, NULL); }

            FOLLOWPUSH(FOLLOW_expr_in_if_stat557);
            expr32=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleif_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr32.tree, NULL); }
            char_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_if_stat559); 
            if  (HASEXCEPTION())
            {
                goto ruleif_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_87; stream_87->add(stream_87, char_literal33, NULL); }

            FOLLOWPUSH(FOLLOW_stat_in_if_stat565);
            s1=stat(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleif_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_stat; stream_stat->add(stream_stat, s1.tree, NULL); }

            // grunt.g:159:32: ( ( ( 'else' )=> 'else' s2= stat ) | )
            {
                int alt8=2;

                {
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == 88) ) 
                    {

                        {
                            int LA8_1 = LA(2);
                            if ( (synpred2_grunt(ctx)) ) 
                            {
                                alt8=1;
                            }
                            else if ( (ANTLR3_TRUE) ) 
                            {
                                alt8=2;
                            }
                            else 
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE; 
                                    return retval;
                                }
                            
                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                EXCEPTION->message      = (void *)"";
                                EXCEPTION->decisionNum  = 8;
                                EXCEPTION->state        = 1;


                                goto ruleif_statEx;
                            }
                        }
                    }
                    else if ( (LA8_0 == EOF || ((LA8_0 >= IDENTIFIER) && (LA8_0 <= STRING_LITERAL)) || ((LA8_0 >= DECIMAL_INTEGER_LITERAL) && (LA8_0 <= FLOAT_LITERAL)) || ((LA8_0 >= 77) && (LA8_0 <= 81)) || ((LA8_0 >= 84) && (LA8_0 <= 86)) || ((LA8_0 >= 89) && (LA8_0 <= 92)) || ((LA8_0 >= 94) && (LA8_0 <= 97)) || ((LA8_0 >= 122) && (LA8_0 <= 123)) || ((LA8_0 >= 127) && (LA8_0 <= 130)) || LA8_0 == 134) ) 
                    {
                        alt8=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 8;
                        EXCEPTION->state        = 0;


                        goto ruleif_statEx;
                    }
                }
                switch (alt8) 
                {
            	case 1:
            	    // grunt.g:159:33: ( ( 'else' )=> 'else' s2= stat )
            	    {
            	        // grunt.g:159:33: ( ( 'else' )=> 'else' s2= stat )
            	        // grunt.g:159:34: ( 'else' )=> 'else' s2= stat
            	        {
            	            string_literal34 = (pANTLR3_COMMON_TOKEN) MATCHT(88, &FOLLOW_88_in_if_stat575); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleif_statEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_88; stream_88->add(stream_88, string_literal34, NULL); }

            	            FOLLOWPUSH(FOLLOW_stat_in_if_stat581);
            	            s2=stat(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleif_statEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_stat; stream_stat->add(stream_stat, s2.tree, NULL); }

            	        }


            	    }
            	    break;
            	case 2:
            	    // grunt.g:159:66: 
            	    {
            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : s1, s2, expr
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 160:3: -> ^( IF_STAT expr $s1 $s2)
            	{
            	    // grunt.g:160:6: ^( IF_STAT expr $s1 $s2)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IF_STAT, (pANTLR3_UINT8)"IF_STAT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleif_statEx; /* Prevent compiler warnings */
    ruleif_statEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_86 != NULL) stream_86->free(stream_86);
        if (stream_87 != NULL) stream_87->free(stream_87);
        if (stream_88 != NULL) stream_88->free(stream_88);
        if (stream_85 != NULL) stream_85->free(stream_85);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_stat != NULL) stream_stat->free(stream_stat);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end if_stat */

/** 
 * $ANTLR start switch_stat
 * grunt.g:163:1: switch_stat : 'switch' '(' ( expr -> expr ) ')' '{' ( ( switch_case_label -> $switch_stat switch_case_label ) | ( stat -> $switch_stat stat ) )* '}' -> ^( SWITCH_STAT $switch_stat) ;
 */
static gruntParser_switch_stat_return
switch_stat(pgruntParser ctx)
{   
    gruntParser_switch_stat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal35;
    pANTLR3_COMMON_TOKEN    char_literal36;
    pANTLR3_COMMON_TOKEN    char_literal38;
    pANTLR3_COMMON_TOKEN    char_literal39;
    pANTLR3_COMMON_TOKEN    char_literal42;
    gruntParser_expr_return expr37;
    #undef	RETURN_TYPE_expr37
    #define	RETURN_TYPE_expr37 gruntParser_expr_return

    gruntParser_switch_case_label_return switch_case_label40;
    #undef	RETURN_TYPE_switch_case_label40
    #define	RETURN_TYPE_switch_case_label40 gruntParser_switch_case_label_return

    gruntParser_stat_return stat41;
    #undef	RETURN_TYPE_stat41
    #define	RETURN_TYPE_stat41 gruntParser_stat_return

    pANTLR3_BASE_TREE string_literal35_tree;
    pANTLR3_BASE_TREE char_literal36_tree;
    pANTLR3_BASE_TREE char_literal38_tree;
    pANTLR3_BASE_TREE char_literal39_tree;
    pANTLR3_BASE_TREE char_literal42_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_91;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_90;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_86;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_87;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_89;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_switch_case_label;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stat;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal35       = NULL;
    char_literal36       = NULL;
    char_literal38       = NULL;
    char_literal39       = NULL;
    char_literal42       = NULL;
    expr37.tree = NULL;

    switch_case_label40.tree = NULL;

    stat41.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal35_tree   = NULL;
    char_literal36_tree   = NULL;
    char_literal38_tree   = NULL;
    char_literal39_tree   = NULL;
    char_literal42_tree   = NULL;

    stream_91   = NULL;
    #define CREATE_stream_91  if (stream_91 == NULL) {stream_91 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 91"); } 
    stream_90   = NULL;
    #define CREATE_stream_90  if (stream_90 == NULL) {stream_90 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 90"); } 
    stream_86   = NULL;
    #define CREATE_stream_86  if (stream_86 == NULL) {stream_86 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 86"); } 
    stream_87   = NULL;
    #define CREATE_stream_87  if (stream_87 == NULL) {stream_87 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 87"); } 
    stream_89   = NULL;
    #define CREATE_stream_89  if (stream_89 == NULL) {stream_89 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 89"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_switch_case_label   = NULL;
    #define CREATE_stream_switch_case_label  if (stream_switch_case_label == NULL) {stream_switch_case_label = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule switch_case_label"); }
    stream_stat   = NULL;
    #define CREATE_stream_stat  if (stream_stat == NULL) {stream_stat = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stat"); }

    retval.tree  = NULL;
    {
        // grunt.g:164:2: ( 'switch' '(' ( expr -> expr ) ')' '{' ( ( switch_case_label -> $switch_stat switch_case_label ) | ( stat -> $switch_stat stat ) )* '}' -> ^( SWITCH_STAT $switch_stat) )
        // grunt.g:164:4: 'switch' '(' ( expr -> expr ) ')' '{' ( ( switch_case_label -> $switch_stat switch_case_label ) | ( stat -> $switch_stat stat ) )* '}'
        {
            string_literal35 = (pANTLR3_COMMON_TOKEN) MATCHT(89, &FOLLOW_89_in_switch_stat613); 
            if  (HASEXCEPTION())
            {
                goto ruleswitch_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_89; stream_89->add(stream_89, string_literal35, NULL); }

            char_literal36 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_switch_stat615); 
            if  (HASEXCEPTION())
            {
                goto ruleswitch_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_86; stream_86->add(stream_86, char_literal36, NULL); }

            // grunt.g:164:17: ( expr -> expr )
            // grunt.g:164:18: expr
            {
                FOLLOWPUSH(FOLLOW_expr_in_switch_stat618);
                expr37=expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleswitch_statEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr37.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 164:23: -> expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }

            char_literal38 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_switch_stat625); 
            if  (HASEXCEPTION())
            {
                goto ruleswitch_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_87; stream_87->add(stream_87, char_literal38, NULL); }

            char_literal39 = (pANTLR3_COMMON_TOKEN) MATCHT(90, &FOLLOW_90_in_switch_stat627); 
            if  (HASEXCEPTION())
            {
                goto ruleswitch_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_90; stream_90->add(stream_90, char_literal39, NULL); }


            // grunt.g:164:40: ( ( switch_case_label -> $switch_stat switch_case_label ) | ( stat -> $switch_stat stat ) )*

            for (;;)
            {
                int alt9=3;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == 92 || LA9_0 == 94) ) 
                    {
                        alt9=1;
                    }
                    else if ( (((LA9_0 >= IDENTIFIER) && (LA9_0 <= STRING_LITERAL)) || ((LA9_0 >= DECIMAL_INTEGER_LITERAL) && (LA9_0 <= FLOAT_LITERAL)) || ((LA9_0 >= 77) && (LA9_0 <= 81)) || ((LA9_0 >= 84) && (LA9_0 <= 86)) || ((LA9_0 >= 89) && (LA9_0 <= 90)) || ((LA9_0 >= 95) && (LA9_0 <= 97)) || ((LA9_0 >= 122) && (LA9_0 <= 123)) || ((LA9_0 >= 127) && (LA9_0 <= 130)) || LA9_0 == 134) ) 
                    {
                        alt9=2;
                    }

                }
                switch (alt9) 
                {
            	case 1:
            	    // grunt.g:164:41: ( switch_case_label -> $switch_stat switch_case_label )
            	    {
            	        // grunt.g:164:41: ( switch_case_label -> $switch_stat switch_case_label )
            	        // grunt.g:164:42: switch_case_label
            	        {
            	            FOLLOWPUSH(FOLLOW_switch_case_label_in_switch_stat631);
            	            switch_case_label40=switch_case_label(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleswitch_statEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_switch_case_label; stream_switch_case_label->add(stream_switch_case_label, switch_case_label40.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : switch_stat, switch_case_label
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 164:60: -> $switch_stat switch_case_label
            	            	{
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_switch_case_label == NULL ? NULL : stream_switch_case_label->nextTree(stream_switch_case_label));

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 2:
            	    // grunt.g:164:97: ( stat -> $switch_stat stat )
            	    {
            	        // grunt.g:164:97: ( stat -> $switch_stat stat )
            	        // grunt.g:164:98: stat
            	        {
            	            FOLLOWPUSH(FOLLOW_stat_in_switch_stat644);
            	            stat41=stat(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleswitch_statEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_stat; stream_stat->add(stream_stat, stat41.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : switch_stat, stat
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 164:103: -> $switch_stat stat
            	            	{
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_stat == NULL ? NULL : stream_stat->nextTree(stream_stat));

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */

            char_literal42 = (pANTLR3_COMMON_TOKEN) MATCHT(91, &FOLLOW_91_in_switch_stat656); 
            if  (HASEXCEPTION())
            {
                goto ruleswitch_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_91; stream_91->add(stream_91, char_literal42, NULL); }


             
            /* AST REWRITE
             * elements          : switch_stat
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 164:131: -> ^( SWITCH_STAT $switch_stat)
            	{
            	    // grunt.g:164:134: ^( SWITCH_STAT $switch_stat)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SWITCH_STAT, (pANTLR3_UINT8)"SWITCH_STAT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitch_statEx; /* Prevent compiler warnings */
    ruleswitch_statEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_91 != NULL) stream_91->free(stream_91);
        if (stream_90 != NULL) stream_90->free(stream_90);
        if (stream_86 != NULL) stream_86->free(stream_86);
        if (stream_87 != NULL) stream_87->free(stream_87);
        if (stream_89 != NULL) stream_89->free(stream_89);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_switch_case_label != NULL) stream_switch_case_label->free(stream_switch_case_label);
        if (stream_stat != NULL) stream_stat->free(stream_stat);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end switch_stat */

/** 
 * $ANTLR start switch_case_label
 * grunt.g:167:1: switch_case_label : ( 'case' expr ':' -> ^( SWITCH_CASE_LABEL expr ) | 'default' ':' -> SWITCH_CASE_LABEL );
 */
static gruntParser_switch_case_label_return
switch_case_label(pgruntParser ctx)
{   
    gruntParser_switch_case_label_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal43;
    pANTLR3_COMMON_TOKEN    char_literal45;
    pANTLR3_COMMON_TOKEN    string_literal46;
    pANTLR3_COMMON_TOKEN    char_literal47;
    gruntParser_expr_return expr44;
    #undef	RETURN_TYPE_expr44
    #define	RETURN_TYPE_expr44 gruntParser_expr_return

    pANTLR3_BASE_TREE string_literal43_tree;
    pANTLR3_BASE_TREE char_literal45_tree;
    pANTLR3_BASE_TREE string_literal46_tree;
    pANTLR3_BASE_TREE char_literal47_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_94;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_93;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_92;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal43       = NULL;
    char_literal45       = NULL;
    string_literal46       = NULL;
    char_literal47       = NULL;
    expr44.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal43_tree   = NULL;
    char_literal45_tree   = NULL;
    string_literal46_tree   = NULL;
    char_literal47_tree   = NULL;

    stream_94   = NULL;
    #define CREATE_stream_94  if (stream_94 == NULL) {stream_94 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 94"); } 
    stream_93   = NULL;
    #define CREATE_stream_93  if (stream_93 == NULL) {stream_93 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 93"); } 
    stream_92   = NULL;
    #define CREATE_stream_92  if (stream_92 == NULL) {stream_92 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 92"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        {
            //  grunt.g:168:2: ( 'case' expr ':' -> ^( SWITCH_CASE_LABEL expr ) | 'default' ':' -> SWITCH_CASE_LABEL )
            
            ANTLR3_UINT32 alt10;

            alt10=2;


            {
                int LA10_0 = LA(1);
                if ( (LA10_0 == 92) ) 
                {
                    alt10=1;
                }
                else if ( (LA10_0 == 94) ) 
                {
                    alt10=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 10;
                    EXCEPTION->state        = 0;


                    goto ruleswitch_case_labelEx;
                }
            }
            switch (alt10) 
            {
        	case 1:
        	    // grunt.g:168:4: 'case' expr ':'
        	    {
        	        string_literal43 = (pANTLR3_COMMON_TOKEN) MATCHT(92, &FOLLOW_92_in_switch_case_label676); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleswitch_case_labelEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_92; stream_92->add(stream_92, string_literal43, NULL); }

        	        FOLLOWPUSH(FOLLOW_expr_in_switch_case_label678);
        	        expr44=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleswitch_case_labelEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr44.tree, NULL); }
        	        char_literal45 = (pANTLR3_COMMON_TOKEN) MATCHT(93, &FOLLOW_93_in_switch_case_label680); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleswitch_case_labelEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_93; stream_93->add(stream_93, char_literal45, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 168:21: -> ^( SWITCH_CASE_LABEL expr )
        	        	{
        	        	    // grunt.g:168:24: ^( SWITCH_CASE_LABEL expr )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SWITCH_CASE_LABEL, (pANTLR3_UINT8)"SWITCH_CASE_LABEL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // grunt.g:169:4: 'default' ':'
        	    {
        	        string_literal46 = (pANTLR3_COMMON_TOKEN) MATCHT(94, &FOLLOW_94_in_switch_case_label694); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleswitch_case_labelEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_94; stream_94->add(stream_94, string_literal46, NULL); }

        	        char_literal47 = (pANTLR3_COMMON_TOKEN) MATCHT(93, &FOLLOW_93_in_switch_case_label696); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleswitch_case_labelEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_93; stream_93->add(stream_93, char_literal47, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 169:19: -> SWITCH_CASE_LABEL
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SWITCH_CASE_LABEL, (pANTLR3_UINT8)"SWITCH_CASE_LABEL"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitch_case_labelEx; /* Prevent compiler warnings */
    ruleswitch_case_labelEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_94 != NULL) stream_94->free(stream_94);
        if (stream_93 != NULL) stream_93->free(stream_93);
        if (stream_92 != NULL) stream_92->free(stream_92);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end switch_case_label */

/** 
 * $ANTLR start iteration_stat
 * grunt.g:172:1: iteration_stat : ( for_stat | while_stat | do_while_stat );
 */
static gruntParser_iteration_stat_return
iteration_stat(pgruntParser ctx)
{   
    gruntParser_iteration_stat_return retval;

    pANTLR3_BASE_TREE root_0;

    gruntParser_for_stat_return for_stat48;
    #undef	RETURN_TYPE_for_stat48
    #define	RETURN_TYPE_for_stat48 gruntParser_for_stat_return

    gruntParser_while_stat_return while_stat49;
    #undef	RETURN_TYPE_while_stat49
    #define	RETURN_TYPE_while_stat49 gruntParser_while_stat_return

    gruntParser_do_while_stat_return do_while_stat50;
    #undef	RETURN_TYPE_do_while_stat50
    #define	RETURN_TYPE_do_while_stat50 gruntParser_do_while_stat_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    for_stat48.tree = NULL;

    while_stat49.tree = NULL;

    do_while_stat50.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  grunt.g:173:2: ( for_stat | while_stat | do_while_stat )
            
            ANTLR3_UINT32 alt11;

            alt11=3;

            switch ( LA(1) ) 
            {
            case 95:
            	{
            		alt11=1;
            	}
                break;
            case 96:
            	{
            		alt11=2;
            	}
                break;
            case 97:
            	{
            		alt11=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 11;
                EXCEPTION->state        = 0;


                goto ruleiteration_statEx;
            }

            switch (alt11) 
            {
        	case 1:
        	    // grunt.g:173:4: for_stat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_for_stat_in_iteration_stat712);
        	        for_stat48=for_stat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, for_stat48.tree);

        	    }
        	    break;
        	case 2:
        	    // grunt.g:174:4: while_stat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_while_stat_in_iteration_stat717);
        	        while_stat49=while_stat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, while_stat49.tree);

        	    }
        	    break;
        	case 3:
        	    // grunt.g:175:4: do_while_stat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_do_while_stat_in_iteration_stat722);
        	        do_while_stat50=do_while_stat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiteration_statEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, do_while_stat50.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiteration_statEx; /* Prevent compiler warnings */
    ruleiteration_statEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end iteration_stat */

/** 
 * $ANTLR start for_stat
 * grunt.g:178:1: for_stat : 'for' '(' for_init_expr ';' for_cond_expr ';' for_loop_expr ')' stat -> ^( FOR_STAT for_init_expr for_cond_expr for_loop_expr stat ) ;
 */
static gruntParser_for_stat_return
for_stat(pgruntParser ctx)
{   
    gruntParser_for_stat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal51;
    pANTLR3_COMMON_TOKEN    char_literal52;
    pANTLR3_COMMON_TOKEN    char_literal54;
    pANTLR3_COMMON_TOKEN    char_literal56;
    pANTLR3_COMMON_TOKEN    char_literal58;
    gruntParser_for_init_expr_return for_init_expr53;
    #undef	RETURN_TYPE_for_init_expr53
    #define	RETURN_TYPE_for_init_expr53 gruntParser_for_init_expr_return

    gruntParser_for_cond_expr_return for_cond_expr55;
    #undef	RETURN_TYPE_for_cond_expr55
    #define	RETURN_TYPE_for_cond_expr55 gruntParser_for_cond_expr_return

    gruntParser_for_loop_expr_return for_loop_expr57;
    #undef	RETURN_TYPE_for_loop_expr57
    #define	RETURN_TYPE_for_loop_expr57 gruntParser_for_loop_expr_return

    gruntParser_stat_return stat59;
    #undef	RETURN_TYPE_stat59
    #define	RETURN_TYPE_stat59 gruntParser_stat_return

    pANTLR3_BASE_TREE string_literal51_tree;
    pANTLR3_BASE_TREE char_literal52_tree;
    pANTLR3_BASE_TREE char_literal54_tree;
    pANTLR3_BASE_TREE char_literal56_tree;
    pANTLR3_BASE_TREE char_literal58_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_95;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_86;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_87;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_for_cond_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_for_loop_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stat;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_for_init_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal51       = NULL;
    char_literal52       = NULL;
    char_literal54       = NULL;
    char_literal56       = NULL;
    char_literal58       = NULL;
    for_init_expr53.tree = NULL;

    for_cond_expr55.tree = NULL;

    for_loop_expr57.tree = NULL;

    stat59.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal51_tree   = NULL;
    char_literal52_tree   = NULL;
    char_literal54_tree   = NULL;
    char_literal56_tree   = NULL;
    char_literal58_tree   = NULL;

    stream_95   = NULL;
    #define CREATE_stream_95  if (stream_95 == NULL) {stream_95 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 95"); } 
    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_86   = NULL;
    #define CREATE_stream_86  if (stream_86 == NULL) {stream_86 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 86"); } 
    stream_87   = NULL;
    #define CREATE_stream_87  if (stream_87 == NULL) {stream_87 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 87"); } 
    stream_for_cond_expr   = NULL;
    #define CREATE_stream_for_cond_expr  if (stream_for_cond_expr == NULL) {stream_for_cond_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule for_cond_expr"); }
    stream_for_loop_expr   = NULL;
    #define CREATE_stream_for_loop_expr  if (stream_for_loop_expr == NULL) {stream_for_loop_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule for_loop_expr"); }
    stream_stat   = NULL;
    #define CREATE_stream_stat  if (stream_stat == NULL) {stream_stat = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stat"); }
    stream_for_init_expr   = NULL;
    #define CREATE_stream_for_init_expr  if (stream_for_init_expr == NULL) {stream_for_init_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule for_init_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:179:2: ( 'for' '(' for_init_expr ';' for_cond_expr ';' for_loop_expr ')' stat -> ^( FOR_STAT for_init_expr for_cond_expr for_loop_expr stat ) )
        // grunt.g:179:4: 'for' '(' for_init_expr ';' for_cond_expr ';' for_loop_expr ')' stat
        {
            string_literal51 = (pANTLR3_COMMON_TOKEN) MATCHT(95, &FOLLOW_95_in_for_stat733); 
            if  (HASEXCEPTION())
            {
                goto rulefor_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_95; stream_95->add(stream_95, string_literal51, NULL); }

            char_literal52 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_for_stat735); 
            if  (HASEXCEPTION())
            {
                goto rulefor_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_86; stream_86->add(stream_86, char_literal52, NULL); }

            FOLLOWPUSH(FOLLOW_for_init_expr_in_for_stat737);
            for_init_expr53=for_init_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefor_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_for_init_expr; stream_for_init_expr->add(stream_for_init_expr, for_init_expr53.tree, NULL); }
            char_literal54 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_for_stat739); 
            if  (HASEXCEPTION())
            {
                goto rulefor_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal54, NULL); }

            FOLLOWPUSH(FOLLOW_for_cond_expr_in_for_stat741);
            for_cond_expr55=for_cond_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefor_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_for_cond_expr; stream_for_cond_expr->add(stream_for_cond_expr, for_cond_expr55.tree, NULL); }
            char_literal56 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_for_stat743); 
            if  (HASEXCEPTION())
            {
                goto rulefor_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal56, NULL); }

            FOLLOWPUSH(FOLLOW_for_loop_expr_in_for_stat745);
            for_loop_expr57=for_loop_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefor_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_for_loop_expr; stream_for_loop_expr->add(stream_for_loop_expr, for_loop_expr57.tree, NULL); }
            char_literal58 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_for_stat747); 
            if  (HASEXCEPTION())
            {
                goto rulefor_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_87; stream_87->add(stream_87, char_literal58, NULL); }

            FOLLOWPUSH(FOLLOW_stat_in_for_stat749);
            stat59=stat(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefor_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_stat; stream_stat->add(stream_stat, stat59.tree, NULL); }

             
            /* AST REWRITE
             * elements          : stat, for_loop_expr, for_cond_expr, for_init_expr
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 180:3: -> ^( FOR_STAT for_init_expr for_cond_expr for_loop_expr stat )
            	{
            	    // grunt.g:180:6: ^( FOR_STAT for_init_expr for_cond_expr for_loop_expr stat )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR_STAT, (pANTLR3_UINT8)"FOR_STAT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_for_init_expr == NULL ? NULL : stream_for_init_expr->nextTree(stream_for_init_expr));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_for_cond_expr == NULL ? NULL : stream_for_cond_expr->nextTree(stream_for_cond_expr));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_for_loop_expr == NULL ? NULL : stream_for_loop_expr->nextTree(stream_for_loop_expr));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_stat == NULL ? NULL : stream_stat->nextTree(stream_stat));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefor_statEx; /* Prevent compiler warnings */
    rulefor_statEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_95 != NULL) stream_95->free(stream_95);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_86 != NULL) stream_86->free(stream_86);
        if (stream_87 != NULL) stream_87->free(stream_87);
        if (stream_for_cond_expr != NULL) stream_for_cond_expr->free(stream_for_cond_expr);
        if (stream_for_loop_expr != NULL) stream_for_loop_expr->free(stream_for_loop_expr);
        if (stream_stat != NULL) stream_stat->free(stream_stat);
        if (stream_for_init_expr != NULL) stream_for_init_expr->free(stream_for_init_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end for_stat */

/** 
 * $ANTLR start for_init_expr
 * grunt.g:183:1: for_init_expr : ( local_declaration_stat | comma_stat | -> EMPTY_EXPR );
 */
static gruntParser_for_init_expr_return
for_init_expr(pgruntParser ctx)
{   
    gruntParser_for_init_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    gruntParser_local_declaration_stat_return local_declaration_stat60;
    #undef	RETURN_TYPE_local_declaration_stat60
    #define	RETURN_TYPE_local_declaration_stat60 gruntParser_local_declaration_stat_return

    gruntParser_comma_stat_return comma_stat61;
    #undef	RETURN_TYPE_comma_stat61
    #define	RETURN_TYPE_comma_stat61 gruntParser_comma_stat_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    local_declaration_stat60.tree = NULL;

    comma_stat61.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  grunt.g:184:2: ( local_declaration_stat | comma_stat | -> EMPTY_EXPR )
            
            ANTLR3_UINT32 alt12;

            alt12=3;

            switch ( LA(1) ) 
            {
            case 81:
            	{
            		alt12=1;
            	}
                break;
            case IDENTIFIER:
            case STRING_LITERAL:
            case DECIMAL_INTEGER_LITERAL:
            case HEXADECIMAL_INTEGER_LITERAL:
            case FLOAT_LITERAL:
            case 84:
            case 86:
            case 90:
            case 122:
            case 123:
            case 127:
            case 128:
            case 129:
            case 130:
            case 134:
            	{
            		alt12=2;
            	}
                break;
            case 77:
            	{
            		alt12=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 12;
                EXCEPTION->state        = 0;


                goto rulefor_init_exprEx;
            }

            switch (alt12) 
            {
        	case 1:
        	    // grunt.g:184:4: local_declaration_stat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_local_declaration_stat_in_for_init_expr776);
        	        local_declaration_stat60=local_declaration_stat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefor_init_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, local_declaration_stat60.tree);

        	    }
        	    break;
        	case 2:
        	    // grunt.g:185:4: comma_stat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_comma_stat_in_for_init_expr781);
        	        comma_stat61=comma_stat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefor_init_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, comma_stat61.tree);

        	    }
        	    break;
        	case 3:
        	    // grunt.g:186:4: 
        	    {
        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 186:4: -> EMPTY_EXPR
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EMPTY_EXPR, (pANTLR3_UINT8)"EMPTY_EXPR"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefor_init_exprEx; /* Prevent compiler warnings */
    rulefor_init_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end for_init_expr */

/** 
 * $ANTLR start for_cond_expr
 * grunt.g:189:1: for_cond_expr : ( expr | -> EMPTY_EXPR );
 */
static gruntParser_for_cond_expr_return
for_cond_expr(pgruntParser ctx)
{   
    gruntParser_for_cond_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    gruntParser_expr_return expr62;
    #undef	RETURN_TYPE_expr62
    #define	RETURN_TYPE_expr62 gruntParser_expr_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    expr62.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  grunt.g:190:2: ( expr | -> EMPTY_EXPR )
            
            ANTLR3_UINT32 alt13;

            alt13=2;


            {
                int LA13_0 = LA(1);
                if ( (((LA13_0 >= IDENTIFIER) && (LA13_0 <= STRING_LITERAL)) || ((LA13_0 >= DECIMAL_INTEGER_LITERAL) && (LA13_0 <= FLOAT_LITERAL)) || LA13_0 == 84 || LA13_0 == 86 || LA13_0 == 90 || ((LA13_0 >= 122) && (LA13_0 <= 123)) || ((LA13_0 >= 127) && (LA13_0 <= 130)) || LA13_0 == 134) ) 
                {
                    alt13=1;
                }
                else if ( (LA13_0 == 77) ) 
                {
                    alt13=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 13;
                    EXCEPTION->state        = 0;


                    goto rulefor_cond_exprEx;
                }
            }
            switch (alt13) 
            {
        	case 1:
        	    // grunt.g:190:4: expr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expr_in_for_cond_expr799);
        	        expr62=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefor_cond_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expr62.tree);

        	    }
        	    break;
        	case 2:
        	    // grunt.g:191:4: 
        	    {
        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 191:4: -> EMPTY_EXPR
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EMPTY_EXPR, (pANTLR3_UINT8)"EMPTY_EXPR"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefor_cond_exprEx; /* Prevent compiler warnings */
    rulefor_cond_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end for_cond_expr */

/** 
 * $ANTLR start for_loop_expr
 * grunt.g:194:1: for_loop_expr : ( comma_stat | -> EMPTY_EXPR );
 */
static gruntParser_for_loop_expr_return
for_loop_expr(pgruntParser ctx)
{   
    gruntParser_for_loop_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    gruntParser_comma_stat_return comma_stat63;
    #undef	RETURN_TYPE_comma_stat63
    #define	RETURN_TYPE_comma_stat63 gruntParser_comma_stat_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    comma_stat63.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  grunt.g:195:2: ( comma_stat | -> EMPTY_EXPR )
            
            ANTLR3_UINT32 alt14;

            alt14=2;


            {
                int LA14_0 = LA(1);
                if ( (((LA14_0 >= IDENTIFIER) && (LA14_0 <= STRING_LITERAL)) || ((LA14_0 >= DECIMAL_INTEGER_LITERAL) && (LA14_0 <= FLOAT_LITERAL)) || LA14_0 == 84 || LA14_0 == 86 || LA14_0 == 90 || ((LA14_0 >= 122) && (LA14_0 <= 123)) || ((LA14_0 >= 127) && (LA14_0 <= 130)) || LA14_0 == 134) ) 
                {
                    alt14=1;
                }
                else if ( (LA14_0 == 87) ) 
                {
                    alt14=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 14;
                    EXCEPTION->state        = 0;


                    goto rulefor_loop_exprEx;
                }
            }
            switch (alt14) 
            {
        	case 1:
        	    // grunt.g:195:4: comma_stat
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_comma_stat_in_for_loop_expr817);
        	        comma_stat63=comma_stat(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefor_loop_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, comma_stat63.tree);

        	    }
        	    break;
        	case 2:
        	    // grunt.g:196:4: 
        	    {
        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 196:4: -> EMPTY_EXPR
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EMPTY_EXPR, (pANTLR3_UINT8)"EMPTY_EXPR"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefor_loop_exprEx; /* Prevent compiler warnings */
    rulefor_loop_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end for_loop_expr */

/** 
 * $ANTLR start while_stat
 * grunt.g:199:1: while_stat : 'while' '(' expr ')' stat -> ^( WHILE_STAT expr stat ) ;
 */
static gruntParser_while_stat_return
while_stat(pgruntParser ctx)
{   
    gruntParser_while_stat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal64;
    pANTLR3_COMMON_TOKEN    char_literal65;
    pANTLR3_COMMON_TOKEN    char_literal67;
    gruntParser_expr_return expr66;
    #undef	RETURN_TYPE_expr66
    #define	RETURN_TYPE_expr66 gruntParser_expr_return

    gruntParser_stat_return stat68;
    #undef	RETURN_TYPE_stat68
    #define	RETURN_TYPE_stat68 gruntParser_stat_return

    pANTLR3_BASE_TREE string_literal64_tree;
    pANTLR3_BASE_TREE char_literal65_tree;
    pANTLR3_BASE_TREE char_literal67_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_96;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_86;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_87;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stat;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal64       = NULL;
    char_literal65       = NULL;
    char_literal67       = NULL;
    expr66.tree = NULL;

    stat68.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal64_tree   = NULL;
    char_literal65_tree   = NULL;
    char_literal67_tree   = NULL;

    stream_96   = NULL;
    #define CREATE_stream_96  if (stream_96 == NULL) {stream_96 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 96"); } 
    stream_86   = NULL;
    #define CREATE_stream_86  if (stream_86 == NULL) {stream_86 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 86"); } 
    stream_87   = NULL;
    #define CREATE_stream_87  if (stream_87 == NULL) {stream_87 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 87"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_stat   = NULL;
    #define CREATE_stream_stat  if (stream_stat == NULL) {stream_stat = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stat"); }

    retval.tree  = NULL;
    {
        // grunt.g:200:2: ( 'while' '(' expr ')' stat -> ^( WHILE_STAT expr stat ) )
        // grunt.g:200:4: 'while' '(' expr ')' stat
        {
            string_literal64 = (pANTLR3_COMMON_TOKEN) MATCHT(96, &FOLLOW_96_in_while_stat835); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_96; stream_96->add(stream_96, string_literal64, NULL); }

            char_literal65 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_while_stat837); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_86; stream_86->add(stream_86, char_literal65, NULL); }

            FOLLOWPUSH(FOLLOW_expr_in_while_stat839);
            expr66=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhile_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr66.tree, NULL); }
            char_literal67 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_while_stat841); 
            if  (HASEXCEPTION())
            {
                goto rulewhile_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_87; stream_87->add(stream_87, char_literal67, NULL); }

            FOLLOWPUSH(FOLLOW_stat_in_while_stat843);
            stat68=stat(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhile_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_stat; stream_stat->add(stream_stat, stat68.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expr, stat
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 201:3: -> ^( WHILE_STAT expr stat )
            	{
            	    // grunt.g:201:6: ^( WHILE_STAT expr stat )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHILE_STAT, (pANTLR3_UINT8)"WHILE_STAT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_stat == NULL ? NULL : stream_stat->nextTree(stream_stat));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhile_statEx; /* Prevent compiler warnings */
    rulewhile_statEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_96 != NULL) stream_96->free(stream_96);
        if (stream_86 != NULL) stream_86->free(stream_86);
        if (stream_87 != NULL) stream_87->free(stream_87);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_stat != NULL) stream_stat->free(stream_stat);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end while_stat */

/** 
 * $ANTLR start do_while_stat
 * grunt.g:204:1: do_while_stat : 'do' compound_stat 'while' '(' expr ')' ';' -> ^( DO_WHILE_STAT compound_stat expr ) ;
 */
static gruntParser_do_while_stat_return
do_while_stat(pgruntParser ctx)
{   
    gruntParser_do_while_stat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal69;
    pANTLR3_COMMON_TOKEN    string_literal71;
    pANTLR3_COMMON_TOKEN    char_literal72;
    pANTLR3_COMMON_TOKEN    char_literal74;
    pANTLR3_COMMON_TOKEN    char_literal75;
    gruntParser_compound_stat_return compound_stat70;
    #undef	RETURN_TYPE_compound_stat70
    #define	RETURN_TYPE_compound_stat70 gruntParser_compound_stat_return

    gruntParser_expr_return expr73;
    #undef	RETURN_TYPE_expr73
    #define	RETURN_TYPE_expr73 gruntParser_expr_return

    pANTLR3_BASE_TREE string_literal69_tree;
    pANTLR3_BASE_TREE string_literal71_tree;
    pANTLR3_BASE_TREE char_literal72_tree;
    pANTLR3_BASE_TREE char_literal74_tree;
    pANTLR3_BASE_TREE char_literal75_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_97;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_96;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_77;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_86;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_87;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_compound_stat;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal69       = NULL;
    string_literal71       = NULL;
    char_literal72       = NULL;
    char_literal74       = NULL;
    char_literal75       = NULL;
    compound_stat70.tree = NULL;

    expr73.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal69_tree   = NULL;
    string_literal71_tree   = NULL;
    char_literal72_tree   = NULL;
    char_literal74_tree   = NULL;
    char_literal75_tree   = NULL;

    stream_97   = NULL;
    #define CREATE_stream_97  if (stream_97 == NULL) {stream_97 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 97"); } 
    stream_96   = NULL;
    #define CREATE_stream_96  if (stream_96 == NULL) {stream_96 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 96"); } 
    stream_77   = NULL;
    #define CREATE_stream_77  if (stream_77 == NULL) {stream_77 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 77"); } 
    stream_86   = NULL;
    #define CREATE_stream_86  if (stream_86 == NULL) {stream_86 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 86"); } 
    stream_87   = NULL;
    #define CREATE_stream_87  if (stream_87 == NULL) {stream_87 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 87"); } 
    stream_compound_stat   = NULL;
    #define CREATE_stream_compound_stat  if (stream_compound_stat == NULL) {stream_compound_stat = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule compound_stat"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:205:2: ( 'do' compound_stat 'while' '(' expr ')' ';' -> ^( DO_WHILE_STAT compound_stat expr ) )
        // grunt.g:205:4: 'do' compound_stat 'while' '(' expr ')' ';'
        {
            string_literal69 = (pANTLR3_COMMON_TOKEN) MATCHT(97, &FOLLOW_97_in_do_while_stat866); 
            if  (HASEXCEPTION())
            {
                goto ruledo_while_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_97; stream_97->add(stream_97, string_literal69, NULL); }

            FOLLOWPUSH(FOLLOW_compound_stat_in_do_while_stat868);
            compound_stat70=compound_stat(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledo_while_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_compound_stat; stream_compound_stat->add(stream_compound_stat, compound_stat70.tree, NULL); }
            string_literal71 = (pANTLR3_COMMON_TOKEN) MATCHT(96, &FOLLOW_96_in_do_while_stat870); 
            if  (HASEXCEPTION())
            {
                goto ruledo_while_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_96; stream_96->add(stream_96, string_literal71, NULL); }

            char_literal72 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_do_while_stat872); 
            if  (HASEXCEPTION())
            {
                goto ruledo_while_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_86; stream_86->add(stream_86, char_literal72, NULL); }

            FOLLOWPUSH(FOLLOW_expr_in_do_while_stat874);
            expr73=expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledo_while_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr73.tree, NULL); }
            char_literal74 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_do_while_stat876); 
            if  (HASEXCEPTION())
            {
                goto ruledo_while_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_87; stream_87->add(stream_87, char_literal74, NULL); }

            char_literal75 = (pANTLR3_COMMON_TOKEN) MATCHT(77, &FOLLOW_77_in_do_while_stat878); 
            if  (HASEXCEPTION())
            {
                goto ruledo_while_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_77; stream_77->add(stream_77, char_literal75, NULL); }


             
            /* AST REWRITE
             * elements          : expr, compound_stat
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 206:3: -> ^( DO_WHILE_STAT compound_stat expr )
            	{
            	    // grunt.g:206:6: ^( DO_WHILE_STAT compound_stat expr )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DO_WHILE_STAT, (pANTLR3_UINT8)"DO_WHILE_STAT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_compound_stat == NULL ? NULL : stream_compound_stat->nextTree(stream_compound_stat));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledo_while_statEx; /* Prevent compiler warnings */
    ruledo_while_statEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_97 != NULL) stream_97->free(stream_97);
        if (stream_96 != NULL) stream_96->free(stream_96);
        if (stream_77 != NULL) stream_77->free(stream_77);
        if (stream_86 != NULL) stream_86->free(stream_86);
        if (stream_87 != NULL) stream_87->free(stream_87);
        if (stream_compound_stat != NULL) stream_compound_stat->free(stream_compound_stat);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end do_while_stat */

/** 
 * $ANTLR start compound_stat
 * grunt.g:209:1: compound_stat : '{' ( stat )* '}' -> ^( CP_BLOCK ( stat )* ) ;
 */
static gruntParser_compound_stat_return
compound_stat(pgruntParser ctx)
{   
    gruntParser_compound_stat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal76;
    pANTLR3_COMMON_TOKEN    char_literal78;
    gruntParser_stat_return stat77;
    #undef	RETURN_TYPE_stat77
    #define	RETURN_TYPE_stat77 gruntParser_stat_return

    pANTLR3_BASE_TREE char_literal76_tree;
    pANTLR3_BASE_TREE char_literal78_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_91;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_90;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_stat;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal76       = NULL;
    char_literal78       = NULL;
    stat77.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal76_tree   = NULL;
    char_literal78_tree   = NULL;

    stream_91   = NULL;
    #define CREATE_stream_91  if (stream_91 == NULL) {stream_91 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 91"); } 
    stream_90   = NULL;
    #define CREATE_stream_90  if (stream_90 == NULL) {stream_90 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 90"); } 
    stream_stat   = NULL;
    #define CREATE_stream_stat  if (stream_stat == NULL) {stream_stat = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule stat"); }

    retval.tree  = NULL;
    {
        // grunt.g:210:2: ( '{' ( stat )* '}' -> ^( CP_BLOCK ( stat )* ) )
        // grunt.g:210:4: '{' ( stat )* '}'
        {
            char_literal76 = (pANTLR3_COMMON_TOKEN) MATCHT(90, &FOLLOW_90_in_compound_stat901); 
            if  (HASEXCEPTION())
            {
                goto rulecompound_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_90; stream_90->add(stream_90, char_literal76, NULL); }


            // grunt.g:210:8: ( stat )*

            for (;;)
            {
                int alt15=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA15_0 = LA(1);
                    if ( (((LA15_0 >= IDENTIFIER) && (LA15_0 <= STRING_LITERAL)) || ((LA15_0 >= DECIMAL_INTEGER_LITERAL) && (LA15_0 <= FLOAT_LITERAL)) || ((LA15_0 >= 77) && (LA15_0 <= 81)) || ((LA15_0 >= 84) && (LA15_0 <= 86)) || ((LA15_0 >= 89) && (LA15_0 <= 90)) || ((LA15_0 >= 95) && (LA15_0 <= 97)) || ((LA15_0 >= 122) && (LA15_0 <= 123)) || ((LA15_0 >= 127) && (LA15_0 <= 130)) || LA15_0 == 134) ) 
                    {
                        alt15=1;
                    }

                }
                switch (alt15) 
                {
            	case 1:
            	    // grunt.g:210:8: stat
            	    {
            	        FOLLOWPUSH(FOLLOW_stat_in_compound_stat903);
            	        stat77=stat(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecompound_statEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_stat; stream_stat->add(stream_stat, stat77.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */

            char_literal78 = (pANTLR3_COMMON_TOKEN) MATCHT(91, &FOLLOW_91_in_compound_stat906); 
            if  (HASEXCEPTION())
            {
                goto rulecompound_statEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_91; stream_91->add(stream_91, char_literal78, NULL); }


             
            /* AST REWRITE
             * elements          : stat
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 210:18: -> ^( CP_BLOCK ( stat )* )
            	{
            	    // grunt.g:210:21: ^( CP_BLOCK ( stat )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CP_BLOCK, (pANTLR3_UINT8)"CP_BLOCK"), root_1));

            	        // grunt.g:210:32: ( stat )*
            	        {
            	        	while ( (stream_stat != NULL && stream_stat->hasNext(stream_stat))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_stat == NULL ? NULL : stream_stat->nextTree(stream_stat));

            	        	}
            	        	if (stream_stat != NULL) stream_stat->reset(stream_stat);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecompound_statEx; /* Prevent compiler warnings */
    rulecompound_statEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_91 != NULL) stream_91->free(stream_91);
        if (stream_90 != NULL) stream_90->free(stream_90);
        if (stream_stat != NULL) stream_stat->free(stream_stat);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end compound_stat */

/** 
 * $ANTLR start comma_stat
 * grunt.g:213:1: comma_stat : (e+= expr -> expr ) ( ',' e+= expr -> ^( COMMA_BLOCK ( $e)+ ) )* ;
 */
static gruntParser_comma_stat_return
comma_stat(pgruntParser ctx)
{   
    gruntParser_comma_stat_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal79;
    pANTLR3_VECTOR    list_e;
    gruntParser_expr_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e gruntParser_expr_return

    pANTLR3_BASE_TREE char_literal79_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_83;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal79       = NULL;
    list_e     = NULL;
    e.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal79_tree   = NULL;

    stream_83   = NULL;
    #define CREATE_stream_83  if (stream_83 == NULL) {stream_83 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 83"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:214:2: ( (e+= expr -> expr ) ( ',' e+= expr -> ^( COMMA_BLOCK ( $e)+ ) )* )
        // grunt.g:214:4: (e+= expr -> expr ) ( ',' e+= expr -> ^( COMMA_BLOCK ( $e)+ ) )*
        {
            // grunt.g:214:4: (e+= expr -> expr )
            // grunt.g:214:5: e+= expr
            {
                FOLLOWPUSH(FOLLOW_expr_in_comma_stat931);
                e=expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecomma_statEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }
                /* listLabelTrack(label)
                 */
                if (list_e == NULL)
                {
                    list_e=ctx->vectors->newVector(ctx->vectors);
                }
                list_e->add(list_e, e.tree, NULL);

                 
                /* AST REWRITE
                 * elements          : expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 214:15: -> expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:214:24: ( ',' e+= expr -> ^( COMMA_BLOCK ( $e)+ ) )*

            for (;;)
            {
                int alt16=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA16_0 = LA(1);
                    if ( (LA16_0 == 83) ) 
                    {
                        alt16=1;
                    }

                }
                switch (alt16) 
                {
            	case 1:
            	    // grunt.g:214:25: ',' e+= expr
            	    {
            	        char_literal79 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_comma_stat939); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecomma_statEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_83; stream_83->add(stream_83, char_literal79, NULL); }

            	        FOLLOWPUSH(FOLLOW_expr_in_comma_stat945);
            	        e=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecomma_statEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, e.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_e == NULL)
            	        {
            	            list_e=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_e->add(list_e, e.tree, NULL);

            	         
            	        /* AST REWRITE
            	         * elements          : e
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : e
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", list_e);
            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 214:40: -> ^( COMMA_BLOCK ( $e)+ )
            	        	{
            	        	    // grunt.g:214:43: ^( COMMA_BLOCK ( $e)+ )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COMMA_BLOCK, (pANTLR3_UINT8)"COMMA_BLOCK"), root_1));

            	        	        if ((stream_e == NULL || !stream_e->hasNext(stream_e))  )
            	        	        {
            	        	            CONSTRUCTEX();
            	        	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        	        }
            	        	        else
            	        	        {
            	        	        	while ( (stream_e->hasNext(stream_e))  ) {
            	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

            	        	        	}
            	        	        	stream_e->reset(stream_e);

            	        	        }
            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e != NULL) stream_e->free(stream_e);

            	        }
            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecomma_statEx; /* Prevent compiler warnings */
    rulecomma_statEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_83 != NULL) stream_83->free(stream_83);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end comma_stat */

/** 
 * $ANTLR start parameter_list
 * grunt.g:217:1: parameter_list : '(' ( -> ^( PARAMETER_LIST ) | (p+= IDENTIFIER ( ',' p+= IDENTIFIER )* ) -> ^( PARAMETER_LIST ( $p)* ) ) ')' ;
 */
static gruntParser_parameter_list_return
parameter_list(pgruntParser ctx)
{   
    gruntParser_parameter_list_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal80;
    pANTLR3_COMMON_TOKEN    char_literal81;
    pANTLR3_COMMON_TOKEN    char_literal82;
    pANTLR3_COMMON_TOKEN    p;
    pANTLR3_VECTOR    list_p;

    pANTLR3_BASE_TREE char_literal80_tree;
    pANTLR3_BASE_TREE char_literal81_tree;
    pANTLR3_BASE_TREE char_literal82_tree;
    pANTLR3_BASE_TREE p_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_83;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_86;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_87;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal80       = NULL;
    char_literal81       = NULL;
    char_literal82       = NULL;
    p       = NULL;
    list_p     = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal80_tree   = NULL;
    char_literal81_tree   = NULL;
    char_literal82_tree   = NULL;
    p_tree   = NULL;

    stream_83   = NULL;
    #define CREATE_stream_83  if (stream_83 == NULL) {stream_83 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 83"); } 
    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 
    stream_86   = NULL;
    #define CREATE_stream_86  if (stream_86 == NULL) {stream_86 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 86"); } 
    stream_87   = NULL;
    #define CREATE_stream_87  if (stream_87 == NULL) {stream_87 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 87"); } 

    retval.tree  = NULL;
    {
        // grunt.g:218:2: ( '(' ( -> ^( PARAMETER_LIST ) | (p+= IDENTIFIER ( ',' p+= IDENTIFIER )* ) -> ^( PARAMETER_LIST ( $p)* ) ) ')' )
        // grunt.g:218:4: '(' ( -> ^( PARAMETER_LIST ) | (p+= IDENTIFIER ( ',' p+= IDENTIFIER )* ) -> ^( PARAMETER_LIST ( $p)* ) ) ')'
        {
            char_literal80 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_parameter_list969); 
            if  (HASEXCEPTION())
            {
                goto ruleparameter_listEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_86; stream_86->add(stream_86, char_literal80, NULL); }


            // grunt.g:218:8: ( -> ^( PARAMETER_LIST ) | (p+= IDENTIFIER ( ',' p+= IDENTIFIER )* ) -> ^( PARAMETER_LIST ( $p)* ) )
            {
                int alt18=2;

                {
                    int LA18_0 = LA(1);
                    if ( (LA18_0 == 87) ) 
                    {
                        alt18=1;
                    }
                    else if ( (LA18_0 == IDENTIFIER) ) 
                    {
                        alt18=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 18;
                        EXCEPTION->state        = 0;


                        goto ruleparameter_listEx;
                    }
                }
                switch (alt18) 
                {
            	case 1:
            	    // grunt.g:218:10: 
            	    {
            	         
            	        /* AST REWRITE
            	         * elements          : 
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 218:10: -> ^( PARAMETER_LIST )
            	        	{
            	        	    // grunt.g:218:13: ^( PARAMETER_LIST )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PARAMETER_LIST, (pANTLR3_UINT8)"PARAMETER_LIST"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // grunt.g:218:33: (p+= IDENTIFIER ( ',' p+= IDENTIFIER )* )
            	    {
            	        // grunt.g:218:33: (p+= IDENTIFIER ( ',' p+= IDENTIFIER )* )
            	        // grunt.g:218:34: p+= IDENTIFIER ( ',' p+= IDENTIFIER )*
            	        {
            	            p = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_parameter_list986); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleparameter_listEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, p, NULL); }

            	            if (list_p == NULL)
            	            {
            	                list_p=ctx->vectors->newVector(ctx->vectors);
            	            }
            	            list_p->add(list_p, p, NULL);

            	            // grunt.g:218:50: ( ',' p+= IDENTIFIER )*

            	            for (;;)
            	            {
            	                int alt17=2;
            	                {
            	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                    */
            	                    int LA17_0 = LA(1);
            	                    if ( (LA17_0 == 83) ) 
            	                    {
            	                        alt17=1;
            	                    }

            	                }
            	                switch (alt17) 
            	                {
            	            	case 1:
            	            	    // grunt.g:218:51: ',' p+= IDENTIFIER
            	            	    {
            	            	        char_literal81 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_parameter_list989); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto ruleparameter_listEx;
            	            	        }
            	            	        if (HASFAILED())
            	            	        {
            	            	            return retval;
            	            	        } 
            	            	        if ( BACKTRACKING==0 ) { CREATE_stream_83; stream_83->add(stream_83, char_literal81, NULL); }

            	            	        p = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_parameter_list995); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto ruleparameter_listEx;
            	            	        }
            	            	        if (HASFAILED())
            	            	        {
            	            	            return retval;
            	            	        } 
            	            	        if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, p, NULL); }

            	            	        if (list_p == NULL)
            	            	        {
            	            	            list_p=ctx->vectors->newVector(ctx->vectors);
            	            	        }
            	            	        list_p->add(list_p, p, NULL);

            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop17;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop17: ; /* Jump out to here if this rule does not match */


            	        }


            	         
            	        /* AST REWRITE
            	         * elements          : p
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : p
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_p;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_p=antlr3RewriteRuleTOKENStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token p", list_p); 
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 218:74: -> ^( PARAMETER_LIST ( $p)* )
            	        	{
            	        	    // grunt.g:218:77: ^( PARAMETER_LIST ( $p)* )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PARAMETER_LIST, (pANTLR3_UINT8)"PARAMETER_LIST"), root_1));

            	        	        // grunt.g:218:94: ( $p)*
            	        	        {
            	        	        	while ( (stream_p != NULL && stream_p->hasNext(stream_p))  )
            	        	        	{
            	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_p == NULL ? NULL : stream_p->nextNode(stream_p));

            	        	        	}
            	        	        	if (stream_p != NULL) stream_p->reset(stream_p);

            	        	        }

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_p != NULL) stream_p->free(stream_p);
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }
            char_literal82 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_parameter_list1011); 
            if  (HASEXCEPTION())
            {
                goto ruleparameter_listEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_87; stream_87->add(stream_87, char_literal82, NULL); }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleparameter_listEx; /* Prevent compiler warnings */
    ruleparameter_listEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_83 != NULL) stream_83->free(stream_83);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);
        if (stream_86 != NULL) stream_86->free(stream_86);
        if (stream_87 != NULL) stream_87->free(stream_87);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end parameter_list */

/** 
 * $ANTLR start argument_list
 * grunt.g:221:1: argument_list : '(' ( | a+= expr ( ',' a+= expr )* ) ')' -> ^( ARGUMENT_LIST ( $a)* ) ;
 */
static gruntParser_argument_list_return
argument_list(pgruntParser ctx)
{   
    gruntParser_argument_list_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal83;
    pANTLR3_COMMON_TOKEN    char_literal84;
    pANTLR3_COMMON_TOKEN    char_literal85;
    pANTLR3_VECTOR    list_a;
    gruntParser_expr_return a;
    #undef	RETURN_TYPE_a
    #define	RETURN_TYPE_a gruntParser_expr_return

    pANTLR3_BASE_TREE char_literal83_tree;
    pANTLR3_BASE_TREE char_literal84_tree;
    pANTLR3_BASE_TREE char_literal85_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_83;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_86;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_87;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal83       = NULL;
    char_literal84       = NULL;
    char_literal85       = NULL;
    list_a     = NULL;
    a.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal83_tree   = NULL;
    char_literal84_tree   = NULL;
    char_literal85_tree   = NULL;

    stream_83   = NULL;
    #define CREATE_stream_83  if (stream_83 == NULL) {stream_83 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 83"); } 
    stream_86   = NULL;
    #define CREATE_stream_86  if (stream_86 == NULL) {stream_86 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 86"); } 
    stream_87   = NULL;
    #define CREATE_stream_87  if (stream_87 == NULL) {stream_87 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 87"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:222:2: ( '(' ( | a+= expr ( ',' a+= expr )* ) ')' -> ^( ARGUMENT_LIST ( $a)* ) )
        // grunt.g:222:4: '(' ( | a+= expr ( ',' a+= expr )* ) ')'
        {
            char_literal83 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_argument_list1022); 
            if  (HASEXCEPTION())
            {
                goto ruleargument_listEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_86; stream_86->add(stream_86, char_literal83, NULL); }


            // grunt.g:222:8: ( | a+= expr ( ',' a+= expr )* )
            {
                int alt20=2;

                {
                    int LA20_0 = LA(1);
                    if ( (LA20_0 == 87) ) 
                    {
                        alt20=1;
                    }
                    else if ( (((LA20_0 >= IDENTIFIER) && (LA20_0 <= STRING_LITERAL)) || ((LA20_0 >= DECIMAL_INTEGER_LITERAL) && (LA20_0 <= FLOAT_LITERAL)) || LA20_0 == 84 || LA20_0 == 86 || LA20_0 == 90 || ((LA20_0 >= 122) && (LA20_0 <= 123)) || ((LA20_0 >= 127) && (LA20_0 <= 130)) || LA20_0 == 134) ) 
                    {
                        alt20=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 20;
                        EXCEPTION->state        = 0;


                        goto ruleargument_listEx;
                    }
                }
                switch (alt20) 
                {
            	case 1:
            	    // grunt.g:222:10: 
            	    {
            	    }
            	    break;
            	case 2:
            	    // grunt.g:222:12: a+= expr ( ',' a+= expr )*
            	    {
            	        FOLLOWPUSH(FOLLOW_expr_in_argument_list1032);
            	        a=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargument_listEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, a.tree, NULL); }
            	        /* listLabelTrack(label)
            	         */
            	        if (list_a == NULL)
            	        {
            	            list_a=ctx->vectors->newVector(ctx->vectors);
            	        }
            	        list_a->add(list_a, a.tree, NULL);

            	        // grunt.g:222:22: ( ',' a+= expr )*

            	        for (;;)
            	        {
            	            int alt19=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA19_0 = LA(1);
            	                if ( (LA19_0 == 83) ) 
            	                {
            	                    alt19=1;
            	                }

            	            }
            	            switch (alt19) 
            	            {
            	        	case 1:
            	        	    // grunt.g:222:23: ',' a+= expr
            	        	    {
            	        	        char_literal84 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_argument_list1035); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargument_listEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_83; stream_83->add(stream_83, char_literal84, NULL); }

            	        	        FOLLOWPUSH(FOLLOW_expr_in_argument_list1041);
            	        	        a=expr(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargument_listEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, a.tree, NULL); }
            	        	        /* listLabelTrack(label)
            	        	         */
            	        	        if (list_a == NULL)
            	        	        {
            	        	            list_a=ctx->vectors->newVector(ctx->vectors);
            	        	        }
            	        	        list_a->add(list_a, a.tree, NULL);

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop19;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop19: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }
            char_literal85 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_argument_list1046); 
            if  (HASEXCEPTION())
            {
                goto ruleargument_listEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_87; stream_87->add(stream_87, char_literal85, NULL); }


             
            /* AST REWRITE
             * elements          : a
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : a
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a;
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_a=antlr3RewriteRuleSubtreeStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", list_a);
            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 222:44: -> ^( ARGUMENT_LIST ( $a)* )
            	{
            	    // grunt.g:222:47: ^( ARGUMENT_LIST ( $a)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGUMENT_LIST, (pANTLR3_UINT8)"ARGUMENT_LIST"), root_1));

            	        // grunt.g:222:63: ( $a)*
            	        {
            	        	while ( (stream_a != NULL && stream_a->hasNext(stream_a))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextTree(stream_a));

            	        	}
            	        	if (stream_a != NULL) stream_a->reset(stream_a);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_a != NULL) stream_a->free(stream_a);

            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargument_listEx; /* Prevent compiler warnings */
    ruleargument_listEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_83 != NULL) stream_83->free(stream_83);
        if (stream_86 != NULL) stream_86->free(stream_86);
        if (stream_87 != NULL) stream_87->free(stream_87);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end argument_list */

/** 
 * $ANTLR start expr
 * grunt.g:225:1: expr : assignment_expr ;
 */
static gruntParser_expr_return
expr(pgruntParser ctx)
{   
    gruntParser_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    gruntParser_assignment_expr_return assignment_expr86;
    #undef	RETURN_TYPE_assignment_expr86
    #define	RETURN_TYPE_assignment_expr86 gruntParser_assignment_expr_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    assignment_expr86.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // grunt.g:226:2: ( assignment_expr )
        // grunt.g:226:4: assignment_expr
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_assignment_expr_in_expr1067);
            assignment_expr86=assignment_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, assignment_expr86.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end expr */

/** 
 * $ANTLR start assignment_expr
 * grunt.g:229:1: assignment_expr : conditional_expr ( -> conditional_expr | ( '=' assignment_expr -> ^( OP_ASSIGN conditional_expr assignment_expr ) ) | ( '+=' assignment_expr -> ^( OP_ADD_ASSIGN conditional_expr assignment_expr ) ) | ( '-=' assignment_expr -> ^( OP_SUB_ASSIGN conditional_expr assignment_expr ) ) | ( '*=' assignment_expr -> ^( OP_MUL_ASSIGN conditional_expr assignment_expr ) ) | ( '/=' assignment_expr -> ^( OP_DIV_ASSIGN conditional_expr assignment_expr ) ) | ( '%=' assignment_expr -> ^( OP_MOD_ASSIGN conditional_expr assignment_expr ) ) | ( '<<=' assignment_expr -> ^( OP_SHIFT_LEFT_ASSIGN conditional_expr assignment_expr ) ) | ( '>>=' assignment_expr -> ^( OP_SHIFT_RIGHT_ASSIGN conditional_expr assignment_expr ) ) | ( '&=' assignment_expr -> ^( OP_AND_ASSIGN conditional_expr assignment_expr ) ) | ( '|=' assignment_expr -> ^( OP_OR_ASSIGN conditional_expr assignment_expr ) ) | ( '^=' assignment_expr -> ^( OP_XOR_ASSIGN conditional_expr assignment_expr ) ) ) ;
 */
static gruntParser_assignment_expr_return
assignment_expr(pgruntParser ctx)
{   
    gruntParser_assignment_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal88;
    pANTLR3_COMMON_TOKEN    string_literal90;
    pANTLR3_COMMON_TOKEN    string_literal92;
    pANTLR3_COMMON_TOKEN    string_literal94;
    pANTLR3_COMMON_TOKEN    string_literal96;
    pANTLR3_COMMON_TOKEN    string_literal98;
    pANTLR3_COMMON_TOKEN    string_literal100;
    pANTLR3_COMMON_TOKEN    string_literal102;
    pANTLR3_COMMON_TOKEN    string_literal104;
    pANTLR3_COMMON_TOKEN    string_literal106;
    pANTLR3_COMMON_TOKEN    string_literal108;
    gruntParser_conditional_expr_return conditional_expr87;
    #undef	RETURN_TYPE_conditional_expr87
    #define	RETURN_TYPE_conditional_expr87 gruntParser_conditional_expr_return

    gruntParser_assignment_expr_return assignment_expr89;
    #undef	RETURN_TYPE_assignment_expr89
    #define	RETURN_TYPE_assignment_expr89 gruntParser_assignment_expr_return

    gruntParser_assignment_expr_return assignment_expr91;
    #undef	RETURN_TYPE_assignment_expr91
    #define	RETURN_TYPE_assignment_expr91 gruntParser_assignment_expr_return

    gruntParser_assignment_expr_return assignment_expr93;
    #undef	RETURN_TYPE_assignment_expr93
    #define	RETURN_TYPE_assignment_expr93 gruntParser_assignment_expr_return

    gruntParser_assignment_expr_return assignment_expr95;
    #undef	RETURN_TYPE_assignment_expr95
    #define	RETURN_TYPE_assignment_expr95 gruntParser_assignment_expr_return

    gruntParser_assignment_expr_return assignment_expr97;
    #undef	RETURN_TYPE_assignment_expr97
    #define	RETURN_TYPE_assignment_expr97 gruntParser_assignment_expr_return

    gruntParser_assignment_expr_return assignment_expr99;
    #undef	RETURN_TYPE_assignment_expr99
    #define	RETURN_TYPE_assignment_expr99 gruntParser_assignment_expr_return

    gruntParser_assignment_expr_return assignment_expr101;
    #undef	RETURN_TYPE_assignment_expr101
    #define	RETURN_TYPE_assignment_expr101 gruntParser_assignment_expr_return

    gruntParser_assignment_expr_return assignment_expr103;
    #undef	RETURN_TYPE_assignment_expr103
    #define	RETURN_TYPE_assignment_expr103 gruntParser_assignment_expr_return

    gruntParser_assignment_expr_return assignment_expr105;
    #undef	RETURN_TYPE_assignment_expr105
    #define	RETURN_TYPE_assignment_expr105 gruntParser_assignment_expr_return

    gruntParser_assignment_expr_return assignment_expr107;
    #undef	RETURN_TYPE_assignment_expr107
    #define	RETURN_TYPE_assignment_expr107 gruntParser_assignment_expr_return

    gruntParser_assignment_expr_return assignment_expr109;
    #undef	RETURN_TYPE_assignment_expr109
    #define	RETURN_TYPE_assignment_expr109 gruntParser_assignment_expr_return

    pANTLR3_BASE_TREE char_literal88_tree;
    pANTLR3_BASE_TREE string_literal90_tree;
    pANTLR3_BASE_TREE string_literal92_tree;
    pANTLR3_BASE_TREE string_literal94_tree;
    pANTLR3_BASE_TREE string_literal96_tree;
    pANTLR3_BASE_TREE string_literal98_tree;
    pANTLR3_BASE_TREE string_literal100_tree;
    pANTLR3_BASE_TREE string_literal102_tree;
    pANTLR3_BASE_TREE string_literal104_tree;
    pANTLR3_BASE_TREE string_literal106_tree;
    pANTLR3_BASE_TREE string_literal108_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_98;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_107;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_106;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_82;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_105;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_104;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_103;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_99;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_102;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_101;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_100;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignment_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditional_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal88       = NULL;
    string_literal90       = NULL;
    string_literal92       = NULL;
    string_literal94       = NULL;
    string_literal96       = NULL;
    string_literal98       = NULL;
    string_literal100       = NULL;
    string_literal102       = NULL;
    string_literal104       = NULL;
    string_literal106       = NULL;
    string_literal108       = NULL;
    conditional_expr87.tree = NULL;

    assignment_expr89.tree = NULL;

    assignment_expr91.tree = NULL;

    assignment_expr93.tree = NULL;

    assignment_expr95.tree = NULL;

    assignment_expr97.tree = NULL;

    assignment_expr99.tree = NULL;

    assignment_expr101.tree = NULL;

    assignment_expr103.tree = NULL;

    assignment_expr105.tree = NULL;

    assignment_expr107.tree = NULL;

    assignment_expr109.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal88_tree   = NULL;
    string_literal90_tree   = NULL;
    string_literal92_tree   = NULL;
    string_literal94_tree   = NULL;
    string_literal96_tree   = NULL;
    string_literal98_tree   = NULL;
    string_literal100_tree   = NULL;
    string_literal102_tree   = NULL;
    string_literal104_tree   = NULL;
    string_literal106_tree   = NULL;
    string_literal108_tree   = NULL;

    stream_98   = NULL;
    #define CREATE_stream_98  if (stream_98 == NULL) {stream_98 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 98"); } 
    stream_107   = NULL;
    #define CREATE_stream_107  if (stream_107 == NULL) {stream_107 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 107"); } 
    stream_106   = NULL;
    #define CREATE_stream_106  if (stream_106 == NULL) {stream_106 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 106"); } 
    stream_82   = NULL;
    #define CREATE_stream_82  if (stream_82 == NULL) {stream_82 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 82"); } 
    stream_105   = NULL;
    #define CREATE_stream_105  if (stream_105 == NULL) {stream_105 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 105"); } 
    stream_104   = NULL;
    #define CREATE_stream_104  if (stream_104 == NULL) {stream_104 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 104"); } 
    stream_103   = NULL;
    #define CREATE_stream_103  if (stream_103 == NULL) {stream_103 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 103"); } 
    stream_99   = NULL;
    #define CREATE_stream_99  if (stream_99 == NULL) {stream_99 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 99"); } 
    stream_102   = NULL;
    #define CREATE_stream_102  if (stream_102 == NULL) {stream_102 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 102"); } 
    stream_101   = NULL;
    #define CREATE_stream_101  if (stream_101 == NULL) {stream_101 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 101"); } 
    stream_100   = NULL;
    #define CREATE_stream_100  if (stream_100 == NULL) {stream_100 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 100"); } 
    stream_assignment_expr   = NULL;
    #define CREATE_stream_assignment_expr  if (stream_assignment_expr == NULL) {stream_assignment_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignment_expr"); }
    stream_conditional_expr   = NULL;
    #define CREATE_stream_conditional_expr  if (stream_conditional_expr == NULL) {stream_conditional_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditional_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:230:2: ( conditional_expr ( -> conditional_expr | ( '=' assignment_expr -> ^( OP_ASSIGN conditional_expr assignment_expr ) ) | ( '+=' assignment_expr -> ^( OP_ADD_ASSIGN conditional_expr assignment_expr ) ) | ( '-=' assignment_expr -> ^( OP_SUB_ASSIGN conditional_expr assignment_expr ) ) | ( '*=' assignment_expr -> ^( OP_MUL_ASSIGN conditional_expr assignment_expr ) ) | ( '/=' assignment_expr -> ^( OP_DIV_ASSIGN conditional_expr assignment_expr ) ) | ( '%=' assignment_expr -> ^( OP_MOD_ASSIGN conditional_expr assignment_expr ) ) | ( '<<=' assignment_expr -> ^( OP_SHIFT_LEFT_ASSIGN conditional_expr assignment_expr ) ) | ( '>>=' assignment_expr -> ^( OP_SHIFT_RIGHT_ASSIGN conditional_expr assignment_expr ) ) | ( '&=' assignment_expr -> ^( OP_AND_ASSIGN conditional_expr assignment_expr ) ) | ( '|=' assignment_expr -> ^( OP_OR_ASSIGN conditional_expr assignment_expr ) ) | ( '^=' assignment_expr -> ^( OP_XOR_ASSIGN conditional_expr assignment_expr ) ) ) )
        // grunt.g:230:4: conditional_expr ( -> conditional_expr | ( '=' assignment_expr -> ^( OP_ASSIGN conditional_expr assignment_expr ) ) | ( '+=' assignment_expr -> ^( OP_ADD_ASSIGN conditional_expr assignment_expr ) ) | ( '-=' assignment_expr -> ^( OP_SUB_ASSIGN conditional_expr assignment_expr ) ) | ( '*=' assignment_expr -> ^( OP_MUL_ASSIGN conditional_expr assignment_expr ) ) | ( '/=' assignment_expr -> ^( OP_DIV_ASSIGN conditional_expr assignment_expr ) ) | ( '%=' assignment_expr -> ^( OP_MOD_ASSIGN conditional_expr assignment_expr ) ) | ( '<<=' assignment_expr -> ^( OP_SHIFT_LEFT_ASSIGN conditional_expr assignment_expr ) ) | ( '>>=' assignment_expr -> ^( OP_SHIFT_RIGHT_ASSIGN conditional_expr assignment_expr ) ) | ( '&=' assignment_expr -> ^( OP_AND_ASSIGN conditional_expr assignment_expr ) ) | ( '|=' assignment_expr -> ^( OP_OR_ASSIGN conditional_expr assignment_expr ) ) | ( '^=' assignment_expr -> ^( OP_XOR_ASSIGN conditional_expr assignment_expr ) ) )
        {
            FOLLOWPUSH(FOLLOW_conditional_expr_in_assignment_expr1078);
            conditional_expr87=conditional_expr(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignment_exprEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_conditional_expr; stream_conditional_expr->add(stream_conditional_expr, conditional_expr87.tree, NULL); }

            // grunt.g:230:21: ( -> conditional_expr | ( '=' assignment_expr -> ^( OP_ASSIGN conditional_expr assignment_expr ) ) | ( '+=' assignment_expr -> ^( OP_ADD_ASSIGN conditional_expr assignment_expr ) ) | ( '-=' assignment_expr -> ^( OP_SUB_ASSIGN conditional_expr assignment_expr ) ) | ( '*=' assignment_expr -> ^( OP_MUL_ASSIGN conditional_expr assignment_expr ) ) | ( '/=' assignment_expr -> ^( OP_DIV_ASSIGN conditional_expr assignment_expr ) ) | ( '%=' assignment_expr -> ^( OP_MOD_ASSIGN conditional_expr assignment_expr ) ) | ( '<<=' assignment_expr -> ^( OP_SHIFT_LEFT_ASSIGN conditional_expr assignment_expr ) ) | ( '>>=' assignment_expr -> ^( OP_SHIFT_RIGHT_ASSIGN conditional_expr assignment_expr ) ) | ( '&=' assignment_expr -> ^( OP_AND_ASSIGN conditional_expr assignment_expr ) ) | ( '|=' assignment_expr -> ^( OP_OR_ASSIGN conditional_expr assignment_expr ) ) | ( '^=' assignment_expr -> ^( OP_XOR_ASSIGN conditional_expr assignment_expr ) ) )
            {
                int alt21=12;
                switch ( LA(1) ) 
                {
                case 77:
                case 83:
                case 87:
                case 91:
                case 93:
                case 133:
                	{
                		alt21=1;
                	}
                    break;
                case 82:
                	{
                		alt21=2;
                	}
                    break;
                case 98:
                	{
                		alt21=3;
                	}
                    break;
                case 99:
                	{
                		alt21=4;
                	}
                    break;
                case 100:
                	{
                		alt21=5;
                	}
                    break;
                case 101:
                	{
                		alt21=6;
                	}
                    break;
                case 102:
                	{
                		alt21=7;
                	}
                    break;
                case 103:
                	{
                		alt21=8;
                	}
                    break;
                case 104:
                	{
                		alt21=9;
                	}
                    break;
                case 105:
                	{
                		alt21=10;
                	}
                    break;
                case 106:
                	{
                		alt21=11;
                	}
                    break;
                case 107:
                	{
                		alt21=12;
                	}
                    break;

                default:
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 21;
                    EXCEPTION->state        = 0;


                    goto ruleassignment_exprEx;
                }

                switch (alt21) 
                {
            	case 1:
            	    // grunt.g:231:5: 
            	    {
            	         
            	        /* AST REWRITE
            	         * elements          : conditional_expr
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 231:5: -> conditional_expr
            	        	{
            	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_conditional_expr == NULL ? NULL : stream_conditional_expr->nextTree(stream_conditional_expr));

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // grunt.g:232:6: ( '=' assignment_expr -> ^( OP_ASSIGN conditional_expr assignment_expr ) )
            	    {
            	        // grunt.g:232:6: ( '=' assignment_expr -> ^( OP_ASSIGN conditional_expr assignment_expr ) )
            	        // grunt.g:232:7: '=' assignment_expr
            	        {
            	            char_literal88 = (pANTLR3_COMMON_TOKEN) MATCHT(82, &FOLLOW_82_in_assignment_expr1096); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_82; stream_82->add(stream_82, char_literal88, NULL); }

            	            FOLLOWPUSH(FOLLOW_assignment_expr_in_assignment_expr1098);
            	            assignment_expr89=assignment_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignment_expr; stream_assignment_expr->add(stream_assignment_expr, assignment_expr89.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : assignment_expr, conditional_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 232:27: -> ^( OP_ASSIGN conditional_expr assignment_expr )
            	            	{
            	            	    // grunt.g:232:30: ^( OP_ASSIGN conditional_expr assignment_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_ASSIGN, (pANTLR3_UINT8)"OP_ASSIGN"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditional_expr == NULL ? NULL : stream_conditional_expr->nextTree(stream_conditional_expr));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignment_expr == NULL ? NULL : stream_assignment_expr->nextTree(stream_assignment_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 3:
            	    // grunt.g:233:6: ( '+=' assignment_expr -> ^( OP_ADD_ASSIGN conditional_expr assignment_expr ) )
            	    {
            	        // grunt.g:233:6: ( '+=' assignment_expr -> ^( OP_ADD_ASSIGN conditional_expr assignment_expr ) )
            	        // grunt.g:233:7: '+=' assignment_expr
            	        {
            	            string_literal90 = (pANTLR3_COMMON_TOKEN) MATCHT(98, &FOLLOW_98_in_assignment_expr1117); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_98; stream_98->add(stream_98, string_literal90, NULL); }

            	            FOLLOWPUSH(FOLLOW_assignment_expr_in_assignment_expr1119);
            	            assignment_expr91=assignment_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignment_expr; stream_assignment_expr->add(stream_assignment_expr, assignment_expr91.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : conditional_expr, assignment_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 233:28: -> ^( OP_ADD_ASSIGN conditional_expr assignment_expr )
            	            	{
            	            	    // grunt.g:233:31: ^( OP_ADD_ASSIGN conditional_expr assignment_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_ADD_ASSIGN, (pANTLR3_UINT8)"OP_ADD_ASSIGN"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditional_expr == NULL ? NULL : stream_conditional_expr->nextTree(stream_conditional_expr));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignment_expr == NULL ? NULL : stream_assignment_expr->nextTree(stream_assignment_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 4:
            	    // grunt.g:234:6: ( '-=' assignment_expr -> ^( OP_SUB_ASSIGN conditional_expr assignment_expr ) )
            	    {
            	        // grunt.g:234:6: ( '-=' assignment_expr -> ^( OP_SUB_ASSIGN conditional_expr assignment_expr ) )
            	        // grunt.g:234:7: '-=' assignment_expr
            	        {
            	            string_literal92 = (pANTLR3_COMMON_TOKEN) MATCHT(99, &FOLLOW_99_in_assignment_expr1138); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_99; stream_99->add(stream_99, string_literal92, NULL); }

            	            FOLLOWPUSH(FOLLOW_assignment_expr_in_assignment_expr1140);
            	            assignment_expr93=assignment_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignment_expr; stream_assignment_expr->add(stream_assignment_expr, assignment_expr93.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : conditional_expr, assignment_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 234:28: -> ^( OP_SUB_ASSIGN conditional_expr assignment_expr )
            	            	{
            	            	    // grunt.g:234:31: ^( OP_SUB_ASSIGN conditional_expr assignment_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_SUB_ASSIGN, (pANTLR3_UINT8)"OP_SUB_ASSIGN"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditional_expr == NULL ? NULL : stream_conditional_expr->nextTree(stream_conditional_expr));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignment_expr == NULL ? NULL : stream_assignment_expr->nextTree(stream_assignment_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 5:
            	    // grunt.g:235:6: ( '*=' assignment_expr -> ^( OP_MUL_ASSIGN conditional_expr assignment_expr ) )
            	    {
            	        // grunt.g:235:6: ( '*=' assignment_expr -> ^( OP_MUL_ASSIGN conditional_expr assignment_expr ) )
            	        // grunt.g:235:7: '*=' assignment_expr
            	        {
            	            string_literal94 = (pANTLR3_COMMON_TOKEN) MATCHT(100, &FOLLOW_100_in_assignment_expr1159); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_100; stream_100->add(stream_100, string_literal94, NULL); }

            	            FOLLOWPUSH(FOLLOW_assignment_expr_in_assignment_expr1161);
            	            assignment_expr95=assignment_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignment_expr; stream_assignment_expr->add(stream_assignment_expr, assignment_expr95.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : assignment_expr, conditional_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 235:28: -> ^( OP_MUL_ASSIGN conditional_expr assignment_expr )
            	            	{
            	            	    // grunt.g:235:31: ^( OP_MUL_ASSIGN conditional_expr assignment_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_MUL_ASSIGN, (pANTLR3_UINT8)"OP_MUL_ASSIGN"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditional_expr == NULL ? NULL : stream_conditional_expr->nextTree(stream_conditional_expr));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignment_expr == NULL ? NULL : stream_assignment_expr->nextTree(stream_assignment_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 6:
            	    // grunt.g:236:6: ( '/=' assignment_expr -> ^( OP_DIV_ASSIGN conditional_expr assignment_expr ) )
            	    {
            	        // grunt.g:236:6: ( '/=' assignment_expr -> ^( OP_DIV_ASSIGN conditional_expr assignment_expr ) )
            	        // grunt.g:236:7: '/=' assignment_expr
            	        {
            	            string_literal96 = (pANTLR3_COMMON_TOKEN) MATCHT(101, &FOLLOW_101_in_assignment_expr1180); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_101; stream_101->add(stream_101, string_literal96, NULL); }

            	            FOLLOWPUSH(FOLLOW_assignment_expr_in_assignment_expr1182);
            	            assignment_expr97=assignment_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignment_expr; stream_assignment_expr->add(stream_assignment_expr, assignment_expr97.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : conditional_expr, assignment_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 236:28: -> ^( OP_DIV_ASSIGN conditional_expr assignment_expr )
            	            	{
            	            	    // grunt.g:236:31: ^( OP_DIV_ASSIGN conditional_expr assignment_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_DIV_ASSIGN, (pANTLR3_UINT8)"OP_DIV_ASSIGN"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditional_expr == NULL ? NULL : stream_conditional_expr->nextTree(stream_conditional_expr));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignment_expr == NULL ? NULL : stream_assignment_expr->nextTree(stream_assignment_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 7:
            	    // grunt.g:237:6: ( '%=' assignment_expr -> ^( OP_MOD_ASSIGN conditional_expr assignment_expr ) )
            	    {
            	        // grunt.g:237:6: ( '%=' assignment_expr -> ^( OP_MOD_ASSIGN conditional_expr assignment_expr ) )
            	        // grunt.g:237:7: '%=' assignment_expr
            	        {
            	            string_literal98 = (pANTLR3_COMMON_TOKEN) MATCHT(102, &FOLLOW_102_in_assignment_expr1201); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_102; stream_102->add(stream_102, string_literal98, NULL); }

            	            FOLLOWPUSH(FOLLOW_assignment_expr_in_assignment_expr1203);
            	            assignment_expr99=assignment_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignment_expr; stream_assignment_expr->add(stream_assignment_expr, assignment_expr99.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : conditional_expr, assignment_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 237:28: -> ^( OP_MOD_ASSIGN conditional_expr assignment_expr )
            	            	{
            	            	    // grunt.g:237:31: ^( OP_MOD_ASSIGN conditional_expr assignment_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_MOD_ASSIGN, (pANTLR3_UINT8)"OP_MOD_ASSIGN"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditional_expr == NULL ? NULL : stream_conditional_expr->nextTree(stream_conditional_expr));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignment_expr == NULL ? NULL : stream_assignment_expr->nextTree(stream_assignment_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 8:
            	    // grunt.g:238:6: ( '<<=' assignment_expr -> ^( OP_SHIFT_LEFT_ASSIGN conditional_expr assignment_expr ) )
            	    {
            	        // grunt.g:238:6: ( '<<=' assignment_expr -> ^( OP_SHIFT_LEFT_ASSIGN conditional_expr assignment_expr ) )
            	        // grunt.g:238:7: '<<=' assignment_expr
            	        {
            	            string_literal100 = (pANTLR3_COMMON_TOKEN) MATCHT(103, &FOLLOW_103_in_assignment_expr1222); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_103; stream_103->add(stream_103, string_literal100, NULL); }

            	            FOLLOWPUSH(FOLLOW_assignment_expr_in_assignment_expr1224);
            	            assignment_expr101=assignment_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignment_expr; stream_assignment_expr->add(stream_assignment_expr, assignment_expr101.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : conditional_expr, assignment_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 238:29: -> ^( OP_SHIFT_LEFT_ASSIGN conditional_expr assignment_expr )
            	            	{
            	            	    // grunt.g:238:32: ^( OP_SHIFT_LEFT_ASSIGN conditional_expr assignment_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_SHIFT_LEFT_ASSIGN, (pANTLR3_UINT8)"OP_SHIFT_LEFT_ASSIGN"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditional_expr == NULL ? NULL : stream_conditional_expr->nextTree(stream_conditional_expr));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignment_expr == NULL ? NULL : stream_assignment_expr->nextTree(stream_assignment_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 9:
            	    // grunt.g:239:6: ( '>>=' assignment_expr -> ^( OP_SHIFT_RIGHT_ASSIGN conditional_expr assignment_expr ) )
            	    {
            	        // grunt.g:239:6: ( '>>=' assignment_expr -> ^( OP_SHIFT_RIGHT_ASSIGN conditional_expr assignment_expr ) )
            	        // grunt.g:239:7: '>>=' assignment_expr
            	        {
            	            string_literal102 = (pANTLR3_COMMON_TOKEN) MATCHT(104, &FOLLOW_104_in_assignment_expr1243); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_104; stream_104->add(stream_104, string_literal102, NULL); }

            	            FOLLOWPUSH(FOLLOW_assignment_expr_in_assignment_expr1245);
            	            assignment_expr103=assignment_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignment_expr; stream_assignment_expr->add(stream_assignment_expr, assignment_expr103.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : assignment_expr, conditional_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 239:29: -> ^( OP_SHIFT_RIGHT_ASSIGN conditional_expr assignment_expr )
            	            	{
            	            	    // grunt.g:239:32: ^( OP_SHIFT_RIGHT_ASSIGN conditional_expr assignment_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_SHIFT_RIGHT_ASSIGN, (pANTLR3_UINT8)"OP_SHIFT_RIGHT_ASSIGN"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditional_expr == NULL ? NULL : stream_conditional_expr->nextTree(stream_conditional_expr));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignment_expr == NULL ? NULL : stream_assignment_expr->nextTree(stream_assignment_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 10:
            	    // grunt.g:240:6: ( '&=' assignment_expr -> ^( OP_AND_ASSIGN conditional_expr assignment_expr ) )
            	    {
            	        // grunt.g:240:6: ( '&=' assignment_expr -> ^( OP_AND_ASSIGN conditional_expr assignment_expr ) )
            	        // grunt.g:240:7: '&=' assignment_expr
            	        {
            	            string_literal104 = (pANTLR3_COMMON_TOKEN) MATCHT(105, &FOLLOW_105_in_assignment_expr1264); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_105; stream_105->add(stream_105, string_literal104, NULL); }

            	            FOLLOWPUSH(FOLLOW_assignment_expr_in_assignment_expr1266);
            	            assignment_expr105=assignment_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignment_expr; stream_assignment_expr->add(stream_assignment_expr, assignment_expr105.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : assignment_expr, conditional_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 240:28: -> ^( OP_AND_ASSIGN conditional_expr assignment_expr )
            	            	{
            	            	    // grunt.g:240:31: ^( OP_AND_ASSIGN conditional_expr assignment_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_AND_ASSIGN, (pANTLR3_UINT8)"OP_AND_ASSIGN"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditional_expr == NULL ? NULL : stream_conditional_expr->nextTree(stream_conditional_expr));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignment_expr == NULL ? NULL : stream_assignment_expr->nextTree(stream_assignment_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 11:
            	    // grunt.g:241:6: ( '|=' assignment_expr -> ^( OP_OR_ASSIGN conditional_expr assignment_expr ) )
            	    {
            	        // grunt.g:241:6: ( '|=' assignment_expr -> ^( OP_OR_ASSIGN conditional_expr assignment_expr ) )
            	        // grunt.g:241:7: '|=' assignment_expr
            	        {
            	            string_literal106 = (pANTLR3_COMMON_TOKEN) MATCHT(106, &FOLLOW_106_in_assignment_expr1285); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_106; stream_106->add(stream_106, string_literal106, NULL); }

            	            FOLLOWPUSH(FOLLOW_assignment_expr_in_assignment_expr1287);
            	            assignment_expr107=assignment_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignment_expr; stream_assignment_expr->add(stream_assignment_expr, assignment_expr107.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : conditional_expr, assignment_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 241:28: -> ^( OP_OR_ASSIGN conditional_expr assignment_expr )
            	            	{
            	            	    // grunt.g:241:31: ^( OP_OR_ASSIGN conditional_expr assignment_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_OR_ASSIGN, (pANTLR3_UINT8)"OP_OR_ASSIGN"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditional_expr == NULL ? NULL : stream_conditional_expr->nextTree(stream_conditional_expr));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignment_expr == NULL ? NULL : stream_assignment_expr->nextTree(stream_assignment_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 12:
            	    // grunt.g:242:6: ( '^=' assignment_expr -> ^( OP_XOR_ASSIGN conditional_expr assignment_expr ) )
            	    {
            	        // grunt.g:242:6: ( '^=' assignment_expr -> ^( OP_XOR_ASSIGN conditional_expr assignment_expr ) )
            	        // grunt.g:242:7: '^=' assignment_expr
            	        {
            	            string_literal108 = (pANTLR3_COMMON_TOKEN) MATCHT(107, &FOLLOW_107_in_assignment_expr1306); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_107; stream_107->add(stream_107, string_literal108, NULL); }

            	            FOLLOWPUSH(FOLLOW_assignment_expr_in_assignment_expr1308);
            	            assignment_expr109=assignment_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleassignment_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignment_expr; stream_assignment_expr->add(stream_assignment_expr, assignment_expr109.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : conditional_expr, assignment_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 242:28: -> ^( OP_XOR_ASSIGN conditional_expr assignment_expr )
            	            	{
            	            	    // grunt.g:242:31: ^( OP_XOR_ASSIGN conditional_expr assignment_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_XOR_ASSIGN, (pANTLR3_UINT8)"OP_XOR_ASSIGN"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditional_expr == NULL ? NULL : stream_conditional_expr->nextTree(stream_conditional_expr));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignment_expr == NULL ? NULL : stream_assignment_expr->nextTree(stream_assignment_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignment_exprEx; /* Prevent compiler warnings */
    ruleassignment_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_98 != NULL) stream_98->free(stream_98);
        if (stream_107 != NULL) stream_107->free(stream_107);
        if (stream_106 != NULL) stream_106->free(stream_106);
        if (stream_82 != NULL) stream_82->free(stream_82);
        if (stream_105 != NULL) stream_105->free(stream_105);
        if (stream_104 != NULL) stream_104->free(stream_104);
        if (stream_103 != NULL) stream_103->free(stream_103);
        if (stream_99 != NULL) stream_99->free(stream_99);
        if (stream_102 != NULL) stream_102->free(stream_102);
        if (stream_101 != NULL) stream_101->free(stream_101);
        if (stream_100 != NULL) stream_100->free(stream_100);
        if (stream_assignment_expr != NULL) stream_assignment_expr->free(stream_assignment_expr);
        if (stream_conditional_expr != NULL) stream_conditional_expr->free(stream_conditional_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end assignment_expr */

/** 
 * $ANTLR start conditional_expr
 * grunt.g:246:1: conditional_expr : ( logical_or_expr -> logical_or_expr ) ( '?' expr ':' conditional_expr -> ^( OP_CONDITIONAL logical_or_expr expr conditional_expr ) )? ;
 */
static gruntParser_conditional_expr_return
conditional_expr(pgruntParser ctx)
{   
    gruntParser_conditional_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal111;
    pANTLR3_COMMON_TOKEN    char_literal113;
    gruntParser_logical_or_expr_return logical_or_expr110;
    #undef	RETURN_TYPE_logical_or_expr110
    #define	RETURN_TYPE_logical_or_expr110 gruntParser_logical_or_expr_return

    gruntParser_expr_return expr112;
    #undef	RETURN_TYPE_expr112
    #define	RETURN_TYPE_expr112 gruntParser_expr_return

    gruntParser_conditional_expr_return conditional_expr114;
    #undef	RETURN_TYPE_conditional_expr114
    #define	RETURN_TYPE_conditional_expr114 gruntParser_conditional_expr_return

    pANTLR3_BASE_TREE char_literal111_tree;
    pANTLR3_BASE_TREE char_literal113_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_93;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_108;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logical_or_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditional_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal111       = NULL;
    char_literal113       = NULL;
    logical_or_expr110.tree = NULL;

    expr112.tree = NULL;

    conditional_expr114.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal111_tree   = NULL;
    char_literal113_tree   = NULL;

    stream_93   = NULL;
    #define CREATE_stream_93  if (stream_93 == NULL) {stream_93 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 93"); } 
    stream_108   = NULL;
    #define CREATE_stream_108  if (stream_108 == NULL) {stream_108 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 108"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_logical_or_expr   = NULL;
    #define CREATE_stream_logical_or_expr  if (stream_logical_or_expr == NULL) {stream_logical_or_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logical_or_expr"); }
    stream_conditional_expr   = NULL;
    #define CREATE_stream_conditional_expr  if (stream_conditional_expr == NULL) {stream_conditional_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditional_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:247:2: ( ( logical_or_expr -> logical_or_expr ) ( '?' expr ':' conditional_expr -> ^( OP_CONDITIONAL logical_or_expr expr conditional_expr ) )? )
        // grunt.g:247:4: ( logical_or_expr -> logical_or_expr ) ( '?' expr ':' conditional_expr -> ^( OP_CONDITIONAL logical_or_expr expr conditional_expr ) )?
        {
            // grunt.g:247:4: ( logical_or_expr -> logical_or_expr )
            // grunt.g:247:5: logical_or_expr
            {
                FOLLOWPUSH(FOLLOW_logical_or_expr_in_conditional_expr1335);
                logical_or_expr110=logical_or_expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconditional_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logical_or_expr; stream_logical_or_expr->add(stream_logical_or_expr, logical_or_expr110.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logical_or_expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 247:21: -> logical_or_expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logical_or_expr == NULL ? NULL : stream_logical_or_expr->nextTree(stream_logical_or_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:247:41: ( '?' expr ':' conditional_expr -> ^( OP_CONDITIONAL logical_or_expr expr conditional_expr ) )?
            {
                int alt22=2;
                {
                    int LA22_0 = LA(1);
                    if ( (LA22_0 == 108) ) 
                    {
                        alt22=1;
                    }
                }
                switch (alt22) 
                {
            	case 1:
            	    // grunt.g:247:42: '?' expr ':' conditional_expr
            	    {
            	        char_literal111 = (pANTLR3_COMMON_TOKEN) MATCHT(108, &FOLLOW_108_in_conditional_expr1343); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditional_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_108; stream_108->add(stream_108, char_literal111, NULL); }

            	        FOLLOWPUSH(FOLLOW_expr_in_conditional_expr1345);
            	        expr112=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditional_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr112.tree, NULL); }
            	        char_literal113 = (pANTLR3_COMMON_TOKEN) MATCHT(93, &FOLLOW_93_in_conditional_expr1347); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditional_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_93; stream_93->add(stream_93, char_literal113, NULL); }

            	        FOLLOWPUSH(FOLLOW_conditional_expr_in_conditional_expr1349);
            	        conditional_expr114=conditional_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditional_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_conditional_expr; stream_conditional_expr->add(stream_conditional_expr, conditional_expr114.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr, conditional_expr, logical_or_expr
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 247:72: -> ^( OP_CONDITIONAL logical_or_expr expr conditional_expr )
            	        	{
            	        	    // grunt.g:247:75: ^( OP_CONDITIONAL logical_or_expr expr conditional_expr )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_CONDITIONAL, (pANTLR3_UINT8)"OP_CONDITIONAL"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logical_or_expr == NULL ? NULL : stream_logical_or_expr->nextTree(stream_logical_or_expr));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditional_expr == NULL ? NULL : stream_conditional_expr->nextTree(stream_conditional_expr));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditional_exprEx; /* Prevent compiler warnings */
    ruleconditional_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_93 != NULL) stream_93->free(stream_93);
        if (stream_108 != NULL) stream_108->free(stream_108);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_logical_or_expr != NULL) stream_logical_or_expr->free(stream_logical_or_expr);
        if (stream_conditional_expr != NULL) stream_conditional_expr->free(stream_conditional_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end conditional_expr */

/** 
 * $ANTLR start logical_or_expr
 * grunt.g:250:1: logical_or_expr : ( logical_and_expr -> logical_and_expr ) ( '||' logical_and_expr -> ^( OP_LOGICAL_OR $logical_or_expr logical_and_expr ) )* ;
 */
static gruntParser_logical_or_expr_return
logical_or_expr(pgruntParser ctx)
{   
    gruntParser_logical_or_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal116;
    gruntParser_logical_and_expr_return logical_and_expr115;
    #undef	RETURN_TYPE_logical_and_expr115
    #define	RETURN_TYPE_logical_and_expr115 gruntParser_logical_and_expr_return

    gruntParser_logical_and_expr_return logical_and_expr117;
    #undef	RETURN_TYPE_logical_and_expr117
    #define	RETURN_TYPE_logical_and_expr117 gruntParser_logical_and_expr_return

    pANTLR3_BASE_TREE string_literal116_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_109;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logical_and_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal116       = NULL;
    logical_and_expr115.tree = NULL;

    logical_and_expr117.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal116_tree   = NULL;

    stream_109   = NULL;
    #define CREATE_stream_109  if (stream_109 == NULL) {stream_109 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 109"); } 
    stream_logical_and_expr   = NULL;
    #define CREATE_stream_logical_and_expr  if (stream_logical_and_expr == NULL) {stream_logical_and_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logical_and_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:251:2: ( ( logical_and_expr -> logical_and_expr ) ( '||' logical_and_expr -> ^( OP_LOGICAL_OR $logical_or_expr logical_and_expr ) )* )
        // grunt.g:251:4: ( logical_and_expr -> logical_and_expr ) ( '||' logical_and_expr -> ^( OP_LOGICAL_OR $logical_or_expr logical_and_expr ) )*
        {
            // grunt.g:251:4: ( logical_and_expr -> logical_and_expr )
            // grunt.g:251:5: logical_and_expr
            {
                FOLLOWPUSH(FOLLOW_logical_and_expr_in_logical_or_expr1375);
                logical_and_expr115=logical_and_expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogical_or_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logical_and_expr; stream_logical_and_expr->add(stream_logical_and_expr, logical_and_expr115.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logical_and_expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 251:22: -> logical_and_expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logical_and_expr == NULL ? NULL : stream_logical_and_expr->nextTree(stream_logical_and_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:251:43: ( '||' logical_and_expr -> ^( OP_LOGICAL_OR $logical_or_expr logical_and_expr ) )*

            for (;;)
            {
                int alt23=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA23_0 = LA(1);
                    if ( (LA23_0 == 109) ) 
                    {
                        alt23=1;
                    }

                }
                switch (alt23) 
                {
            	case 1:
            	    // grunt.g:251:44: '||' logical_and_expr
            	    {
            	        string_literal116 = (pANTLR3_COMMON_TOKEN) MATCHT(109, &FOLLOW_109_in_logical_or_expr1383); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_or_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_109; stream_109->add(stream_109, string_literal116, NULL); }

            	        FOLLOWPUSH(FOLLOW_logical_and_expr_in_logical_or_expr1385);
            	        logical_and_expr117=logical_and_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_or_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logical_and_expr; stream_logical_and_expr->add(stream_logical_and_expr, logical_and_expr117.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logical_and_expr, logical_or_expr
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 251:66: -> ^( OP_LOGICAL_OR $logical_or_expr logical_and_expr )
            	        	{
            	        	    // grunt.g:251:69: ^( OP_LOGICAL_OR $logical_or_expr logical_and_expr )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_LOGICAL_OR, (pANTLR3_UINT8)"OP_LOGICAL_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logical_and_expr == NULL ? NULL : stream_logical_and_expr->nextTree(stream_logical_and_expr));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop23;	/* break out of the loop */
            	    break;
                }
            }
            loop23: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogical_or_exprEx; /* Prevent compiler warnings */
    rulelogical_or_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_109 != NULL) stream_109->free(stream_109);
        if (stream_logical_and_expr != NULL) stream_logical_and_expr->free(stream_logical_and_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end logical_or_expr */

/** 
 * $ANTLR start logical_and_expr
 * grunt.g:254:1: logical_and_expr : ( bitwise_or_expr -> bitwise_or_expr ) ( '&&' bitwise_or_expr -> ^( OP_LOGICAL_AND $logical_and_expr bitwise_or_expr ) )* ;
 */
static gruntParser_logical_and_expr_return
logical_and_expr(pgruntParser ctx)
{   
    gruntParser_logical_and_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal119;
    gruntParser_bitwise_or_expr_return bitwise_or_expr118;
    #undef	RETURN_TYPE_bitwise_or_expr118
    #define	RETURN_TYPE_bitwise_or_expr118 gruntParser_bitwise_or_expr_return

    gruntParser_bitwise_or_expr_return bitwise_or_expr120;
    #undef	RETURN_TYPE_bitwise_or_expr120
    #define	RETURN_TYPE_bitwise_or_expr120 gruntParser_bitwise_or_expr_return

    pANTLR3_BASE_TREE string_literal119_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_110;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwise_or_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal119       = NULL;
    bitwise_or_expr118.tree = NULL;

    bitwise_or_expr120.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal119_tree   = NULL;

    stream_110   = NULL;
    #define CREATE_stream_110  if (stream_110 == NULL) {stream_110 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 110"); } 
    stream_bitwise_or_expr   = NULL;
    #define CREATE_stream_bitwise_or_expr  if (stream_bitwise_or_expr == NULL) {stream_bitwise_or_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwise_or_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:255:2: ( ( bitwise_or_expr -> bitwise_or_expr ) ( '&&' bitwise_or_expr -> ^( OP_LOGICAL_AND $logical_and_expr bitwise_or_expr ) )* )
        // grunt.g:255:4: ( bitwise_or_expr -> bitwise_or_expr ) ( '&&' bitwise_or_expr -> ^( OP_LOGICAL_AND $logical_and_expr bitwise_or_expr ) )*
        {
            // grunt.g:255:4: ( bitwise_or_expr -> bitwise_or_expr )
            // grunt.g:255:5: bitwise_or_expr
            {
                FOLLOWPUSH(FOLLOW_bitwise_or_expr_in_logical_and_expr1410);
                bitwise_or_expr118=bitwise_or_expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogical_and_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwise_or_expr; stream_bitwise_or_expr->add(stream_bitwise_or_expr, bitwise_or_expr118.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwise_or_expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 255:21: -> bitwise_or_expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwise_or_expr == NULL ? NULL : stream_bitwise_or_expr->nextTree(stream_bitwise_or_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:255:41: ( '&&' bitwise_or_expr -> ^( OP_LOGICAL_AND $logical_and_expr bitwise_or_expr ) )*

            for (;;)
            {
                int alt24=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA24_0 = LA(1);
                    if ( (LA24_0 == 110) ) 
                    {
                        alt24=1;
                    }

                }
                switch (alt24) 
                {
            	case 1:
            	    // grunt.g:255:42: '&&' bitwise_or_expr
            	    {
            	        string_literal119 = (pANTLR3_COMMON_TOKEN) MATCHT(110, &FOLLOW_110_in_logical_and_expr1418); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_and_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_110; stream_110->add(stream_110, string_literal119, NULL); }

            	        FOLLOWPUSH(FOLLOW_bitwise_or_expr_in_logical_and_expr1420);
            	        bitwise_or_expr120=bitwise_or_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_and_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwise_or_expr; stream_bitwise_or_expr->add(stream_bitwise_or_expr, bitwise_or_expr120.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwise_or_expr, logical_and_expr
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 255:63: -> ^( OP_LOGICAL_AND $logical_and_expr bitwise_or_expr )
            	        	{
            	        	    // grunt.g:255:66: ^( OP_LOGICAL_AND $logical_and_expr bitwise_or_expr )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_LOGICAL_AND, (pANTLR3_UINT8)"OP_LOGICAL_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwise_or_expr == NULL ? NULL : stream_bitwise_or_expr->nextTree(stream_bitwise_or_expr));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop24;	/* break out of the loop */
            	    break;
                }
            }
            loop24: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogical_and_exprEx; /* Prevent compiler warnings */
    rulelogical_and_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_110 != NULL) stream_110->free(stream_110);
        if (stream_bitwise_or_expr != NULL) stream_bitwise_or_expr->free(stream_bitwise_or_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end logical_and_expr */

/** 
 * $ANTLR start bitwise_or_expr
 * grunt.g:258:1: bitwise_or_expr : ( bitwise_xor_expr -> bitwise_xor_expr ) ( '|' bitwise_xor_expr -> ^( OP_BITWISE_OR $bitwise_or_expr bitwise_xor_expr ) )* ;
 */
static gruntParser_bitwise_or_expr_return
bitwise_or_expr(pgruntParser ctx)
{   
    gruntParser_bitwise_or_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal122;
    gruntParser_bitwise_xor_expr_return bitwise_xor_expr121;
    #undef	RETURN_TYPE_bitwise_xor_expr121
    #define	RETURN_TYPE_bitwise_xor_expr121 gruntParser_bitwise_xor_expr_return

    gruntParser_bitwise_xor_expr_return bitwise_xor_expr123;
    #undef	RETURN_TYPE_bitwise_xor_expr123
    #define	RETURN_TYPE_bitwise_xor_expr123 gruntParser_bitwise_xor_expr_return

    pANTLR3_BASE_TREE char_literal122_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_111;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwise_xor_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal122       = NULL;
    bitwise_xor_expr121.tree = NULL;

    bitwise_xor_expr123.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal122_tree   = NULL;

    stream_111   = NULL;
    #define CREATE_stream_111  if (stream_111 == NULL) {stream_111 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 111"); } 
    stream_bitwise_xor_expr   = NULL;
    #define CREATE_stream_bitwise_xor_expr  if (stream_bitwise_xor_expr == NULL) {stream_bitwise_xor_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwise_xor_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:259:2: ( ( bitwise_xor_expr -> bitwise_xor_expr ) ( '|' bitwise_xor_expr -> ^( OP_BITWISE_OR $bitwise_or_expr bitwise_xor_expr ) )* )
        // grunt.g:259:4: ( bitwise_xor_expr -> bitwise_xor_expr ) ( '|' bitwise_xor_expr -> ^( OP_BITWISE_OR $bitwise_or_expr bitwise_xor_expr ) )*
        {
            // grunt.g:259:4: ( bitwise_xor_expr -> bitwise_xor_expr )
            // grunt.g:259:5: bitwise_xor_expr
            {
                FOLLOWPUSH(FOLLOW_bitwise_xor_expr_in_bitwise_or_expr1445);
                bitwise_xor_expr121=bitwise_xor_expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwise_or_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwise_xor_expr; stream_bitwise_xor_expr->add(stream_bitwise_xor_expr, bitwise_xor_expr121.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwise_xor_expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 259:22: -> bitwise_xor_expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwise_xor_expr == NULL ? NULL : stream_bitwise_xor_expr->nextTree(stream_bitwise_xor_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:259:43: ( '|' bitwise_xor_expr -> ^( OP_BITWISE_OR $bitwise_or_expr bitwise_xor_expr ) )*

            for (;;)
            {
                int alt25=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA25_0 = LA(1);
                    if ( (LA25_0 == 111) ) 
                    {
                        alt25=1;
                    }

                }
                switch (alt25) 
                {
            	case 1:
            	    // grunt.g:259:44: '|' bitwise_xor_expr
            	    {
            	        char_literal122 = (pANTLR3_COMMON_TOKEN) MATCHT(111, &FOLLOW_111_in_bitwise_or_expr1453); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwise_or_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_111; stream_111->add(stream_111, char_literal122, NULL); }

            	        FOLLOWPUSH(FOLLOW_bitwise_xor_expr_in_bitwise_or_expr1455);
            	        bitwise_xor_expr123=bitwise_xor_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwise_or_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwise_xor_expr; stream_bitwise_xor_expr->add(stream_bitwise_xor_expr, bitwise_xor_expr123.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwise_xor_expr, bitwise_or_expr
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 259:65: -> ^( OP_BITWISE_OR $bitwise_or_expr bitwise_xor_expr )
            	        	{
            	        	    // grunt.g:259:68: ^( OP_BITWISE_OR $bitwise_or_expr bitwise_xor_expr )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_BITWISE_OR, (pANTLR3_UINT8)"OP_BITWISE_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwise_xor_expr == NULL ? NULL : stream_bitwise_xor_expr->nextTree(stream_bitwise_xor_expr));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop25;	/* break out of the loop */
            	    break;
                }
            }
            loop25: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwise_or_exprEx; /* Prevent compiler warnings */
    rulebitwise_or_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_111 != NULL) stream_111->free(stream_111);
        if (stream_bitwise_xor_expr != NULL) stream_bitwise_xor_expr->free(stream_bitwise_xor_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end bitwise_or_expr */

/** 
 * $ANTLR start bitwise_xor_expr
 * grunt.g:262:1: bitwise_xor_expr : ( bitwise_and_expr -> bitwise_and_expr ) ( '^' bitwise_and_expr -> ^( OP_BITWISE_XOR $bitwise_xor_expr bitwise_and_expr ) )* ;
 */
static gruntParser_bitwise_xor_expr_return
bitwise_xor_expr(pgruntParser ctx)
{   
    gruntParser_bitwise_xor_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal125;
    gruntParser_bitwise_and_expr_return bitwise_and_expr124;
    #undef	RETURN_TYPE_bitwise_and_expr124
    #define	RETURN_TYPE_bitwise_and_expr124 gruntParser_bitwise_and_expr_return

    gruntParser_bitwise_and_expr_return bitwise_and_expr126;
    #undef	RETURN_TYPE_bitwise_and_expr126
    #define	RETURN_TYPE_bitwise_and_expr126 gruntParser_bitwise_and_expr_return

    pANTLR3_BASE_TREE char_literal125_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_112;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwise_and_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal125       = NULL;
    bitwise_and_expr124.tree = NULL;

    bitwise_and_expr126.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal125_tree   = NULL;

    stream_112   = NULL;
    #define CREATE_stream_112  if (stream_112 == NULL) {stream_112 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 112"); } 
    stream_bitwise_and_expr   = NULL;
    #define CREATE_stream_bitwise_and_expr  if (stream_bitwise_and_expr == NULL) {stream_bitwise_and_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwise_and_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:263:2: ( ( bitwise_and_expr -> bitwise_and_expr ) ( '^' bitwise_and_expr -> ^( OP_BITWISE_XOR $bitwise_xor_expr bitwise_and_expr ) )* )
        // grunt.g:263:4: ( bitwise_and_expr -> bitwise_and_expr ) ( '^' bitwise_and_expr -> ^( OP_BITWISE_XOR $bitwise_xor_expr bitwise_and_expr ) )*
        {
            // grunt.g:263:4: ( bitwise_and_expr -> bitwise_and_expr )
            // grunt.g:263:5: bitwise_and_expr
            {
                FOLLOWPUSH(FOLLOW_bitwise_and_expr_in_bitwise_xor_expr1480);
                bitwise_and_expr124=bitwise_and_expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwise_xor_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwise_and_expr; stream_bitwise_and_expr->add(stream_bitwise_and_expr, bitwise_and_expr124.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwise_and_expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 263:22: -> bitwise_and_expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwise_and_expr == NULL ? NULL : stream_bitwise_and_expr->nextTree(stream_bitwise_and_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:263:43: ( '^' bitwise_and_expr -> ^( OP_BITWISE_XOR $bitwise_xor_expr bitwise_and_expr ) )*

            for (;;)
            {
                int alt26=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA26_0 = LA(1);
                    if ( (LA26_0 == 112) ) 
                    {
                        alt26=1;
                    }

                }
                switch (alt26) 
                {
            	case 1:
            	    // grunt.g:263:44: '^' bitwise_and_expr
            	    {
            	        char_literal125 = (pANTLR3_COMMON_TOKEN) MATCHT(112, &FOLLOW_112_in_bitwise_xor_expr1488); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwise_xor_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_112; stream_112->add(stream_112, char_literal125, NULL); }

            	        FOLLOWPUSH(FOLLOW_bitwise_and_expr_in_bitwise_xor_expr1490);
            	        bitwise_and_expr126=bitwise_and_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwise_xor_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwise_and_expr; stream_bitwise_and_expr->add(stream_bitwise_and_expr, bitwise_and_expr126.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwise_xor_expr, bitwise_and_expr
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 263:65: -> ^( OP_BITWISE_XOR $bitwise_xor_expr bitwise_and_expr )
            	        	{
            	        	    // grunt.g:263:68: ^( OP_BITWISE_XOR $bitwise_xor_expr bitwise_and_expr )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_BITWISE_XOR, (pANTLR3_UINT8)"OP_BITWISE_XOR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwise_and_expr == NULL ? NULL : stream_bitwise_and_expr->nextTree(stream_bitwise_and_expr));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop26;	/* break out of the loop */
            	    break;
                }
            }
            loop26: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwise_xor_exprEx; /* Prevent compiler warnings */
    rulebitwise_xor_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_112 != NULL) stream_112->free(stream_112);
        if (stream_bitwise_and_expr != NULL) stream_bitwise_and_expr->free(stream_bitwise_and_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end bitwise_xor_expr */

/** 
 * $ANTLR start bitwise_and_expr
 * grunt.g:266:1: bitwise_and_expr : ( equality_expr -> equality_expr ) ( '&' equality_expr -> ^( OP_BITWISE_AND $bitwise_and_expr equality_expr ) )* ;
 */
static gruntParser_bitwise_and_expr_return
bitwise_and_expr(pgruntParser ctx)
{   
    gruntParser_bitwise_and_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal128;
    gruntParser_equality_expr_return equality_expr127;
    #undef	RETURN_TYPE_equality_expr127
    #define	RETURN_TYPE_equality_expr127 gruntParser_equality_expr_return

    gruntParser_equality_expr_return equality_expr129;
    #undef	RETURN_TYPE_equality_expr129
    #define	RETURN_TYPE_equality_expr129 gruntParser_equality_expr_return

    pANTLR3_BASE_TREE char_literal128_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_113;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equality_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal128       = NULL;
    equality_expr127.tree = NULL;

    equality_expr129.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal128_tree   = NULL;

    stream_113   = NULL;
    #define CREATE_stream_113  if (stream_113 == NULL) {stream_113 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 113"); } 
    stream_equality_expr   = NULL;
    #define CREATE_stream_equality_expr  if (stream_equality_expr == NULL) {stream_equality_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equality_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:267:2: ( ( equality_expr -> equality_expr ) ( '&' equality_expr -> ^( OP_BITWISE_AND $bitwise_and_expr equality_expr ) )* )
        // grunt.g:267:4: ( equality_expr -> equality_expr ) ( '&' equality_expr -> ^( OP_BITWISE_AND $bitwise_and_expr equality_expr ) )*
        {
            // grunt.g:267:4: ( equality_expr -> equality_expr )
            // grunt.g:267:5: equality_expr
            {
                FOLLOWPUSH(FOLLOW_equality_expr_in_bitwise_and_expr1515);
                equality_expr127=equality_expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwise_and_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equality_expr; stream_equality_expr->add(stream_equality_expr, equality_expr127.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equality_expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 267:19: -> equality_expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equality_expr == NULL ? NULL : stream_equality_expr->nextTree(stream_equality_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:267:37: ( '&' equality_expr -> ^( OP_BITWISE_AND $bitwise_and_expr equality_expr ) )*

            for (;;)
            {
                int alt27=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA27_0 = LA(1);
                    if ( (LA27_0 == 113) ) 
                    {
                        alt27=1;
                    }

                }
                switch (alt27) 
                {
            	case 1:
            	    // grunt.g:267:38: '&' equality_expr
            	    {
            	        char_literal128 = (pANTLR3_COMMON_TOKEN) MATCHT(113, &FOLLOW_113_in_bitwise_and_expr1523); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwise_and_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_113; stream_113->add(stream_113, char_literal128, NULL); }

            	        FOLLOWPUSH(FOLLOW_equality_expr_in_bitwise_and_expr1525);
            	        equality_expr129=equality_expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwise_and_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equality_expr; stream_equality_expr->add(stream_equality_expr, equality_expr129.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwise_and_expr, equality_expr
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 267:56: -> ^( OP_BITWISE_AND $bitwise_and_expr equality_expr )
            	        	{
            	        	    // grunt.g:267:59: ^( OP_BITWISE_AND $bitwise_and_expr equality_expr )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_BITWISE_AND, (pANTLR3_UINT8)"OP_BITWISE_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equality_expr == NULL ? NULL : stream_equality_expr->nextTree(stream_equality_expr));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop27;	/* break out of the loop */
            	    break;
                }
            }
            loop27: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwise_and_exprEx; /* Prevent compiler warnings */
    rulebitwise_and_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_113 != NULL) stream_113->free(stream_113);
        if (stream_equality_expr != NULL) stream_equality_expr->free(stream_equality_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end bitwise_and_expr */

/** 
 * $ANTLR start equality_expr
 * grunt.g:270:1: equality_expr : ( inequality_expr -> inequality_expr ) ( ( '==' inequality_expr -> ^( OP_EQUAL $equality_expr inequality_expr ) ) | ( '!=' inequality_expr -> ^( OP_NOT_EQUAL $equality_expr inequality_expr ) ) )* ;
 */
static gruntParser_equality_expr_return
equality_expr(pgruntParser ctx)
{   
    gruntParser_equality_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal131;
    pANTLR3_COMMON_TOKEN    string_literal133;
    gruntParser_inequality_expr_return inequality_expr130;
    #undef	RETURN_TYPE_inequality_expr130
    #define	RETURN_TYPE_inequality_expr130 gruntParser_inequality_expr_return

    gruntParser_inequality_expr_return inequality_expr132;
    #undef	RETURN_TYPE_inequality_expr132
    #define	RETURN_TYPE_inequality_expr132 gruntParser_inequality_expr_return

    gruntParser_inequality_expr_return inequality_expr134;
    #undef	RETURN_TYPE_inequality_expr134
    #define	RETURN_TYPE_inequality_expr134 gruntParser_inequality_expr_return

    pANTLR3_BASE_TREE string_literal131_tree;
    pANTLR3_BASE_TREE string_literal133_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_114;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_115;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_inequality_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal131       = NULL;
    string_literal133       = NULL;
    inequality_expr130.tree = NULL;

    inequality_expr132.tree = NULL;

    inequality_expr134.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal131_tree   = NULL;
    string_literal133_tree   = NULL;

    stream_114   = NULL;
    #define CREATE_stream_114  if (stream_114 == NULL) {stream_114 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 114"); } 
    stream_115   = NULL;
    #define CREATE_stream_115  if (stream_115 == NULL) {stream_115 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 115"); } 
    stream_inequality_expr   = NULL;
    #define CREATE_stream_inequality_expr  if (stream_inequality_expr == NULL) {stream_inequality_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule inequality_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:271:2: ( ( inequality_expr -> inequality_expr ) ( ( '==' inequality_expr -> ^( OP_EQUAL $equality_expr inequality_expr ) ) | ( '!=' inequality_expr -> ^( OP_NOT_EQUAL $equality_expr inequality_expr ) ) )* )
        // grunt.g:271:4: ( inequality_expr -> inequality_expr ) ( ( '==' inequality_expr -> ^( OP_EQUAL $equality_expr inequality_expr ) ) | ( '!=' inequality_expr -> ^( OP_NOT_EQUAL $equality_expr inequality_expr ) ) )*
        {
            // grunt.g:271:4: ( inequality_expr -> inequality_expr )
            // grunt.g:271:5: inequality_expr
            {
                FOLLOWPUSH(FOLLOW_inequality_expr_in_equality_expr1550);
                inequality_expr130=inequality_expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequality_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_inequality_expr; stream_inequality_expr->add(stream_inequality_expr, inequality_expr130.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : inequality_expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 271:21: -> inequality_expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_inequality_expr == NULL ? NULL : stream_inequality_expr->nextTree(stream_inequality_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:271:41: ( ( '==' inequality_expr -> ^( OP_EQUAL $equality_expr inequality_expr ) ) | ( '!=' inequality_expr -> ^( OP_NOT_EQUAL $equality_expr inequality_expr ) ) )*

            for (;;)
            {
                int alt28=3;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA28_0 = LA(1);
                    if ( (LA28_0 == 114) ) 
                    {
                        alt28=1;
                    }
                    else if ( (LA28_0 == 115) ) 
                    {
                        alt28=2;
                    }

                }
                switch (alt28) 
                {
            	case 1:
            	    // grunt.g:272:5: ( '==' inequality_expr -> ^( OP_EQUAL $equality_expr inequality_expr ) )
            	    {
            	        // grunt.g:272:5: ( '==' inequality_expr -> ^( OP_EQUAL $equality_expr inequality_expr ) )
            	        // grunt.g:272:6: '==' inequality_expr
            	        {
            	            string_literal131 = (pANTLR3_COMMON_TOKEN) MATCHT(114, &FOLLOW_114_in_equality_expr1564); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleequality_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_114; stream_114->add(stream_114, string_literal131, NULL); }

            	            FOLLOWPUSH(FOLLOW_inequality_expr_in_equality_expr1566);
            	            inequality_expr132=inequality_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleequality_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_inequality_expr; stream_inequality_expr->add(stream_inequality_expr, inequality_expr132.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : equality_expr, inequality_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 272:27: -> ^( OP_EQUAL $equality_expr inequality_expr )
            	            	{
            	            	    // grunt.g:272:30: ^( OP_EQUAL $equality_expr inequality_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_EQUAL, (pANTLR3_UINT8)"OP_EQUAL"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_inequality_expr == NULL ? NULL : stream_inequality_expr->nextTree(stream_inequality_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 2:
            	    // grunt.g:273:6: ( '!=' inequality_expr -> ^( OP_NOT_EQUAL $equality_expr inequality_expr ) )
            	    {
            	        // grunt.g:273:6: ( '!=' inequality_expr -> ^( OP_NOT_EQUAL $equality_expr inequality_expr ) )
            	        // grunt.g:273:7: '!=' inequality_expr
            	        {
            	            string_literal133 = (pANTLR3_COMMON_TOKEN) MATCHT(115, &FOLLOW_115_in_equality_expr1586); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleequality_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_115; stream_115->add(stream_115, string_literal133, NULL); }

            	            FOLLOWPUSH(FOLLOW_inequality_expr_in_equality_expr1588);
            	            inequality_expr134=inequality_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleequality_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_inequality_expr; stream_inequality_expr->add(stream_inequality_expr, inequality_expr134.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : inequality_expr, equality_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 273:28: -> ^( OP_NOT_EQUAL $equality_expr inequality_expr )
            	            	{
            	            	    // grunt.g:273:31: ^( OP_NOT_EQUAL $equality_expr inequality_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_NOT_EQUAL, (pANTLR3_UINT8)"OP_NOT_EQUAL"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_inequality_expr == NULL ? NULL : stream_inequality_expr->nextTree(stream_inequality_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;

            	default:
            	    goto loop28;	/* break out of the loop */
            	    break;
                }
            }
            loop28: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequality_exprEx; /* Prevent compiler warnings */
    ruleequality_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_114 != NULL) stream_114->free(stream_114);
        if (stream_115 != NULL) stream_115->free(stream_115);
        if (stream_inequality_expr != NULL) stream_inequality_expr->free(stream_inequality_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end equality_expr */

/** 
 * $ANTLR start inequality_expr
 * grunt.g:277:1: inequality_expr : ( bitwise_shift_expr -> bitwise_shift_expr ) ( ( '<' bitwise_shift_expr -> ^( OP_LESS $inequality_expr bitwise_shift_expr ) ) | ( '<=' bitwise_shift_expr -> ^( OP_LESS_EQUAL $inequality_expr bitwise_shift_expr ) ) | ( '>' bitwise_shift_expr -> ^( OP_GREATER $inequality_expr bitwise_shift_expr ) ) | ( '>=' bitwise_shift_expr -> ^( OP_GREATER_EQUAL $inequality_expr bitwise_shift_expr ) ) )* ;
 */
static gruntParser_inequality_expr_return
inequality_expr(pgruntParser ctx)
{   
    gruntParser_inequality_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal136;
    pANTLR3_COMMON_TOKEN    string_literal138;
    pANTLR3_COMMON_TOKEN    char_literal140;
    pANTLR3_COMMON_TOKEN    string_literal142;
    gruntParser_bitwise_shift_expr_return bitwise_shift_expr135;
    #undef	RETURN_TYPE_bitwise_shift_expr135
    #define	RETURN_TYPE_bitwise_shift_expr135 gruntParser_bitwise_shift_expr_return

    gruntParser_bitwise_shift_expr_return bitwise_shift_expr137;
    #undef	RETURN_TYPE_bitwise_shift_expr137
    #define	RETURN_TYPE_bitwise_shift_expr137 gruntParser_bitwise_shift_expr_return

    gruntParser_bitwise_shift_expr_return bitwise_shift_expr139;
    #undef	RETURN_TYPE_bitwise_shift_expr139
    #define	RETURN_TYPE_bitwise_shift_expr139 gruntParser_bitwise_shift_expr_return

    gruntParser_bitwise_shift_expr_return bitwise_shift_expr141;
    #undef	RETURN_TYPE_bitwise_shift_expr141
    #define	RETURN_TYPE_bitwise_shift_expr141 gruntParser_bitwise_shift_expr_return

    gruntParser_bitwise_shift_expr_return bitwise_shift_expr143;
    #undef	RETURN_TYPE_bitwise_shift_expr143
    #define	RETURN_TYPE_bitwise_shift_expr143 gruntParser_bitwise_shift_expr_return

    pANTLR3_BASE_TREE char_literal136_tree;
    pANTLR3_BASE_TREE string_literal138_tree;
    pANTLR3_BASE_TREE char_literal140_tree;
    pANTLR3_BASE_TREE string_literal142_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_116;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_117;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_118;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_119;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwise_shift_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal136       = NULL;
    string_literal138       = NULL;
    char_literal140       = NULL;
    string_literal142       = NULL;
    bitwise_shift_expr135.tree = NULL;

    bitwise_shift_expr137.tree = NULL;

    bitwise_shift_expr139.tree = NULL;

    bitwise_shift_expr141.tree = NULL;

    bitwise_shift_expr143.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal136_tree   = NULL;
    string_literal138_tree   = NULL;
    char_literal140_tree   = NULL;
    string_literal142_tree   = NULL;

    stream_116   = NULL;
    #define CREATE_stream_116  if (stream_116 == NULL) {stream_116 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 116"); } 
    stream_117   = NULL;
    #define CREATE_stream_117  if (stream_117 == NULL) {stream_117 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 117"); } 
    stream_118   = NULL;
    #define CREATE_stream_118  if (stream_118 == NULL) {stream_118 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 118"); } 
    stream_119   = NULL;
    #define CREATE_stream_119  if (stream_119 == NULL) {stream_119 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 119"); } 
    stream_bitwise_shift_expr   = NULL;
    #define CREATE_stream_bitwise_shift_expr  if (stream_bitwise_shift_expr == NULL) {stream_bitwise_shift_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwise_shift_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:278:2: ( ( bitwise_shift_expr -> bitwise_shift_expr ) ( ( '<' bitwise_shift_expr -> ^( OP_LESS $inequality_expr bitwise_shift_expr ) ) | ( '<=' bitwise_shift_expr -> ^( OP_LESS_EQUAL $inequality_expr bitwise_shift_expr ) ) | ( '>' bitwise_shift_expr -> ^( OP_GREATER $inequality_expr bitwise_shift_expr ) ) | ( '>=' bitwise_shift_expr -> ^( OP_GREATER_EQUAL $inequality_expr bitwise_shift_expr ) ) )* )
        // grunt.g:278:4: ( bitwise_shift_expr -> bitwise_shift_expr ) ( ( '<' bitwise_shift_expr -> ^( OP_LESS $inequality_expr bitwise_shift_expr ) ) | ( '<=' bitwise_shift_expr -> ^( OP_LESS_EQUAL $inequality_expr bitwise_shift_expr ) ) | ( '>' bitwise_shift_expr -> ^( OP_GREATER $inequality_expr bitwise_shift_expr ) ) | ( '>=' bitwise_shift_expr -> ^( OP_GREATER_EQUAL $inequality_expr bitwise_shift_expr ) ) )*
        {
            // grunt.g:278:4: ( bitwise_shift_expr -> bitwise_shift_expr )
            // grunt.g:278:5: bitwise_shift_expr
            {
                FOLLOWPUSH(FOLLOW_bitwise_shift_expr_in_inequality_expr1617);
                bitwise_shift_expr135=bitwise_shift_expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleinequality_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwise_shift_expr; stream_bitwise_shift_expr->add(stream_bitwise_shift_expr, bitwise_shift_expr135.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwise_shift_expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 278:24: -> bitwise_shift_expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwise_shift_expr == NULL ? NULL : stream_bitwise_shift_expr->nextTree(stream_bitwise_shift_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:278:47: ( ( '<' bitwise_shift_expr -> ^( OP_LESS $inequality_expr bitwise_shift_expr ) ) | ( '<=' bitwise_shift_expr -> ^( OP_LESS_EQUAL $inequality_expr bitwise_shift_expr ) ) | ( '>' bitwise_shift_expr -> ^( OP_GREATER $inequality_expr bitwise_shift_expr ) ) | ( '>=' bitwise_shift_expr -> ^( OP_GREATER_EQUAL $inequality_expr bitwise_shift_expr ) ) )*

            for (;;)
            {
                int alt29=5;
                switch ( LA(1) ) 
                {
                case 116:
                	{
                		alt29=1;
                	}
                    break;
                case 117:
                	{
                		alt29=2;
                	}
                    break;
                case 118:
                	{
                		alt29=3;
                	}
                    break;
                case 119:
                	{
                		alt29=4;
                	}
                    break;

                }

                switch (alt29) 
                {
            	case 1:
            	    // grunt.g:279:5: ( '<' bitwise_shift_expr -> ^( OP_LESS $inequality_expr bitwise_shift_expr ) )
            	    {
            	        // grunt.g:279:5: ( '<' bitwise_shift_expr -> ^( OP_LESS $inequality_expr bitwise_shift_expr ) )
            	        // grunt.g:279:6: '<' bitwise_shift_expr
            	        {
            	            char_literal136 = (pANTLR3_COMMON_TOKEN) MATCHT(116, &FOLLOW_116_in_inequality_expr1631); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleinequality_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_116; stream_116->add(stream_116, char_literal136, NULL); }

            	            FOLLOWPUSH(FOLLOW_bitwise_shift_expr_in_inequality_expr1633);
            	            bitwise_shift_expr137=bitwise_shift_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleinequality_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_bitwise_shift_expr; stream_bitwise_shift_expr->add(stream_bitwise_shift_expr, bitwise_shift_expr137.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : bitwise_shift_expr, inequality_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 279:29: -> ^( OP_LESS $inequality_expr bitwise_shift_expr )
            	            	{
            	            	    // grunt.g:279:32: ^( OP_LESS $inequality_expr bitwise_shift_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_LESS, (pANTLR3_UINT8)"OP_LESS"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwise_shift_expr == NULL ? NULL : stream_bitwise_shift_expr->nextTree(stream_bitwise_shift_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 2:
            	    // grunt.g:280:6: ( '<=' bitwise_shift_expr -> ^( OP_LESS_EQUAL $inequality_expr bitwise_shift_expr ) )
            	    {
            	        // grunt.g:280:6: ( '<=' bitwise_shift_expr -> ^( OP_LESS_EQUAL $inequality_expr bitwise_shift_expr ) )
            	        // grunt.g:280:7: '<=' bitwise_shift_expr
            	        {
            	            string_literal138 = (pANTLR3_COMMON_TOKEN) MATCHT(117, &FOLLOW_117_in_inequality_expr1653); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleinequality_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_117; stream_117->add(stream_117, string_literal138, NULL); }

            	            FOLLOWPUSH(FOLLOW_bitwise_shift_expr_in_inequality_expr1655);
            	            bitwise_shift_expr139=bitwise_shift_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleinequality_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_bitwise_shift_expr; stream_bitwise_shift_expr->add(stream_bitwise_shift_expr, bitwise_shift_expr139.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : bitwise_shift_expr, inequality_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 280:31: -> ^( OP_LESS_EQUAL $inequality_expr bitwise_shift_expr )
            	            	{
            	            	    // grunt.g:280:34: ^( OP_LESS_EQUAL $inequality_expr bitwise_shift_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_LESS_EQUAL, (pANTLR3_UINT8)"OP_LESS_EQUAL"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwise_shift_expr == NULL ? NULL : stream_bitwise_shift_expr->nextTree(stream_bitwise_shift_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 3:
            	    // grunt.g:281:6: ( '>' bitwise_shift_expr -> ^( OP_GREATER $inequality_expr bitwise_shift_expr ) )
            	    {
            	        // grunt.g:281:6: ( '>' bitwise_shift_expr -> ^( OP_GREATER $inequality_expr bitwise_shift_expr ) )
            	        // grunt.g:281:7: '>' bitwise_shift_expr
            	        {
            	            char_literal140 = (pANTLR3_COMMON_TOKEN) MATCHT(118, &FOLLOW_118_in_inequality_expr1675); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleinequality_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_118; stream_118->add(stream_118, char_literal140, NULL); }

            	            FOLLOWPUSH(FOLLOW_bitwise_shift_expr_in_inequality_expr1677);
            	            bitwise_shift_expr141=bitwise_shift_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleinequality_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_bitwise_shift_expr; stream_bitwise_shift_expr->add(stream_bitwise_shift_expr, bitwise_shift_expr141.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : inequality_expr, bitwise_shift_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 281:30: -> ^( OP_GREATER $inequality_expr bitwise_shift_expr )
            	            	{
            	            	    // grunt.g:281:33: ^( OP_GREATER $inequality_expr bitwise_shift_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_GREATER, (pANTLR3_UINT8)"OP_GREATER"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwise_shift_expr == NULL ? NULL : stream_bitwise_shift_expr->nextTree(stream_bitwise_shift_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 4:
            	    // grunt.g:282:6: ( '>=' bitwise_shift_expr -> ^( OP_GREATER_EQUAL $inequality_expr bitwise_shift_expr ) )
            	    {
            	        // grunt.g:282:6: ( '>=' bitwise_shift_expr -> ^( OP_GREATER_EQUAL $inequality_expr bitwise_shift_expr ) )
            	        // grunt.g:282:7: '>=' bitwise_shift_expr
            	        {
            	            string_literal142 = (pANTLR3_COMMON_TOKEN) MATCHT(119, &FOLLOW_119_in_inequality_expr1697); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleinequality_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_119; stream_119->add(stream_119, string_literal142, NULL); }

            	            FOLLOWPUSH(FOLLOW_bitwise_shift_expr_in_inequality_expr1699);
            	            bitwise_shift_expr143=bitwise_shift_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleinequality_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_bitwise_shift_expr; stream_bitwise_shift_expr->add(stream_bitwise_shift_expr, bitwise_shift_expr143.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : bitwise_shift_expr, inequality_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 282:31: -> ^( OP_GREATER_EQUAL $inequality_expr bitwise_shift_expr )
            	            	{
            	            	    // grunt.g:282:34: ^( OP_GREATER_EQUAL $inequality_expr bitwise_shift_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_GREATER_EQUAL, (pANTLR3_UINT8)"OP_GREATER_EQUAL"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwise_shift_expr == NULL ? NULL : stream_bitwise_shift_expr->nextTree(stream_bitwise_shift_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;

            	default:
            	    goto loop29;	/* break out of the loop */
            	    break;
                }
            }
            loop29: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinequality_exprEx; /* Prevent compiler warnings */
    ruleinequality_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_116 != NULL) stream_116->free(stream_116);
        if (stream_117 != NULL) stream_117->free(stream_117);
        if (stream_118 != NULL) stream_118->free(stream_118);
        if (stream_119 != NULL) stream_119->free(stream_119);
        if (stream_bitwise_shift_expr != NULL) stream_bitwise_shift_expr->free(stream_bitwise_shift_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end inequality_expr */

/** 
 * $ANTLR start bitwise_shift_expr
 * grunt.g:286:1: bitwise_shift_expr : ( add_expr -> add_expr ) ( ( '<<' add_expr -> ^( OP_SHIFT_LEFT $bitwise_shift_expr add_expr ) ) | ( '>>' add_expr -> ^( OP_SHIFT_RIGHT $bitwise_shift_expr add_expr ) ) )* ;
 */
static gruntParser_bitwise_shift_expr_return
bitwise_shift_expr(pgruntParser ctx)
{   
    gruntParser_bitwise_shift_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal145;
    pANTLR3_COMMON_TOKEN    string_literal147;
    gruntParser_add_expr_return add_expr144;
    #undef	RETURN_TYPE_add_expr144
    #define	RETURN_TYPE_add_expr144 gruntParser_add_expr_return

    gruntParser_add_expr_return add_expr146;
    #undef	RETURN_TYPE_add_expr146
    #define	RETURN_TYPE_add_expr146 gruntParser_add_expr_return

    gruntParser_add_expr_return add_expr148;
    #undef	RETURN_TYPE_add_expr148
    #define	RETURN_TYPE_add_expr148 gruntParser_add_expr_return

    pANTLR3_BASE_TREE string_literal145_tree;
    pANTLR3_BASE_TREE string_literal147_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_121;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_120;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_add_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal145       = NULL;
    string_literal147       = NULL;
    add_expr144.tree = NULL;

    add_expr146.tree = NULL;

    add_expr148.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal145_tree   = NULL;
    string_literal147_tree   = NULL;

    stream_121   = NULL;
    #define CREATE_stream_121  if (stream_121 == NULL) {stream_121 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 121"); } 
    stream_120   = NULL;
    #define CREATE_stream_120  if (stream_120 == NULL) {stream_120 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 120"); } 
    stream_add_expr   = NULL;
    #define CREATE_stream_add_expr  if (stream_add_expr == NULL) {stream_add_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule add_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:287:2: ( ( add_expr -> add_expr ) ( ( '<<' add_expr -> ^( OP_SHIFT_LEFT $bitwise_shift_expr add_expr ) ) | ( '>>' add_expr -> ^( OP_SHIFT_RIGHT $bitwise_shift_expr add_expr ) ) )* )
        // grunt.g:287:4: ( add_expr -> add_expr ) ( ( '<<' add_expr -> ^( OP_SHIFT_LEFT $bitwise_shift_expr add_expr ) ) | ( '>>' add_expr -> ^( OP_SHIFT_RIGHT $bitwise_shift_expr add_expr ) ) )*
        {
            // grunt.g:287:4: ( add_expr -> add_expr )
            // grunt.g:287:5: add_expr
            {
                FOLLOWPUSH(FOLLOW_add_expr_in_bitwise_shift_expr1728);
                add_expr144=add_expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwise_shift_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_add_expr; stream_add_expr->add(stream_add_expr, add_expr144.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : add_expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 287:14: -> add_expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_add_expr == NULL ? NULL : stream_add_expr->nextTree(stream_add_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:287:27: ( ( '<<' add_expr -> ^( OP_SHIFT_LEFT $bitwise_shift_expr add_expr ) ) | ( '>>' add_expr -> ^( OP_SHIFT_RIGHT $bitwise_shift_expr add_expr ) ) )*

            for (;;)
            {
                int alt30=3;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA30_0 = LA(1);
                    if ( (LA30_0 == 120) ) 
                    {
                        alt30=1;
                    }
                    else if ( (LA30_0 == 121) ) 
                    {
                        alt30=2;
                    }

                }
                switch (alt30) 
                {
            	case 1:
            	    // grunt.g:288:5: ( '<<' add_expr -> ^( OP_SHIFT_LEFT $bitwise_shift_expr add_expr ) )
            	    {
            	        // grunt.g:288:5: ( '<<' add_expr -> ^( OP_SHIFT_LEFT $bitwise_shift_expr add_expr ) )
            	        // grunt.g:288:6: '<<' add_expr
            	        {
            	            string_literal145 = (pANTLR3_COMMON_TOKEN) MATCHT(120, &FOLLOW_120_in_bitwise_shift_expr1742); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebitwise_shift_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_120; stream_120->add(stream_120, string_literal145, NULL); }

            	            FOLLOWPUSH(FOLLOW_add_expr_in_bitwise_shift_expr1744);
            	            add_expr146=add_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebitwise_shift_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_add_expr; stream_add_expr->add(stream_add_expr, add_expr146.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : bitwise_shift_expr, add_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 288:20: -> ^( OP_SHIFT_LEFT $bitwise_shift_expr add_expr )
            	            	{
            	            	    // grunt.g:288:23: ^( OP_SHIFT_LEFT $bitwise_shift_expr add_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_SHIFT_LEFT, (pANTLR3_UINT8)"OP_SHIFT_LEFT"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_add_expr == NULL ? NULL : stream_add_expr->nextTree(stream_add_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 2:
            	    // grunt.g:289:6: ( '>>' add_expr -> ^( OP_SHIFT_RIGHT $bitwise_shift_expr add_expr ) )
            	    {
            	        // grunt.g:289:6: ( '>>' add_expr -> ^( OP_SHIFT_RIGHT $bitwise_shift_expr add_expr ) )
            	        // grunt.g:289:7: '>>' add_expr
            	        {
            	            string_literal147 = (pANTLR3_COMMON_TOKEN) MATCHT(121, &FOLLOW_121_in_bitwise_shift_expr1764); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebitwise_shift_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_121; stream_121->add(stream_121, string_literal147, NULL); }

            	            FOLLOWPUSH(FOLLOW_add_expr_in_bitwise_shift_expr1766);
            	            add_expr148=add_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulebitwise_shift_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_add_expr; stream_add_expr->add(stream_add_expr, add_expr148.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : bitwise_shift_expr, add_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 289:21: -> ^( OP_SHIFT_RIGHT $bitwise_shift_expr add_expr )
            	            	{
            	            	    // grunt.g:289:24: ^( OP_SHIFT_RIGHT $bitwise_shift_expr add_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_SHIFT_RIGHT, (pANTLR3_UINT8)"OP_SHIFT_RIGHT"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_add_expr == NULL ? NULL : stream_add_expr->nextTree(stream_add_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;

            	default:
            	    goto loop30;	/* break out of the loop */
            	    break;
                }
            }
            loop30: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwise_shift_exprEx; /* Prevent compiler warnings */
    rulebitwise_shift_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_121 != NULL) stream_121->free(stream_121);
        if (stream_120 != NULL) stream_120->free(stream_120);
        if (stream_add_expr != NULL) stream_add_expr->free(stream_add_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end bitwise_shift_expr */

/** 
 * $ANTLR start add_expr
 * grunt.g:293:1: add_expr : ( mul_expr -> mul_expr ) ( ( '+' mul_expr -> ^( OP_ADD $add_expr mul_expr ) ) | ( '-' mul_expr -> ^( OP_SUB $add_expr mul_expr ) ) )* ;
 */
static gruntParser_add_expr_return
add_expr(pgruntParser ctx)
{   
    gruntParser_add_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal150;
    pANTLR3_COMMON_TOKEN    char_literal152;
    gruntParser_mul_expr_return mul_expr149;
    #undef	RETURN_TYPE_mul_expr149
    #define	RETURN_TYPE_mul_expr149 gruntParser_mul_expr_return

    gruntParser_mul_expr_return mul_expr151;
    #undef	RETURN_TYPE_mul_expr151
    #define	RETURN_TYPE_mul_expr151 gruntParser_mul_expr_return

    gruntParser_mul_expr_return mul_expr153;
    #undef	RETURN_TYPE_mul_expr153
    #define	RETURN_TYPE_mul_expr153 gruntParser_mul_expr_return

    pANTLR3_BASE_TREE char_literal150_tree;
    pANTLR3_BASE_TREE char_literal152_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_122;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_123;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_mul_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal150       = NULL;
    char_literal152       = NULL;
    mul_expr149.tree = NULL;

    mul_expr151.tree = NULL;

    mul_expr153.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal150_tree   = NULL;
    char_literal152_tree   = NULL;

    stream_122   = NULL;
    #define CREATE_stream_122  if (stream_122 == NULL) {stream_122 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 122"); } 
    stream_123   = NULL;
    #define CREATE_stream_123  if (stream_123 == NULL) {stream_123 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 123"); } 
    stream_mul_expr   = NULL;
    #define CREATE_stream_mul_expr  if (stream_mul_expr == NULL) {stream_mul_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule mul_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:294:2: ( ( mul_expr -> mul_expr ) ( ( '+' mul_expr -> ^( OP_ADD $add_expr mul_expr ) ) | ( '-' mul_expr -> ^( OP_SUB $add_expr mul_expr ) ) )* )
        // grunt.g:294:4: ( mul_expr -> mul_expr ) ( ( '+' mul_expr -> ^( OP_ADD $add_expr mul_expr ) ) | ( '-' mul_expr -> ^( OP_SUB $add_expr mul_expr ) ) )*
        {
            // grunt.g:294:4: ( mul_expr -> mul_expr )
            // grunt.g:294:5: mul_expr
            {
                FOLLOWPUSH(FOLLOW_mul_expr_in_add_expr1795);
                mul_expr149=mul_expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleadd_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_mul_expr; stream_mul_expr->add(stream_mul_expr, mul_expr149.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : mul_expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 294:14: -> mul_expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_mul_expr == NULL ? NULL : stream_mul_expr->nextTree(stream_mul_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:294:27: ( ( '+' mul_expr -> ^( OP_ADD $add_expr mul_expr ) ) | ( '-' mul_expr -> ^( OP_SUB $add_expr mul_expr ) ) )*

            for (;;)
            {
                int alt31=3;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA31_0 = LA(1);
                    if ( (LA31_0 == 122) ) 
                    {
                        alt31=1;
                    }
                    else if ( (LA31_0 == 123) ) 
                    {
                        alt31=2;
                    }

                }
                switch (alt31) 
                {
            	case 1:
            	    // grunt.g:295:5: ( '+' mul_expr -> ^( OP_ADD $add_expr mul_expr ) )
            	    {
            	        // grunt.g:295:5: ( '+' mul_expr -> ^( OP_ADD $add_expr mul_expr ) )
            	        // grunt.g:295:6: '+' mul_expr
            	        {
            	            char_literal150 = (pANTLR3_COMMON_TOKEN) MATCHT(122, &FOLLOW_122_in_add_expr1809); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleadd_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_122; stream_122->add(stream_122, char_literal150, NULL); }

            	            FOLLOWPUSH(FOLLOW_mul_expr_in_add_expr1811);
            	            mul_expr151=mul_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleadd_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_mul_expr; stream_mul_expr->add(stream_mul_expr, mul_expr151.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : mul_expr, add_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 295:19: -> ^( OP_ADD $add_expr mul_expr )
            	            	{
            	            	    // grunt.g:295:22: ^( OP_ADD $add_expr mul_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_ADD, (pANTLR3_UINT8)"OP_ADD"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_mul_expr == NULL ? NULL : stream_mul_expr->nextTree(stream_mul_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 2:
            	    // grunt.g:296:6: ( '-' mul_expr -> ^( OP_SUB $add_expr mul_expr ) )
            	    {
            	        // grunt.g:296:6: ( '-' mul_expr -> ^( OP_SUB $add_expr mul_expr ) )
            	        // grunt.g:296:7: '-' mul_expr
            	        {
            	            char_literal152 = (pANTLR3_COMMON_TOKEN) MATCHT(123, &FOLLOW_123_in_add_expr1831); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleadd_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_123; stream_123->add(stream_123, char_literal152, NULL); }

            	            FOLLOWPUSH(FOLLOW_mul_expr_in_add_expr1833);
            	            mul_expr153=mul_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleadd_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_mul_expr; stream_mul_expr->add(stream_mul_expr, mul_expr153.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : mul_expr, add_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 296:20: -> ^( OP_SUB $add_expr mul_expr )
            	            	{
            	            	    // grunt.g:296:23: ^( OP_SUB $add_expr mul_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_SUB, (pANTLR3_UINT8)"OP_SUB"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_mul_expr == NULL ? NULL : stream_mul_expr->nextTree(stream_mul_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleadd_exprEx; /* Prevent compiler warnings */
    ruleadd_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_122 != NULL) stream_122->free(stream_122);
        if (stream_123 != NULL) stream_123->free(stream_123);
        if (stream_mul_expr != NULL) stream_mul_expr->free(stream_mul_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end add_expr */

/** 
 * $ANTLR start mul_expr
 * grunt.g:300:1: mul_expr : ( pre_unary_expr -> pre_unary_expr ) ( ( '%' pre_unary_expr -> ^( OP_MOD $mul_expr pre_unary_expr ) ) | ( '*' pre_unary_expr -> ^( OP_MUL $mul_expr pre_unary_expr ) ) | ( '/' pre_unary_expr -> ^( OP_DIV $mul_expr pre_unary_expr ) ) )* ;
 */
static gruntParser_mul_expr_return
mul_expr(pgruntParser ctx)
{   
    gruntParser_mul_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal155;
    pANTLR3_COMMON_TOKEN    char_literal157;
    pANTLR3_COMMON_TOKEN    char_literal159;
    gruntParser_pre_unary_expr_return pre_unary_expr154;
    #undef	RETURN_TYPE_pre_unary_expr154
    #define	RETURN_TYPE_pre_unary_expr154 gruntParser_pre_unary_expr_return

    gruntParser_pre_unary_expr_return pre_unary_expr156;
    #undef	RETURN_TYPE_pre_unary_expr156
    #define	RETURN_TYPE_pre_unary_expr156 gruntParser_pre_unary_expr_return

    gruntParser_pre_unary_expr_return pre_unary_expr158;
    #undef	RETURN_TYPE_pre_unary_expr158
    #define	RETURN_TYPE_pre_unary_expr158 gruntParser_pre_unary_expr_return

    gruntParser_pre_unary_expr_return pre_unary_expr160;
    #undef	RETURN_TYPE_pre_unary_expr160
    #define	RETURN_TYPE_pre_unary_expr160 gruntParser_pre_unary_expr_return

    pANTLR3_BASE_TREE char_literal155_tree;
    pANTLR3_BASE_TREE char_literal157_tree;
    pANTLR3_BASE_TREE char_literal159_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_pre_unary_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal155       = NULL;
    char_literal157       = NULL;
    char_literal159       = NULL;
    pre_unary_expr154.tree = NULL;

    pre_unary_expr156.tree = NULL;

    pre_unary_expr158.tree = NULL;

    pre_unary_expr160.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal155_tree   = NULL;
    char_literal157_tree   = NULL;
    char_literal159_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_pre_unary_expr   = NULL;
    #define CREATE_stream_pre_unary_expr  if (stream_pre_unary_expr == NULL) {stream_pre_unary_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule pre_unary_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:301:2: ( ( pre_unary_expr -> pre_unary_expr ) ( ( '%' pre_unary_expr -> ^( OP_MOD $mul_expr pre_unary_expr ) ) | ( '*' pre_unary_expr -> ^( OP_MUL $mul_expr pre_unary_expr ) ) | ( '/' pre_unary_expr -> ^( OP_DIV $mul_expr pre_unary_expr ) ) )* )
        // grunt.g:301:4: ( pre_unary_expr -> pre_unary_expr ) ( ( '%' pre_unary_expr -> ^( OP_MOD $mul_expr pre_unary_expr ) ) | ( '*' pre_unary_expr -> ^( OP_MUL $mul_expr pre_unary_expr ) ) | ( '/' pre_unary_expr -> ^( OP_DIV $mul_expr pre_unary_expr ) ) )*
        {
            // grunt.g:301:4: ( pre_unary_expr -> pre_unary_expr )
            // grunt.g:301:5: pre_unary_expr
            {
                FOLLOWPUSH(FOLLOW_pre_unary_expr_in_mul_expr1862);
                pre_unary_expr154=pre_unary_expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemul_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_pre_unary_expr; stream_pre_unary_expr->add(stream_pre_unary_expr, pre_unary_expr154.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : pre_unary_expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 301:20: -> pre_unary_expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_pre_unary_expr == NULL ? NULL : stream_pre_unary_expr->nextTree(stream_pre_unary_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:301:39: ( ( '%' pre_unary_expr -> ^( OP_MOD $mul_expr pre_unary_expr ) ) | ( '*' pre_unary_expr -> ^( OP_MUL $mul_expr pre_unary_expr ) ) | ( '/' pre_unary_expr -> ^( OP_DIV $mul_expr pre_unary_expr ) ) )*

            for (;;)
            {
                int alt32=4;
                switch ( LA(1) ) 
                {
                case 124:
                	{
                		alt32=1;
                	}
                    break;
                case 125:
                	{
                		alt32=2;
                	}
                    break;
                case 126:
                	{
                		alt32=3;
                	}
                    break;

                }

                switch (alt32) 
                {
            	case 1:
            	    // grunt.g:302:5: ( '%' pre_unary_expr -> ^( OP_MOD $mul_expr pre_unary_expr ) )
            	    {
            	        // grunt.g:302:5: ( '%' pre_unary_expr -> ^( OP_MOD $mul_expr pre_unary_expr ) )
            	        // grunt.g:302:6: '%' pre_unary_expr
            	        {
            	            char_literal155 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_mul_expr1876); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulemul_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, char_literal155, NULL); }

            	            FOLLOWPUSH(FOLLOW_pre_unary_expr_in_mul_expr1878);
            	            pre_unary_expr156=pre_unary_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulemul_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_pre_unary_expr; stream_pre_unary_expr->add(stream_pre_unary_expr, pre_unary_expr156.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : pre_unary_expr, mul_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 302:25: -> ^( OP_MOD $mul_expr pre_unary_expr )
            	            	{
            	            	    // grunt.g:302:28: ^( OP_MOD $mul_expr pre_unary_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_MOD, (pANTLR3_UINT8)"OP_MOD"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_pre_unary_expr == NULL ? NULL : stream_pre_unary_expr->nextTree(stream_pre_unary_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 2:
            	    // grunt.g:303:6: ( '*' pre_unary_expr -> ^( OP_MUL $mul_expr pre_unary_expr ) )
            	    {
            	        // grunt.g:303:6: ( '*' pre_unary_expr -> ^( OP_MUL $mul_expr pre_unary_expr ) )
            	        // grunt.g:303:7: '*' pre_unary_expr
            	        {
            	            char_literal157 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_mul_expr1898); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulemul_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal157, NULL); }

            	            FOLLOWPUSH(FOLLOW_pre_unary_expr_in_mul_expr1900);
            	            pre_unary_expr158=pre_unary_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulemul_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_pre_unary_expr; stream_pre_unary_expr->add(stream_pre_unary_expr, pre_unary_expr158.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : pre_unary_expr, mul_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 303:26: -> ^( OP_MUL $mul_expr pre_unary_expr )
            	            	{
            	            	    // grunt.g:303:29: ^( OP_MUL $mul_expr pre_unary_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_MUL, (pANTLR3_UINT8)"OP_MUL"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_pre_unary_expr == NULL ? NULL : stream_pre_unary_expr->nextTree(stream_pre_unary_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 3:
            	    // grunt.g:304:6: ( '/' pre_unary_expr -> ^( OP_DIV $mul_expr pre_unary_expr ) )
            	    {
            	        // grunt.g:304:6: ( '/' pre_unary_expr -> ^( OP_DIV $mul_expr pre_unary_expr ) )
            	        // grunt.g:304:7: '/' pre_unary_expr
            	        {
            	            char_literal159 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_mul_expr1920); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulemul_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal159, NULL); }

            	            FOLLOWPUSH(FOLLOW_pre_unary_expr_in_mul_expr1922);
            	            pre_unary_expr160=pre_unary_expr(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulemul_exprEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_pre_unary_expr; stream_pre_unary_expr->add(stream_pre_unary_expr, pre_unary_expr160.tree, NULL); }

            	             
            	            /* AST REWRITE
            	             * elements          : mul_expr, pre_unary_expr
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 304:26: -> ^( OP_DIV $mul_expr pre_unary_expr )
            	            	{
            	            	    // grunt.g:304:29: ^( OP_DIV $mul_expr pre_unary_expr )
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_DIV, (pANTLR3_UINT8)"OP_DIV"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_pre_unary_expr == NULL ? NULL : stream_pre_unary_expr->nextTree(stream_pre_unary_expr));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;

            	default:
            	    goto loop32;	/* break out of the loop */
            	    break;
                }
            }
            loop32: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemul_exprEx; /* Prevent compiler warnings */
    rulemul_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_pre_unary_expr != NULL) stream_pre_unary_expr->free(stream_pre_unary_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end mul_expr */

/** 
 * $ANTLR start pre_unary_expr
 * grunt.g:310:1: pre_unary_expr : ( post_unary_expr | '~' pre_unary_expr -> ^( OP_BITWISE_NOT pre_unary_expr ) | '!' pre_unary_expr -> ^( OP_LOGICAL_NOT pre_unary_expr ) | '-' pre_unary_expr -> ^( OP_NEGATE pre_unary_expr ) | '+' pre_unary_expr -> pre_unary_expr | '++' pre_unary_expr -> ^( OP_PRE_INCR pre_unary_expr ) | '--' pre_unary_expr -> ^( OP_PRE_DECR pre_unary_expr ) );
 */
static gruntParser_pre_unary_expr_return
pre_unary_expr(pgruntParser ctx)
{   
    gruntParser_pre_unary_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal162;
    pANTLR3_COMMON_TOKEN    char_literal164;
    pANTLR3_COMMON_TOKEN    char_literal166;
    pANTLR3_COMMON_TOKEN    char_literal168;
    pANTLR3_COMMON_TOKEN    string_literal170;
    pANTLR3_COMMON_TOKEN    string_literal172;
    gruntParser_post_unary_expr_return post_unary_expr161;
    #undef	RETURN_TYPE_post_unary_expr161
    #define	RETURN_TYPE_post_unary_expr161 gruntParser_post_unary_expr_return

    gruntParser_pre_unary_expr_return pre_unary_expr163;
    #undef	RETURN_TYPE_pre_unary_expr163
    #define	RETURN_TYPE_pre_unary_expr163 gruntParser_pre_unary_expr_return

    gruntParser_pre_unary_expr_return pre_unary_expr165;
    #undef	RETURN_TYPE_pre_unary_expr165
    #define	RETURN_TYPE_pre_unary_expr165 gruntParser_pre_unary_expr_return

    gruntParser_pre_unary_expr_return pre_unary_expr167;
    #undef	RETURN_TYPE_pre_unary_expr167
    #define	RETURN_TYPE_pre_unary_expr167 gruntParser_pre_unary_expr_return

    gruntParser_pre_unary_expr_return pre_unary_expr169;
    #undef	RETURN_TYPE_pre_unary_expr169
    #define	RETURN_TYPE_pre_unary_expr169 gruntParser_pre_unary_expr_return

    gruntParser_pre_unary_expr_return pre_unary_expr171;
    #undef	RETURN_TYPE_pre_unary_expr171
    #define	RETURN_TYPE_pre_unary_expr171 gruntParser_pre_unary_expr_return

    gruntParser_pre_unary_expr_return pre_unary_expr173;
    #undef	RETURN_TYPE_pre_unary_expr173
    #define	RETURN_TYPE_pre_unary_expr173 gruntParser_pre_unary_expr_return

    pANTLR3_BASE_TREE char_literal162_tree;
    pANTLR3_BASE_TREE char_literal164_tree;
    pANTLR3_BASE_TREE char_literal166_tree;
    pANTLR3_BASE_TREE char_literal168_tree;
    pANTLR3_BASE_TREE string_literal170_tree;
    pANTLR3_BASE_TREE string_literal172_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_122;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_123;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_pre_unary_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal162       = NULL;
    char_literal164       = NULL;
    char_literal166       = NULL;
    char_literal168       = NULL;
    string_literal170       = NULL;
    string_literal172       = NULL;
    post_unary_expr161.tree = NULL;

    pre_unary_expr163.tree = NULL;

    pre_unary_expr165.tree = NULL;

    pre_unary_expr167.tree = NULL;

    pre_unary_expr169.tree = NULL;

    pre_unary_expr171.tree = NULL;

    pre_unary_expr173.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal162_tree   = NULL;
    char_literal164_tree   = NULL;
    char_literal166_tree   = NULL;
    char_literal168_tree   = NULL;
    string_literal170_tree   = NULL;
    string_literal172_tree   = NULL;

    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_122   = NULL;
    #define CREATE_stream_122  if (stream_122 == NULL) {stream_122 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 122"); } 
    stream_123   = NULL;
    #define CREATE_stream_123  if (stream_123 == NULL) {stream_123 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 123"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_pre_unary_expr   = NULL;
    #define CREATE_stream_pre_unary_expr  if (stream_pre_unary_expr == NULL) {stream_pre_unary_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule pre_unary_expr"); }

    retval.tree  = NULL;
    {
        {
            //  grunt.g:311:2: ( post_unary_expr | '~' pre_unary_expr -> ^( OP_BITWISE_NOT pre_unary_expr ) | '!' pre_unary_expr -> ^( OP_LOGICAL_NOT pre_unary_expr ) | '-' pre_unary_expr -> ^( OP_NEGATE pre_unary_expr ) | '+' pre_unary_expr -> pre_unary_expr | '++' pre_unary_expr -> ^( OP_PRE_INCR pre_unary_expr ) | '--' pre_unary_expr -> ^( OP_PRE_DECR pre_unary_expr ) )
            
            ANTLR3_UINT32 alt33;

            alt33=7;

            switch ( LA(1) ) 
            {
            case IDENTIFIER:
            case STRING_LITERAL:
            case DECIMAL_INTEGER_LITERAL:
            case HEXADECIMAL_INTEGER_LITERAL:
            case FLOAT_LITERAL:
            case 84:
            case 86:
            case 90:
            case 134:
            	{
            		alt33=1;
            	}
                break;
            case 127:
            	{
            		alt33=2;
            	}
                break;
            case 128:
            	{
            		alt33=3;
            	}
                break;
            case 123:
            	{
            		alt33=4;
            	}
                break;
            case 122:
            	{
            		alt33=5;
            	}
                break;
            case 129:
            	{
            		alt33=6;
            	}
                break;
            case 130:
            	{
            		alt33=7;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 33;
                EXCEPTION->state        = 0;


                goto rulepre_unary_exprEx;
            }

            switch (alt33) 
            {
        	case 1:
        	    // grunt.g:311:4: post_unary_expr
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_post_unary_expr_in_pre_unary_expr1952);
        	        post_unary_expr161=post_unary_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepre_unary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, post_unary_expr161.tree);

        	    }
        	    break;
        	case 2:
        	    // grunt.g:312:4: '~' pre_unary_expr
        	    {
        	        char_literal162 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_pre_unary_expr1957); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepre_unary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal162, NULL); }

        	        FOLLOWPUSH(FOLLOW_pre_unary_expr_in_pre_unary_expr1959);
        	        pre_unary_expr163=pre_unary_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepre_unary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_pre_unary_expr; stream_pre_unary_expr->add(stream_pre_unary_expr, pre_unary_expr163.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : pre_unary_expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 312:23: -> ^( OP_BITWISE_NOT pre_unary_expr )
        	        	{
        	        	    // grunt.g:312:26: ^( OP_BITWISE_NOT pre_unary_expr )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_BITWISE_NOT, (pANTLR3_UINT8)"OP_BITWISE_NOT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_pre_unary_expr == NULL ? NULL : stream_pre_unary_expr->nextTree(stream_pre_unary_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // grunt.g:313:4: '!' pre_unary_expr
        	    {
        	        char_literal164 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_pre_unary_expr1972); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepre_unary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal164, NULL); }

        	        FOLLOWPUSH(FOLLOW_pre_unary_expr_in_pre_unary_expr1974);
        	        pre_unary_expr165=pre_unary_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepre_unary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_pre_unary_expr; stream_pre_unary_expr->add(stream_pre_unary_expr, pre_unary_expr165.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : pre_unary_expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 313:23: -> ^( OP_LOGICAL_NOT pre_unary_expr )
        	        	{
        	        	    // grunt.g:313:26: ^( OP_LOGICAL_NOT pre_unary_expr )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_LOGICAL_NOT, (pANTLR3_UINT8)"OP_LOGICAL_NOT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_pre_unary_expr == NULL ? NULL : stream_pre_unary_expr->nextTree(stream_pre_unary_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // grunt.g:314:4: '-' pre_unary_expr
        	    {
        	        char_literal166 = (pANTLR3_COMMON_TOKEN) MATCHT(123, &FOLLOW_123_in_pre_unary_expr1987); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepre_unary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_123; stream_123->add(stream_123, char_literal166, NULL); }

        	        FOLLOWPUSH(FOLLOW_pre_unary_expr_in_pre_unary_expr1989);
        	        pre_unary_expr167=pre_unary_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepre_unary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_pre_unary_expr; stream_pre_unary_expr->add(stream_pre_unary_expr, pre_unary_expr167.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : pre_unary_expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 314:23: -> ^( OP_NEGATE pre_unary_expr )
        	        	{
        	        	    // grunt.g:314:26: ^( OP_NEGATE pre_unary_expr )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_NEGATE, (pANTLR3_UINT8)"OP_NEGATE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_pre_unary_expr == NULL ? NULL : stream_pre_unary_expr->nextTree(stream_pre_unary_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // grunt.g:315:4: '+' pre_unary_expr
        	    {
        	        char_literal168 = (pANTLR3_COMMON_TOKEN) MATCHT(122, &FOLLOW_122_in_pre_unary_expr2002); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepre_unary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_122; stream_122->add(stream_122, char_literal168, NULL); }

        	        FOLLOWPUSH(FOLLOW_pre_unary_expr_in_pre_unary_expr2004);
        	        pre_unary_expr169=pre_unary_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepre_unary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_pre_unary_expr; stream_pre_unary_expr->add(stream_pre_unary_expr, pre_unary_expr169.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : pre_unary_expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 315:23: -> pre_unary_expr
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_pre_unary_expr == NULL ? NULL : stream_pre_unary_expr->nextTree(stream_pre_unary_expr));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // grunt.g:316:4: '++' pre_unary_expr
        	    {
        	        string_literal170 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_pre_unary_expr2013); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepre_unary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, string_literal170, NULL); }

        	        FOLLOWPUSH(FOLLOW_pre_unary_expr_in_pre_unary_expr2015);
        	        pre_unary_expr171=pre_unary_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepre_unary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_pre_unary_expr; stream_pre_unary_expr->add(stream_pre_unary_expr, pre_unary_expr171.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : pre_unary_expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 316:24: -> ^( OP_PRE_INCR pre_unary_expr )
        	        	{
        	        	    // grunt.g:316:27: ^( OP_PRE_INCR pre_unary_expr )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_PRE_INCR, (pANTLR3_UINT8)"OP_PRE_INCR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_pre_unary_expr == NULL ? NULL : stream_pre_unary_expr->nextTree(stream_pre_unary_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // grunt.g:317:4: '--' pre_unary_expr
        	    {
        	        string_literal172 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_pre_unary_expr2028); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepre_unary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, string_literal172, NULL); }

        	        FOLLOWPUSH(FOLLOW_pre_unary_expr_in_pre_unary_expr2030);
        	        pre_unary_expr173=pre_unary_expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepre_unary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_pre_unary_expr; stream_pre_unary_expr->add(stream_pre_unary_expr, pre_unary_expr173.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : pre_unary_expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 317:24: -> ^( OP_PRE_DECR pre_unary_expr )
        	        	{
        	        	    // grunt.g:317:27: ^( OP_PRE_DECR pre_unary_expr )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_PRE_DECR, (pANTLR3_UINT8)"OP_PRE_DECR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_pre_unary_expr == NULL ? NULL : stream_pre_unary_expr->nextTree(stream_pre_unary_expr));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepre_unary_exprEx; /* Prevent compiler warnings */
    rulepre_unary_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_122 != NULL) stream_122->free(stream_122);
        if (stream_123 != NULL) stream_123->free(stream_123);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_pre_unary_expr != NULL) stream_pre_unary_expr->free(stream_pre_unary_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end pre_unary_expr */

/** 
 * $ANTLR start post_unary_expr
 * grunt.g:320:1: post_unary_expr : ( primary_expr -> primary_expr ) ( '++' -> ^( OP_POST_INCR $post_unary_expr) | '--' -> ^( OP_POST_DECR $post_unary_expr) | '.' IDENTIFIER -> ^( OP_ELEMENT $post_unary_expr IDENTIFIER ) | '[' expr ']' -> ^( OP_INDEX $post_unary_expr expr ) | argument_list -> ^( OP_CALL_FUNC $post_unary_expr argument_list ) )* ;
 */
static gruntParser_post_unary_expr_return
post_unary_expr(pgruntParser ctx)
{   
    gruntParser_post_unary_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal175;
    pANTLR3_COMMON_TOKEN    string_literal176;
    pANTLR3_COMMON_TOKEN    char_literal177;
    pANTLR3_COMMON_TOKEN    IDENTIFIER178;
    pANTLR3_COMMON_TOKEN    char_literal179;
    pANTLR3_COMMON_TOKEN    char_literal181;
    gruntParser_primary_expr_return primary_expr174;
    #undef	RETURN_TYPE_primary_expr174
    #define	RETURN_TYPE_primary_expr174 gruntParser_primary_expr_return

    gruntParser_expr_return expr180;
    #undef	RETURN_TYPE_expr180
    #define	RETURN_TYPE_expr180 gruntParser_expr_return

    gruntParser_argument_list_return argument_list182;
    #undef	RETURN_TYPE_argument_list182
    #define	RETURN_TYPE_argument_list182 gruntParser_argument_list_return

    pANTLR3_BASE_TREE string_literal175_tree;
    pANTLR3_BASE_TREE string_literal176_tree;
    pANTLR3_BASE_TREE char_literal177_tree;
    pANTLR3_BASE_TREE IDENTIFIER178_tree;
    pANTLR3_BASE_TREE char_literal179_tree;
    pANTLR3_BASE_TREE char_literal181_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_argument_list;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primary_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    string_literal175       = NULL;
    string_literal176       = NULL;
    char_literal177       = NULL;
    IDENTIFIER178       = NULL;
    char_literal179       = NULL;
    char_literal181       = NULL;
    primary_expr174.tree = NULL;

    expr180.tree = NULL;

    argument_list182.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal175_tree   = NULL;
    string_literal176_tree   = NULL;
    char_literal177_tree   = NULL;
    IDENTIFIER178_tree   = NULL;
    char_literal179_tree   = NULL;
    char_literal181_tree   = NULL;

    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_argument_list   = NULL;
    #define CREATE_stream_argument_list  if (stream_argument_list == NULL) {stream_argument_list = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule argument_list"); }
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }
    stream_primary_expr   = NULL;
    #define CREATE_stream_primary_expr  if (stream_primary_expr == NULL) {stream_primary_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primary_expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:321:2: ( ( primary_expr -> primary_expr ) ( '++' -> ^( OP_POST_INCR $post_unary_expr) | '--' -> ^( OP_POST_DECR $post_unary_expr) | '.' IDENTIFIER -> ^( OP_ELEMENT $post_unary_expr IDENTIFIER ) | '[' expr ']' -> ^( OP_INDEX $post_unary_expr expr ) | argument_list -> ^( OP_CALL_FUNC $post_unary_expr argument_list ) )* )
        // grunt.g:321:4: ( primary_expr -> primary_expr ) ( '++' -> ^( OP_POST_INCR $post_unary_expr) | '--' -> ^( OP_POST_DECR $post_unary_expr) | '.' IDENTIFIER -> ^( OP_ELEMENT $post_unary_expr IDENTIFIER ) | '[' expr ']' -> ^( OP_INDEX $post_unary_expr expr ) | argument_list -> ^( OP_CALL_FUNC $post_unary_expr argument_list ) )*
        {
            // grunt.g:321:4: ( primary_expr -> primary_expr )
            // grunt.g:321:5: primary_expr
            {
                FOLLOWPUSH(FOLLOW_primary_expr_in_post_unary_expr2050);
                primary_expr174=primary_expr(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulepost_unary_exprEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_primary_expr; stream_primary_expr->add(stream_primary_expr, primary_expr174.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : primary_expr
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 321:18: -> primary_expr
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_primary_expr == NULL ? NULL : stream_primary_expr->nextTree(stream_primary_expr));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // grunt.g:321:35: ( '++' -> ^( OP_POST_INCR $post_unary_expr) | '--' -> ^( OP_POST_DECR $post_unary_expr) | '.' IDENTIFIER -> ^( OP_ELEMENT $post_unary_expr IDENTIFIER ) | '[' expr ']' -> ^( OP_INDEX $post_unary_expr expr ) | argument_list -> ^( OP_CALL_FUNC $post_unary_expr argument_list ) )*

            for (;;)
            {
                int alt34=6;
                switch ( LA(1) ) 
                {
                case 129:
                	{
                		alt34=1;
                	}
                    break;
                case 130:
                	{
                		alt34=2;
                	}
                    break;
                case 131:
                	{
                		alt34=3;
                	}
                    break;
                case 132:
                	{
                		alt34=4;
                	}
                    break;
                case 86:
                	{
                		alt34=5;
                	}
                    break;

                }

                switch (alt34) 
                {
            	case 1:
            	    // grunt.g:322:5: '++'
            	    {
            	        string_literal175 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_post_unary_expr2063); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepost_unary_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, string_literal175, NULL); }


            	         
            	        /* AST REWRITE
            	         * elements          : post_unary_expr
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 322:10: -> ^( OP_POST_INCR $post_unary_expr)
            	        	{
            	        	    // grunt.g:322:13: ^( OP_POST_INCR $post_unary_expr)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_POST_INCR, (pANTLR3_UINT8)"OP_POST_INCR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // grunt.g:323:6: '--'
            	    {
            	        string_literal176 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_post_unary_expr2079); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepost_unary_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, string_literal176, NULL); }


            	         
            	        /* AST REWRITE
            	         * elements          : post_unary_expr
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 323:11: -> ^( OP_POST_DECR $post_unary_expr)
            	        	{
            	        	    // grunt.g:323:14: ^( OP_POST_DECR $post_unary_expr)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_POST_DECR, (pANTLR3_UINT8)"OP_POST_DECR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // grunt.g:324:6: '.' IDENTIFIER
            	    {
            	        char_literal177 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_post_unary_expr2095); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepost_unary_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal177, NULL); }

            	        IDENTIFIER178 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_post_unary_expr2097); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepost_unary_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, IDENTIFIER178, NULL); }


            	         
            	        /* AST REWRITE
            	         * elements          : post_unary_expr, IDENTIFIER
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 324:21: -> ^( OP_ELEMENT $post_unary_expr IDENTIFIER )
            	        	{
            	        	    // grunt.g:324:24: ^( OP_ELEMENT $post_unary_expr IDENTIFIER )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_ELEMENT, (pANTLR3_UINT8)"OP_ELEMENT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_IDENTIFIER == NULL ? NULL : stream_IDENTIFIER->nextNode(stream_IDENTIFIER));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 4:
            	    // grunt.g:325:6: '[' expr ']'
            	    {
            	        char_literal179 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_post_unary_expr2115); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepost_unary_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, char_literal179, NULL); }

            	        FOLLOWPUSH(FOLLOW_expr_in_post_unary_expr2117);
            	        expr180=expr(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepost_unary_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr180.tree, NULL); }
            	        char_literal181 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_post_unary_expr2119); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepost_unary_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal181, NULL); }


            	         
            	        /* AST REWRITE
            	         * elements          : post_unary_expr, expr
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 325:19: -> ^( OP_INDEX $post_unary_expr expr )
            	        	{
            	        	    // grunt.g:325:22: ^( OP_INDEX $post_unary_expr expr )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_INDEX, (pANTLR3_UINT8)"OP_INDEX"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 5:
            	    // grunt.g:326:6: argument_list
            	    {
            	        FOLLOWPUSH(FOLLOW_argument_list_in_post_unary_expr2137);
            	        argument_list182=argument_list(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepost_unary_exprEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_argument_list; stream_argument_list->add(stream_argument_list, argument_list182.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : argument_list, post_unary_expr
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 326:20: -> ^( OP_CALL_FUNC $post_unary_expr argument_list )
            	        	{
            	        	    // grunt.g:326:23: ^( OP_CALL_FUNC $post_unary_expr argument_list )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OP_CALL_FUNC, (pANTLR3_UINT8)"OP_CALL_FUNC"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_argument_list == NULL ? NULL : stream_argument_list->nextTree(stream_argument_list));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepost_unary_exprEx; /* Prevent compiler warnings */
    rulepost_unary_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_argument_list != NULL) stream_argument_list->free(stream_argument_list);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
        if (stream_primary_expr != NULL) stream_primary_expr->free(stream_primary_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end post_unary_expr */

/** 
 * $ANTLR start primary_expr
 * grunt.g:332:1: primary_expr : ( string_literal_rule | integer_literal_rule | float_literal_rule | '(' expr ')' -> expr | IDENTIFIER | function_definition | '__this_func__' -> THIS_FUNC | dictionary_value );
 */
static gruntParser_primary_expr_return
primary_expr(pgruntParser ctx)
{   
    gruntParser_primary_expr_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal186;
    pANTLR3_COMMON_TOKEN    char_literal188;
    pANTLR3_COMMON_TOKEN    IDENTIFIER189;
    pANTLR3_COMMON_TOKEN    string_literal191;
    gruntParser_string_literal_rule_return string_literal_rule183;
    #undef	RETURN_TYPE_string_literal_rule183
    #define	RETURN_TYPE_string_literal_rule183 gruntParser_string_literal_rule_return

    gruntParser_integer_literal_rule_return integer_literal_rule184;
    #undef	RETURN_TYPE_integer_literal_rule184
    #define	RETURN_TYPE_integer_literal_rule184 gruntParser_integer_literal_rule_return

    gruntParser_float_literal_rule_return float_literal_rule185;
    #undef	RETURN_TYPE_float_literal_rule185
    #define	RETURN_TYPE_float_literal_rule185 gruntParser_float_literal_rule_return

    gruntParser_expr_return expr187;
    #undef	RETURN_TYPE_expr187
    #define	RETURN_TYPE_expr187 gruntParser_expr_return

    gruntParser_function_definition_return function_definition190;
    #undef	RETURN_TYPE_function_definition190
    #define	RETURN_TYPE_function_definition190 gruntParser_function_definition_return

    gruntParser_dictionary_value_return dictionary_value192;
    #undef	RETURN_TYPE_dictionary_value192
    #define	RETURN_TYPE_dictionary_value192 gruntParser_dictionary_value_return

    pANTLR3_BASE_TREE char_literal186_tree;
    pANTLR3_BASE_TREE char_literal188_tree;
    pANTLR3_BASE_TREE IDENTIFIER189_tree;
    pANTLR3_BASE_TREE string_literal191_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_134;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_86;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_87;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal186       = NULL;
    char_literal188       = NULL;
    IDENTIFIER189       = NULL;
    string_literal191       = NULL;
    string_literal_rule183.tree = NULL;

    integer_literal_rule184.tree = NULL;

    float_literal_rule185.tree = NULL;

    expr187.tree = NULL;

    function_definition190.tree = NULL;

    dictionary_value192.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal186_tree   = NULL;
    char_literal188_tree   = NULL;
    IDENTIFIER189_tree   = NULL;
    string_literal191_tree   = NULL;

    stream_134   = NULL;
    #define CREATE_stream_134  if (stream_134 == NULL) {stream_134 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 134"); } 
    stream_86   = NULL;
    #define CREATE_stream_86  if (stream_86 == NULL) {stream_86 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 86"); } 
    stream_87   = NULL;
    #define CREATE_stream_87  if (stream_87 == NULL) {stream_87 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 87"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        {
            //  grunt.g:333:2: ( string_literal_rule | integer_literal_rule | float_literal_rule | '(' expr ')' -> expr | IDENTIFIER | function_definition | '__this_func__' -> THIS_FUNC | dictionary_value )
            
            ANTLR3_UINT32 alt35;

            alt35=8;

            switch ( LA(1) ) 
            {
            case STRING_LITERAL:
            	{
            		alt35=1;
            	}
                break;
            case DECIMAL_INTEGER_LITERAL:
            case HEXADECIMAL_INTEGER_LITERAL:
            	{
            		alt35=2;
            	}
                break;
            case FLOAT_LITERAL:
            	{
            		alt35=3;
            	}
                break;
            case 86:
            	{
            		alt35=4;
            	}
                break;
            case IDENTIFIER:
            	{
            		alt35=5;
            	}
                break;
            case 84:
            	{
            		alt35=6;
            	}
                break;
            case 134:
            	{
            		alt35=7;
            	}
                break;
            case 90:
            	{
            		alt35=8;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 35;
                EXCEPTION->state        = 0;


                goto ruleprimary_exprEx;
            }

            switch (alt35) 
            {
        	case 1:
        	    // grunt.g:333:4: string_literal_rule
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_string_literal_rule_in_primary_expr2166);
        	        string_literal_rule183=string_literal_rule(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, string_literal_rule183.tree);

        	    }
        	    break;
        	case 2:
        	    // grunt.g:334:4: integer_literal_rule
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_integer_literal_rule_in_primary_expr2171);
        	        integer_literal_rule184=integer_literal_rule(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, integer_literal_rule184.tree);

        	    }
        	    break;
        	case 3:
        	    // grunt.g:335:4: float_literal_rule
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_float_literal_rule_in_primary_expr2176);
        	        float_literal_rule185=float_literal_rule(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, float_literal_rule185.tree);

        	    }
        	    break;
        	case 4:
        	    // grunt.g:336:4: '(' expr ')'
        	    {
        	        char_literal186 = (pANTLR3_COMMON_TOKEN) MATCHT(86, &FOLLOW_86_in_primary_expr2181); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_86; stream_86->add(stream_86, char_literal186, NULL); }

        	        FOLLOWPUSH(FOLLOW_expr_in_primary_expr2183);
        	        expr187=expr(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr187.tree, NULL); }
        	        char_literal188 = (pANTLR3_COMMON_TOKEN) MATCHT(87, &FOLLOW_87_in_primary_expr2185); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_87; stream_87->add(stream_87, char_literal188, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expr
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 336:18: -> expr
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // grunt.g:337:4: IDENTIFIER
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        IDENTIFIER189 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_primary_expr2195); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        IDENTIFIER189_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENTIFIER189));
        	        ADAPTOR->addChild(ADAPTOR, root_0, IDENTIFIER189_tree);
        	        }

        	    }
        	    break;
        	case 6:
        	    // grunt.g:338:4: function_definition
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_function_definition_in_primary_expr2200);
        	        function_definition190=function_definition(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, function_definition190.tree);

        	    }
        	    break;
        	case 7:
        	    // grunt.g:339:4: '__this_func__'
        	    {
        	        string_literal191 = (pANTLR3_COMMON_TOKEN) MATCHT(134, &FOLLOW_134_in_primary_expr2205); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_134; stream_134->add(stream_134, string_literal191, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 339:21: -> THIS_FUNC
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, THIS_FUNC, (pANTLR3_UINT8)"THIS_FUNC"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // grunt.g:340:4: dictionary_value
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_dictionary_value_in_primary_expr2215);
        	        dictionary_value192=dictionary_value(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_exprEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, dictionary_value192.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimary_exprEx; /* Prevent compiler warnings */
    ruleprimary_exprEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_134 != NULL) stream_134->free(stream_134);
        if (stream_86 != NULL) stream_86->free(stream_86);
        if (stream_87 != NULL) stream_87->free(stream_87);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end primary_expr */

/** 
 * $ANTLR start dictionary_value
 * grunt.g:343:1: dictionary_value : '{' ( -> ^( DICT_VALUE ) | ( ( '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> ^( DICT_ELEM_VALUE $k expr ) ) ( ',' '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> $dictionary_value ^( DICT_ELEM_VALUE $k expr ) )* -> ^( DICT_VALUE $dictionary_value) ) ) '}' ;
 */
static gruntParser_dictionary_value_return
dictionary_value(pgruntParser ctx)
{   
    gruntParser_dictionary_value_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    k;
    pANTLR3_COMMON_TOKEN    char_literal193;
    pANTLR3_COMMON_TOKEN    char_literal194;
    pANTLR3_COMMON_TOKEN    char_literal195;
    pANTLR3_COMMON_TOKEN    char_literal197;
    pANTLR3_COMMON_TOKEN    char_literal198;
    pANTLR3_COMMON_TOKEN    char_literal199;
    pANTLR3_COMMON_TOKEN    char_literal201;
    gruntParser_expr_return expr196;
    #undef	RETURN_TYPE_expr196
    #define	RETURN_TYPE_expr196 gruntParser_expr_return

    gruntParser_expr_return expr200;
    #undef	RETURN_TYPE_expr200
    #define	RETURN_TYPE_expr200 gruntParser_expr_return

    pANTLR3_BASE_TREE k_tree;
    pANTLR3_BASE_TREE char_literal193_tree;
    pANTLR3_BASE_TREE char_literal194_tree;
    pANTLR3_BASE_TREE char_literal195_tree;
    pANTLR3_BASE_TREE char_literal197_tree;
    pANTLR3_BASE_TREE char_literal198_tree;
    pANTLR3_BASE_TREE char_literal199_tree;
    pANTLR3_BASE_TREE char_literal201_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STRING_LITERAL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_91;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_90;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_82;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_83;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;
    /* Initialize rule variables
     */


    root_0 = NULL;

    k       = NULL;
    char_literal193       = NULL;
    char_literal194       = NULL;
    char_literal195       = NULL;
    char_literal197       = NULL;
    char_literal198       = NULL;
    char_literal199       = NULL;
    char_literal201       = NULL;
    expr196.tree = NULL;

    expr200.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    k_tree   = NULL;
    char_literal193_tree   = NULL;
    char_literal194_tree   = NULL;
    char_literal195_tree   = NULL;
    char_literal197_tree   = NULL;
    char_literal198_tree   = NULL;
    char_literal199_tree   = NULL;
    char_literal201_tree   = NULL;

    stream_STRING_LITERAL   = NULL;
    #define CREATE_stream_STRING_LITERAL  if (stream_STRING_LITERAL == NULL) {stream_STRING_LITERAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STRING_LITERAL"); } 
    stream_91   = NULL;
    #define CREATE_stream_91  if (stream_91 == NULL) {stream_91 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 91"); } 
    stream_90   = NULL;
    #define CREATE_stream_90  if (stream_90 == NULL) {stream_90 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 90"); } 
    stream_82   = NULL;
    #define CREATE_stream_82  if (stream_82 == NULL) {stream_82 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 82"); } 
    stream_83   = NULL;
    #define CREATE_stream_83  if (stream_83 == NULL) {stream_83 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 83"); } 
    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_expr   = NULL;
    #define CREATE_stream_expr  if (stream_expr == NULL) {stream_expr = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expr"); }

    retval.tree  = NULL;
    {
        // grunt.g:344:2: ( '{' ( -> ^( DICT_VALUE ) | ( ( '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> ^( DICT_ELEM_VALUE $k expr ) ) ( ',' '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> $dictionary_value ^( DICT_ELEM_VALUE $k expr ) )* -> ^( DICT_VALUE $dictionary_value) ) ) '}' )
        // grunt.g:344:4: '{' ( -> ^( DICT_VALUE ) | ( ( '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> ^( DICT_ELEM_VALUE $k expr ) ) ( ',' '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> $dictionary_value ^( DICT_ELEM_VALUE $k expr ) )* -> ^( DICT_VALUE $dictionary_value) ) ) '}'
        {
            char_literal193 = (pANTLR3_COMMON_TOKEN) MATCHT(90, &FOLLOW_90_in_dictionary_value2226); 
            if  (HASEXCEPTION())
            {
                goto ruledictionary_valueEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_90; stream_90->add(stream_90, char_literal193, NULL); }


            // grunt.g:344:8: ( -> ^( DICT_VALUE ) | ( ( '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> ^( DICT_ELEM_VALUE $k expr ) ) ( ',' '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> $dictionary_value ^( DICT_ELEM_VALUE $k expr ) )* -> ^( DICT_VALUE $dictionary_value) ) )
            {
                int alt39=2;

                {
                    int LA39_0 = LA(1);
                    if ( (LA39_0 == 91) ) 
                    {
                        alt39=1;
                    }
                    else if ( (LA39_0 == 131) ) 
                    {
                        alt39=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 39;
                        EXCEPTION->state        = 0;


                        goto ruledictionary_valueEx;
                    }
                }
                switch (alt39) 
                {
            	case 1:
            	    // grunt.g:344:10: 
            	    {
            	         
            	        /* AST REWRITE
            	         * elements          : 
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 344:10: -> ^( DICT_VALUE )
            	        	{
            	        	    // grunt.g:344:13: ^( DICT_VALUE )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DICT_VALUE, (pANTLR3_UINT8)"DICT_VALUE"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // grunt.g:344:29: ( ( '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> ^( DICT_ELEM_VALUE $k expr ) ) ( ',' '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> $dictionary_value ^( DICT_ELEM_VALUE $k expr ) )* -> ^( DICT_VALUE $dictionary_value) )
            	    {
            	        // grunt.g:344:29: ( ( '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> ^( DICT_ELEM_VALUE $k expr ) ) ( ',' '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> $dictionary_value ^( DICT_ELEM_VALUE $k expr ) )* -> ^( DICT_VALUE $dictionary_value) )
            	        // grunt.g:344:30: ( '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> ^( DICT_ELEM_VALUE $k expr ) ) ( ',' '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> $dictionary_value ^( DICT_ELEM_VALUE $k expr ) )*
            	        {
            	            // grunt.g:344:30: ( '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> ^( DICT_ELEM_VALUE $k expr ) )
            	            // grunt.g:344:31: '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr
            	            {
            	                char_literal194 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_dictionary_value2240); 
            	                if  (HASEXCEPTION())
            	                {
            	                    goto ruledictionary_valueEx;
            	                }
            	                if (HASFAILED())
            	                {
            	                    return retval;
            	                } 
            	                if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal194, NULL); }


            	                // grunt.g:344:35: (k= IDENTIFIER | k= STRING_LITERAL )
            	                {
            	                    int alt36=2;

            	                    {
            	                        int LA36_0 = LA(1);
            	                        if ( (LA36_0 == IDENTIFIER) ) 
            	                        {
            	                            alt36=1;
            	                        }
            	                        else if ( (LA36_0 == STRING_LITERAL) ) 
            	                        {
            	                            alt36=2;
            	                        }
            	                        else 
            	                        {
            	                            if (BACKTRACKING>0)
            	                            {
            	                                FAILEDFLAG = ANTLR3_TRUE; 
            	                                return retval;
            	                            }
            	                        
            	                            CONSTRUCTEX();
            	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                            EXCEPTION->message      = (void *)"";
            	                            EXCEPTION->decisionNum  = 36;
            	                            EXCEPTION->state        = 0;


            	                            goto ruledictionary_valueEx;
            	                        }
            	                    }
            	                    switch (alt36) 
            	                    {
            	                	case 1:
            	                	    // grunt.g:344:36: k= IDENTIFIER
            	                	    {
            	                	        k = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_dictionary_value2247); 
            	                	        if  (HASEXCEPTION())
            	                	        {
            	                	            goto ruledictionary_valueEx;
            	                	        }
            	                	        if (HASFAILED())
            	                	        {
            	                	            return retval;
            	                	        } 
            	                	        if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, k, NULL); }


            	                	    }
            	                	    break;
            	                	case 2:
            	                	    // grunt.g:344:53: k= STRING_LITERAL
            	                	    {
            	                	        k = (pANTLR3_COMMON_TOKEN) MATCHT(STRING_LITERAL, &FOLLOW_STRING_LITERAL_in_dictionary_value2255); 
            	                	        if  (HASEXCEPTION())
            	                	        {
            	                	            goto ruledictionary_valueEx;
            	                	        }
            	                	        if (HASFAILED())
            	                	        {
            	                	            return retval;
            	                	        } 
            	                	        if ( BACKTRACKING==0 ) { CREATE_stream_STRING_LITERAL; stream_STRING_LITERAL->add(stream_STRING_LITERAL, k, NULL); }

            	                	        if ( BACKTRACKING==0 ) 
            	                	        {
            	                	            patch_STRING_LITERAL(k, ctx);
            	                	        }

            	                	    }
            	                	    break;

            	                    }
            	                }
            	                char_literal195 = (pANTLR3_COMMON_TOKEN) MATCHT(82, &FOLLOW_82_in_dictionary_value2260); 
            	                if  (HASEXCEPTION())
            	                {
            	                    goto ruledictionary_valueEx;
            	                }
            	                if (HASFAILED())
            	                {
            	                    return retval;
            	                } 
            	                if ( BACKTRACKING==0 ) { CREATE_stream_82; stream_82->add(stream_82, char_literal195, NULL); }

            	                FOLLOWPUSH(FOLLOW_expr_in_dictionary_value2262);
            	                expr196=expr(ctx);

            	                FOLLOWPOP();
            	                if  (HASEXCEPTION())
            	                {
            	                    goto ruledictionary_valueEx;
            	                }
            	                if (HASFAILED())
            	                {
            	                    return retval;
            	                }
            	                if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr196.tree, NULL); }

            	                 
            	                /* AST REWRITE
            	                 * elements          : k, expr
            	                 * token labels      : k
            	                 * rule labels       : retval
            	                 * token list labels : 
            	                 * rule list labels  : 
            	                 */
            	                if ( BACKTRACKING==0 ) 
            	                {
            	                	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_k;
            	                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	                	stream_k=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token k", k);
            	                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	                	retval.tree    = root_0;
            	                	// 344:115: -> ^( DICT_ELEM_VALUE $k expr )
            	                	{
            	                	    // grunt.g:344:118: ^( DICT_ELEM_VALUE $k expr )
            	                	    {
            	                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DICT_ELEM_VALUE, (pANTLR3_UINT8)"DICT_ELEM_VALUE"), root_1));

            	                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_k == NULL ? NULL : stream_k->nextNode(stream_k));
            	                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	                	    }

            	                	}

            	                	retval.tree = root_0; // set result root
            	                	if (stream_k != NULL) stream_k->free(stream_k); 
            	                	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	                }
            	            }


            	            // grunt.g:344:146: ( ',' '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr -> $dictionary_value ^( DICT_ELEM_VALUE $k expr ) )*

            	            for (;;)
            	            {
            	                int alt38=2;
            	                {
            	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                    */
            	                    int LA38_0 = LA(1);
            	                    if ( (LA38_0 == 83) ) 
            	                    {
            	                        alt38=1;
            	                    }

            	                }
            	                switch (alt38) 
            	                {
            	            	case 1:
            	            	    // grunt.g:344:147: ',' '.' (k= IDENTIFIER | k= STRING_LITERAL ) '=' expr
            	            	    {
            	            	        char_literal197 = (pANTLR3_COMMON_TOKEN) MATCHT(83, &FOLLOW_83_in_dictionary_value2277); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto ruledictionary_valueEx;
            	            	        }
            	            	        if (HASFAILED())
            	            	        {
            	            	            return retval;
            	            	        } 
            	            	        if ( BACKTRACKING==0 ) { CREATE_stream_83; stream_83->add(stream_83, char_literal197, NULL); }

            	            	        char_literal198 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_dictionary_value2279); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto ruledictionary_valueEx;
            	            	        }
            	            	        if (HASFAILED())
            	            	        {
            	            	            return retval;
            	            	        } 
            	            	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal198, NULL); }


            	            	        // grunt.g:344:155: (k= IDENTIFIER | k= STRING_LITERAL )
            	            	        {
            	            	            int alt37=2;

            	            	            {
            	            	                int LA37_0 = LA(1);
            	            	                if ( (LA37_0 == IDENTIFIER) ) 
            	            	                {
            	            	                    alt37=1;
            	            	                }
            	            	                else if ( (LA37_0 == STRING_LITERAL) ) 
            	            	                {
            	            	                    alt37=2;
            	            	                }
            	            	                else 
            	            	                {
            	            	                    if (BACKTRACKING>0)
            	            	                    {
            	            	                        FAILEDFLAG = ANTLR3_TRUE; 
            	            	                        return retval;
            	            	                    }
            	            	                
            	            	                    CONSTRUCTEX();
            	            	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            	                    EXCEPTION->message      = (void *)"";
            	            	                    EXCEPTION->decisionNum  = 37;
            	            	                    EXCEPTION->state        = 0;


            	            	                    goto ruledictionary_valueEx;
            	            	                }
            	            	            }
            	            	            switch (alt37) 
            	            	            {
            	            	        	case 1:
            	            	        	    // grunt.g:344:156: k= IDENTIFIER
            	            	        	    {
            	            	        	        k = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_dictionary_value2286); 
            	            	        	        if  (HASEXCEPTION())
            	            	        	        {
            	            	        	            goto ruledictionary_valueEx;
            	            	        	        }
            	            	        	        if (HASFAILED())
            	            	        	        {
            	            	        	            return retval;
            	            	        	        } 
            	            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, k, NULL); }


            	            	        	    }
            	            	        	    break;
            	            	        	case 2:
            	            	        	    // grunt.g:344:173: k= STRING_LITERAL
            	            	        	    {
            	            	        	        k = (pANTLR3_COMMON_TOKEN) MATCHT(STRING_LITERAL, &FOLLOW_STRING_LITERAL_in_dictionary_value2294); 
            	            	        	        if  (HASEXCEPTION())
            	            	        	        {
            	            	        	            goto ruledictionary_valueEx;
            	            	        	        }
            	            	        	        if (HASFAILED())
            	            	        	        {
            	            	        	            return retval;
            	            	        	        } 
            	            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_STRING_LITERAL; stream_STRING_LITERAL->add(stream_STRING_LITERAL, k, NULL); }

            	            	        	        if ( BACKTRACKING==0 ) 
            	            	        	        {
            	            	        	            patch_STRING_LITERAL(k, ctx);
            	            	        	        }

            	            	        	    }
            	            	        	    break;

            	            	            }
            	            	        }
            	            	        char_literal199 = (pANTLR3_COMMON_TOKEN) MATCHT(82, &FOLLOW_82_in_dictionary_value2299); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto ruledictionary_valueEx;
            	            	        }
            	            	        if (HASFAILED())
            	            	        {
            	            	            return retval;
            	            	        } 
            	            	        if ( BACKTRACKING==0 ) { CREATE_stream_82; stream_82->add(stream_82, char_literal199, NULL); }

            	            	        FOLLOWPUSH(FOLLOW_expr_in_dictionary_value2301);
            	            	        expr200=expr(ctx);

            	            	        FOLLOWPOP();
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto ruledictionary_valueEx;
            	            	        }
            	            	        if (HASFAILED())
            	            	        {
            	            	            return retval;
            	            	        }
            	            	        if ( BACKTRACKING==0 ) { CREATE_stream_expr; stream_expr->add(stream_expr, expr200.tree, NULL); }

            	            	         
            	            	        /* AST REWRITE
            	            	         * elements          : expr, k, dictionary_value
            	            	         * token labels      : k
            	            	         * rule labels       : retval
            	            	         * token list labels : 
            	            	         * rule list labels  : 
            	            	         */
            	            	        if ( BACKTRACKING==0 ) 
            	            	        {
            	            	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_k;
            	            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	        	stream_k=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token k", k);
            	            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        	retval.tree    = root_0;
            	            	        	// 344:235: -> $dictionary_value ^( DICT_ELEM_VALUE $k expr )
            	            	        	{
            	            	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	        	    // grunt.g:344:256: ^( DICT_ELEM_VALUE $k expr )
            	            	        	    {
            	            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DICT_ELEM_VALUE, (pANTLR3_UINT8)"DICT_ELEM_VALUE"), root_1));

            	            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_k == NULL ? NULL : stream_k->nextNode(stream_k));
            	            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	        	    }

            	            	        	}

            	            	        	retval.tree = root_0; // set result root
            	            	        	if (stream_k != NULL) stream_k->free(stream_k); 
            	            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            	        }
            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop38;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop38: ; /* Jump out to here if this rule does not match */


            	             
            	            /* AST REWRITE
            	             * elements          : dictionary_value
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 344:285: -> ^( DICT_VALUE $dictionary_value)
            	            	{
            	            	    // grunt.g:344:288: ^( DICT_VALUE $dictionary_value)
            	            	    {
            	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DICT_VALUE, (pANTLR3_UINT8)"DICT_VALUE"), root_1));

            	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

            	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	            	    }

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;

                }
            }
            char_literal201 = (pANTLR3_COMMON_TOKEN) MATCHT(91, &FOLLOW_91_in_dictionary_value2330); 
            if  (HASEXCEPTION())
            {
                goto ruledictionary_valueEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_91; stream_91->add(stream_91, char_literal201, NULL); }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledictionary_valueEx; /* Prevent compiler warnings */
    ruledictionary_valueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_STRING_LITERAL != NULL) stream_STRING_LITERAL->free(stream_STRING_LITERAL);
        if (stream_91 != NULL) stream_91->free(stream_91);
        if (stream_90 != NULL) stream_90->free(stream_90);
        if (stream_82 != NULL) stream_82->free(stream_82);
        if (stream_83 != NULL) stream_83->free(stream_83);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_expr != NULL) stream_expr->free(stream_expr);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end dictionary_value */

/** 
 * $ANTLR start string_literal_rule
 * grunt.g:347:1: string_literal_rule : STRING_LITERAL ;
 */
static gruntParser_string_literal_rule_return
string_literal_rule(pgruntParser ctx)
{   
    gruntParser_string_literal_rule_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    STRING_LITERAL202;

    pANTLR3_BASE_TREE STRING_LITERAL202_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    STRING_LITERAL202       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    STRING_LITERAL202_tree   = NULL;


    retval.tree  = NULL;
    {
        // grunt.g:348:2: ( STRING_LITERAL )
        // grunt.g:348:4: STRING_LITERAL
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            STRING_LITERAL202 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING_LITERAL, &FOLLOW_STRING_LITERAL_in_string_literal_rule2341); 
            if  (HASEXCEPTION())
            {
                goto rulestring_literal_ruleEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            STRING_LITERAL202_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, STRING_LITERAL202));
            ADAPTOR->addChild(ADAPTOR, root_0, STRING_LITERAL202_tree);
            }
            if ( BACKTRACKING==0 ) 
            {

                			patch_STRING_LITERAL(STRING_LITERAL202, ctx);
                		
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestring_literal_ruleEx; /* Prevent compiler warnings */
    rulestring_literal_ruleEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end string_literal_rule */

/** 
 * $ANTLR start integer_literal_rule
 * grunt.g:363:1: integer_literal_rule : ( DECIMAL_INTEGER_LITERAL | HEXADECIMAL_INTEGER_LITERAL );
 */
static gruntParser_integer_literal_rule_return
integer_literal_rule(pgruntParser ctx)
{   
    gruntParser_integer_literal_rule_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set203;

    pANTLR3_BASE_TREE set203_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set203       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set203_tree   = NULL;


    retval.tree  = NULL;
    {
        // grunt.g:364:2: ( DECIMAL_INTEGER_LITERAL | HEXADECIMAL_INTEGER_LITERAL )
        // grunt.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set203=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= DECIMAL_INTEGER_LITERAL) && (LA(1) <= HEXADECIMAL_INTEGER_LITERAL)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set203)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_integer_literal_rule0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_integer_literal_rule0);    goto ruleinteger_literal_ruleEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinteger_literal_ruleEx; /* Prevent compiler warnings */
    ruleinteger_literal_ruleEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end integer_literal_rule */

/** 
 * $ANTLR start float_literal_rule
 * grunt.g:377:1: float_literal_rule : FLOAT_LITERAL ;
 */
static gruntParser_float_literal_rule_return
float_literal_rule(pgruntParser ctx)
{   
    gruntParser_float_literal_rule_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    FLOAT_LITERAL204;

    pANTLR3_BASE_TREE FLOAT_LITERAL204_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    FLOAT_LITERAL204       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    FLOAT_LITERAL204_tree   = NULL;


    retval.tree  = NULL;
    {
        // grunt.g:378:2: ( FLOAT_LITERAL )
        // grunt.g:378:4: FLOAT_LITERAL
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FLOAT_LITERAL204 = (pANTLR3_COMMON_TOKEN) MATCHT(FLOAT_LITERAL, &FOLLOW_FLOAT_LITERAL_in_float_literal_rule2500); 
            if  (HASEXCEPTION())
            {
                goto rulefloat_literal_ruleEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            FLOAT_LITERAL204_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, FLOAT_LITERAL204));
            ADAPTOR->addChild(ADAPTOR, root_0, FLOAT_LITERAL204_tree);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefloat_literal_ruleEx; /* Prevent compiler warnings */
    rulefloat_literal_ruleEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end float_literal_rule */

// $ANTLR start synpred1_grunt
static void synpred1_grunt_fragment(pgruntParser ctx ) 
{
    // grunt.g:133:4: ( comma_stat ';' )
    // grunt.g:133:5: comma_stat ';'
    {
        FOLLOWPUSH(FOLLOW_comma_stat_in_synpred1_grunt338);
        comma_stat(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_gruntEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(77, &FOLLOW_77_in_synpred1_grunt340); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_gruntEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred1_gruntEx; /* Prevent compiler warnings */
rulesynpred1_gruntEx: ;

}
// $ANTLR end synpred1_grunt

// $ANTLR start synpred2_grunt
static void synpred2_grunt_fragment(pgruntParser ctx ) 
{
    // grunt.g:159:34: ( 'else' )
    // grunt.g:159:35: 'else'
    {
         MATCHT(88, &FOLLOW_88_in_synpred2_grunt570); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred2_gruntEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred2_gruntEx; /* Prevent compiler warnings */
rulesynpred2_gruntEx: ;

}
// $ANTLR end synpred2_grunt
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred1_grunt(pgruntParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_grunt_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred2_grunt(pgruntParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred2_grunt_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
