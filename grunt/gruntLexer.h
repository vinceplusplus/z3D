/** \file
 *  This C header file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : grunt.g
 *     -                            On : 2009-03-20 09:47:20
 *     -                 for the lexer : gruntLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer gruntLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pgruntLexer, which is returned from a call to gruntLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pgruntLexer are  as follows:
 *
 *  -  void      pgruntLexer->T__77(pgruntLexer)
 *  -  void      pgruntLexer->T__78(pgruntLexer)
 *  -  void      pgruntLexer->T__79(pgruntLexer)
 *  -  void      pgruntLexer->T__80(pgruntLexer)
 *  -  void      pgruntLexer->T__81(pgruntLexer)
 *  -  void      pgruntLexer->T__82(pgruntLexer)
 *  -  void      pgruntLexer->T__83(pgruntLexer)
 *  -  void      pgruntLexer->T__84(pgruntLexer)
 *  -  void      pgruntLexer->T__85(pgruntLexer)
 *  -  void      pgruntLexer->T__86(pgruntLexer)
 *  -  void      pgruntLexer->T__87(pgruntLexer)
 *  -  void      pgruntLexer->T__88(pgruntLexer)
 *  -  void      pgruntLexer->T__89(pgruntLexer)
 *  -  void      pgruntLexer->T__90(pgruntLexer)
 *  -  void      pgruntLexer->T__91(pgruntLexer)
 *  -  void      pgruntLexer->T__92(pgruntLexer)
 *  -  void      pgruntLexer->T__93(pgruntLexer)
 *  -  void      pgruntLexer->T__94(pgruntLexer)
 *  -  void      pgruntLexer->T__95(pgruntLexer)
 *  -  void      pgruntLexer->T__96(pgruntLexer)
 *  -  void      pgruntLexer->T__97(pgruntLexer)
 *  -  void      pgruntLexer->T__98(pgruntLexer)
 *  -  void      pgruntLexer->T__99(pgruntLexer)
 *  -  void      pgruntLexer->T__100(pgruntLexer)
 *  -  void      pgruntLexer->T__101(pgruntLexer)
 *  -  void      pgruntLexer->T__102(pgruntLexer)
 *  -  void      pgruntLexer->T__103(pgruntLexer)
 *  -  void      pgruntLexer->T__104(pgruntLexer)
 *  -  void      pgruntLexer->T__105(pgruntLexer)
 *  -  void      pgruntLexer->T__106(pgruntLexer)
 *  -  void      pgruntLexer->T__107(pgruntLexer)
 *  -  void      pgruntLexer->T__108(pgruntLexer)
 *  -  void      pgruntLexer->T__109(pgruntLexer)
 *  -  void      pgruntLexer->T__110(pgruntLexer)
 *  -  void      pgruntLexer->T__111(pgruntLexer)
 *  -  void      pgruntLexer->T__112(pgruntLexer)
 *  -  void      pgruntLexer->T__113(pgruntLexer)
 *  -  void      pgruntLexer->T__114(pgruntLexer)
 *  -  void      pgruntLexer->T__115(pgruntLexer)
 *  -  void      pgruntLexer->T__116(pgruntLexer)
 *  -  void      pgruntLexer->T__117(pgruntLexer)
 *  -  void      pgruntLexer->T__118(pgruntLexer)
 *  -  void      pgruntLexer->T__119(pgruntLexer)
 *  -  void      pgruntLexer->T__120(pgruntLexer)
 *  -  void      pgruntLexer->T__121(pgruntLexer)
 *  -  void      pgruntLexer->T__122(pgruntLexer)
 *  -  void      pgruntLexer->T__123(pgruntLexer)
 *  -  void      pgruntLexer->T__124(pgruntLexer)
 *  -  void      pgruntLexer->T__125(pgruntLexer)
 *  -  void      pgruntLexer->T__126(pgruntLexer)
 *  -  void      pgruntLexer->T__127(pgruntLexer)
 *  -  void      pgruntLexer->T__128(pgruntLexer)
 *  -  void      pgruntLexer->T__129(pgruntLexer)
 *  -  void      pgruntLexer->T__130(pgruntLexer)
 *  -  void      pgruntLexer->T__131(pgruntLexer)
 *  -  void      pgruntLexer->T__132(pgruntLexer)
 *  -  void      pgruntLexer->T__133(pgruntLexer)
 *  -  void      pgruntLexer->T__134(pgruntLexer)
 *  -  void      pgruntLexer->IDENTIFIER(pgruntLexer)
 *  -  void      pgruntLexer->STRING_LITERAL(pgruntLexer)
 *  -  void      pgruntLexer->DECIMAL_INTEGER_LITERAL(pgruntLexer)
 *  -  void      pgruntLexer->HEXADECIMAL_INTEGER_LITERAL(pgruntLexer)
 *  -  void      pgruntLexer->FLOAT_LITERAL(pgruntLexer)
 *  -  void      pgruntLexer->FLOAT_EXPONENT(pgruntLexer)
 *  -  void      pgruntLexer->STRING_BASIC_CHAR(pgruntLexer)
 *  -  void      pgruntLexer->STRING_ESC_SEQ(pgruntLexer)
 *  -  void      pgruntLexer->SL_COMMENT(pgruntLexer)
 *  -  void      pgruntLexer->ML_COMMENT(pgruntLexer)
 *  -  void      pgruntLexer->WS(pgruntLexer)
 *  -  void      pgruntLexer->INCLUDE_FILENAME(pgruntLexer)
 *  -  void      pgruntLexer->LINE_COMMAND(pgruntLexer)
 *  -  void      pgruntLexer->Tokens(pgruntLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_gruntLexer_H
#define _gruntLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct gruntLexer_Ctx_struct gruntLexer, * pgruntLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for gruntLexer
 */
struct gruntLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mT__77)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__78)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__79)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__80)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__81)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__82)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__83)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__84)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__85)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__86)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__87)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__88)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__89)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__90)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__91)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__92)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__93)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__94)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__95)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__96)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__97)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__98)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__99)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__100)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__101)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__102)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__103)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__104)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__105)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__106)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__107)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__108)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__109)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__110)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__111)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__112)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__113)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__114)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__115)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__116)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__117)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__118)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__119)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__120)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__121)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__122)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__123)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__124)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__125)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__126)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__127)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__128)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__129)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__130)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__131)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__132)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__133)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mT__134)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mIDENTIFIER)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mSTRING_LITERAL)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mDECIMAL_INTEGER_LITERAL)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mHEXADECIMAL_INTEGER_LITERAL)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mFLOAT_LITERAL)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mFLOAT_EXPONENT)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mSTRING_BASIC_CHAR)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mSTRING_ESC_SEQ)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mSL_COMMENT)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mML_COMMENT)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mWS)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mINCLUDE_FILENAME)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mLINE_COMMAND)	(struct gruntLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct gruntLexer_Ctx_struct * ctx);    const char * (*getGrammarFileName)();
    void	    (*free)   (struct gruntLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pgruntLexer gruntLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pgruntLexer gruntLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define OP_BITWISE_AND      21
#define HEXADECIMAL_INTEGER_LITERAL      69
#define OP_LOGICAL_AND      18
#define OP_MUL_ASSIGN      8
#define SWITCH_CASE_LABEL      51
#define CP_BLOCK      46
#define EOF      -1
#define T__93      93
#define T__94      94
#define OP_MOD      32
#define T__91      91
#define T__92      92
#define STRING_LITERAL      65
#define T__90      90
#define OP_NOT_EQUAL      22
#define IF_STAT      49
#define OP_PRE_DECR      41
#define PARAMETER_LIST      48
#define T__99      99
#define OP_LOGICAL_OR      17
#define T__98      98
#define T__97      97
#define T__96      96
#define T__95      95
#define OP_GREATER_EQUAL      27
#define OP_LOGICAL_NOT      38
#define OP_GREATER      26
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define THIS_FUNC      61
#define OP_OR_ASSIGN      14
#define OP_ADD      30
#define SWITCH_STAT      50
#define FOR_STAT      52
#define OP_MOD_ASSIGN      10
#define OP_UNARY_MINUS      4
#define OP_DIV      34
#define FUNC_DEF      59
#define STRING_ESC_SEQ      67
#define T__85      85
#define T__84      84
#define T__87      87
#define OP_SUB_ASSIGN      7
#define T__86      86
#define T__89      89
#define T__88      88
#define T__126      126
#define WHILE_STAT      53
#define T__125      125
#define OP_POST_INCR      35
#define T__128      128
#define T__127      127
#define WS      74
#define T__129      129
#define COMMA_BLOCK      45
#define OP_XOR_ASSIGN      15
#define LINE_COMMAND      76
#define SL_COMMENT      72
#define OP_EQUAL      23
#define STRING_BASIC_CHAR      66
#define DECIMAL_INTEGER_LITERAL      68
#define OP_SHIFT_RIGHT_ASSIGN      12
#define T__130      130
#define T__131      131
#define T__132      132
#define T__79      79
#define T__133      133
#define T__78      78
#define T__134      134
#define OP_BITWISE_NOT      37
#define T__77      77
#define OP_CALL_FUNC      44
#define OP_ASSIGN      5
#define OP_CONDITIONAL      16
#define OP_BITWISE_OR      19
#define T__118      118
#define T__119      119
#define T__116      116
#define T__117      117
#define T__114      114
#define T__115      115
#define T__124      124
#define OP_MUL      33
#define T__123      123
#define OP_PRE_INCR      40
#define T__122      122
#define T__121      121
#define T__120      120
#define OP_BITWISE_XOR      20
#define LOCAL_DECLARATION_STAT      55
#define OP_LESS      24
#define ML_COMMENT      73
#define OP_SUB      31
#define OP_LESS_EQUAL      25
#define OP_INDEX      43
#define T__107      107
#define OP_SHIFT_RIGHT      29
#define T__108      108
#define OP_ELEMENT      42
#define T__109      109
#define IDENTIFIER      64
#define T__103      103
#define T__104      104
#define BREAK_STAT      57
#define T__105      105
#define T__106      106
#define T__111      111
#define T__110      110
#define T__113      113
#define ARGUMENT_LIST      47
#define T__112      112
#define OP_DIV_ASSIGN      9
#define FLOAT_EXPONENT      71
#define DICT_ELEM_VALUE      63
#define OP_SHIFT_LEFT      28
#define T__102      102
#define T__101      101
#define T__100      100
#define INCLUDE_FILENAME      75
#define OP_POST_DECR      36
#define RETURN_STAT      60
#define DO_WHILE_STAT      54
#define CONTINUE_STAT      58
#define EMPTY_EXPR      56
#define FLOAT_LITERAL      70
#define OP_AND_ASSIGN      13
#define OP_ADD_ASSIGN      6
#define OP_NEGATE      39
#define OP_SHIFT_LEFT_ASSIGN      11
#define DICT_VALUE      62
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for gruntLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
