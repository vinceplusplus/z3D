
#pragma once

#include "predecl.h"
#include "mutex.h"
#include "BitArray.h"
#include "fast_string.h"

namespace z3D
{
	namespace Core
	{
		class TypeInfo
		{
		private:
			static vector<TypeInfo*>	_g_type_info;
			static mutex				_g_mx;
			static uint32_t				_g_next_id;
		public:
			static TypeInfo*			registerType(const wchar_t* name, const wchar_t* desc, size_t parents, ...);
			static TypeInfo*			getRegTypeInfo(size_t index);
			static size_t				regTypeInfos();
		private:
			uint32_t			_id;
			BitArray			_parent;
			BitArray			_kind_of;
			wcs					_name;
			wcs					_desc;
		public:
			TypeInfo(const wcs& name, const wcs& desc);
			~TypeInfo();
		public:
			const wcs&			name() const {return _name;}
			const wcs&			desc() const {return _desc;}
		public:
			size_t				parents() const;
			TypeInfo*			firstParent();
			TypeInfo*			nextParent();
		public:
			bool				kind_of(const TypeInfo* ti) const {return _kind_of.testSAFE(ti->_id);}
			bool				exactly(const TypeInfo* ti) const {return this == ti;}
		public:
			friend class CoreDeinit;
		};

		/*
		class TypedObjRoot
		{
			DECL_TYPEINFO();
		};*/

		// DECL_TYPEINFO should be used inside class declaration
#define DECL_TYPEINFO()																		\
	private:																				\
		static const TypeInfo*			_typeinfo;											\
	public:																					\
		static const TypeInfo*			type_info_static() {return _typeinfo;}				\
		virtual const TypeInfo*			type_info() const {return type_info_static();}

		// IMPL_TYPEINFO should be used in a central place like a dedicated cpp file to initialize type infos within a dll/exe project in sequence
#define IMPL_TYPEINFO(name,desc,CLASSNAME,BASECLASSNAME)			const TypeInfo* CLASSNAME::_typeinfo = TypeInfo::registerType(name, desc, 1, BASECLASSNAME::type_info_static());
		// for root version IMPL_TYPEINFO 
#define IMPL_TYPEINFO_ROOT(name,desc,CLASSNAME)						const TypeInfo* CLASSNAME::_typeinfo = TypeInfo::registerType(name, desc, 0);
		// for 2 to 8 base classes
#define IMPL_TYPEINFO2(name,desc,CLASSNAME,BASECLASSNAME0,BASECLASSNAME1)																							const TypeInfo* CLASSNAME::_typeinfo=TypeInfo::registerType(name,desc,2,BASECLASSNAME0::type_info_static(),BASECLASSNAME1::type_info_static());
#define IMPL_TYPEINFO3(name,desc,CLASSNAME,BASECLASSNAME0,BASECLASSNAME1,BASECLASSNAME2)																			const TypeInfo* CLASSNAME::_typeinfo=TypeInfo::registerType(name,desc,3,BASECLASSNAME0::type_info_static(),BASECLASSNAME1::type_info_static(),BASECLASSNAME2::type_info_static());
#define IMPL_TYPEINFO4(name,desc,CLASSNAME,BASECLASSNAME0,BASECLASSNAME1,BASECLASSNAME2,BASECLASSNAME3)																const TypeInfo* CLASSNAME::_typeinfo=TypeInfo::registerType(name,desc,4,BASECLASSNAME0::type_info_static(),BASECLASSNAME1::type_info_static(),BASECLASSNAME2::type_info_static(),BASECLASSNAME3::type_info_static());
#define IMPL_TYPEINFO5(name,desc,CLASSNAME,BASECLASSNAME0,BASECLASSNAME1,BASECLASSNAME2,BASECLASSNAME3,BASECLASSNAME4)												const TypeInfo* CLASSNAME::_typeinfo=TypeInfo::registerType(name,desc,5,BASECLASSNAME0::type_info_static(),BASECLASSNAME1::type_info_static(),BASECLASSNAME2::type_info_static(),BASECLASSNAME3::type_info_static(),BASECLASSNAME4::type_info_static());
#define IMPL_TYPEINFO6(name,desc,CLASSNAME,BASECLASSNAME0,BASECLASSNAME1,BASECLASSNAME2,BASECLASSNAME3,BASECLASSNAME4,BASECLASSNAME5)								const TypeInfo* CLASSNAME::_typeinfo=TypeInfo::registerType(name,desc,6,BASECLASSNAME0::type_info_static(),BASECLASSNAME1::type_info_static(),BASECLASSNAME2::type_info_static(),BASECLASSNAME3::type_info_static(),BASECLASSNAME4::type_info_static(),BASECLASSNAME5::type_info_static());
#define IMPL_TYPEINFO7(name,desc,CLASSNAME,BASECLASSNAME0,BASECLASSNAME1,BASECLASSNAME2,BASECLASSNAME3,BASECLASSNAME4,BASECLASSNAME5,BASECLASSNAME6)				const TypeInfo* CLASSNAME::_typeinfo=TypeInfo::registerType(name,desc,7,BASECLASSNAME0::type_info_static(),BASECLASSNAME1::type_info_static(),BASECLASSNAME2::type_info_static(),BASECLASSNAME3::type_info_static(),BASECLASSNAME4::type_info_static(),BASECLASSNAME5::type_info_static(),BASECLASSNAME6::type_info_static());
#define IMPL_TYPEINFO8(name,desc,CLASSNAME,BASECLASSNAME0,BASECLASSNAME1,BASECLASSNAME2,BASECLASSNAME3,BASECLASSNAME4,BASECLASSNAME5,BASECLASSNAME6,BASECLASSNAME7)	const TypeInfo* CLASSNAME::_typeinfo=TypeInfo::registerType(name,desc,8,BASECLASSNAME0::type_info_static(),BASECLASSNAME1::type_info_static(),BASECLASSNAME2::type_info_static(),BASECLASSNAME3::type_info_static(),BASECLASSNAME4::type_info_static(),BASECLASSNAME5::type_info_static(),BASECLASSNAME6::type_info_static(),BASECLASSNAME7::type_info_static());

		// NOTICE: macros generated by gen_typeinfo.java
	};
};

