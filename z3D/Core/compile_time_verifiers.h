
#pragma once

template<size_t WANTED_SIZE, size_t CURRENT_SIZE>
class SIZE_VERIFIER
{
public:
	SIZE_VERIFIER()
	{
		Z_STATIC_ASSERT( WANTED_SIZE == CURRENT_SIZE, WRONG_SIZE );
	}
};

template<size_t WANTED_ALIGNMENT, size_t CURRENT_ALIGNMENT>
class ALIGNMENT_VERIFIER
{
public:
	ALIGNMENT_VERIFIER()
	{
		Z_STATIC_ASSERT( WANTED_ALIGNMENT == CURRENT_ALIGNMENT, WRONG_ALIGNMENT );
	}
};

template<ptrdiff_t WANTED_INTEGER, ptrdiff_t CURRENT_INTEGER>
class INTEGER_VERIFIER
{
public:
	INTEGER_VERIFIER()	{		Z_STATIC_ASSERT( WANTED_INTEGER == CURRENT_INTEGER, WRONG_INTEGER );	}
};

template<bool REPORT, ptrdiff_t THE_INTEGER>
class INTEGER_REPORTER
{
public:
	INTEGER_REPORTER()	{		Z_STATIC_ASSERT( !REPORT, REPORTED );	}
};

template<size_t CURRENT_INTEGER, size_t COMPERAND>
class ASSURE_GEQUAL
{
public:
	ASSURE_GEQUAL()	{		Z_STATIC_ASSERT( CURRENT_INTEGER >= COMPERAND, WRONG_INTEGER );	}
};

template<size_t CURRENT_INTEGER, size_t COMPERAND>
class ASSURE_EQUAL
{
public:
	ASSURE_EQUAL()	{		Z_STATIC_ASSERT( CURRENT_INTEGER >= COMPERAND, WRONG_INTEGER );	}
};

