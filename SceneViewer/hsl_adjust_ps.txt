
float guard_zero(float x)
{
	return x ? x : 1;
}

float3 rgb2hsl(float3 rgb)
{
	float3 hsl;
	float _min = min(min(rgb.x, rgb.y), rgb.z);
	float _max = max(max(rgb.x, rgb.y), rgb.z);
	float inv_delta = 1.0 / guard_zero(_max - _min);
	float3 h = frac((60.0 / 360.0) * inv_delta * (rgb.yzx - rgb.zxy) + float3(360.0 / 360.0, 120.0 / 360.0, 240.0 / 360.0));

	hsl.z = 0.5 * (_max + _min);

	float2 s = (_max - _min) / float2(2 * hsl.z, guard_zero(2.0 - 2.0 * hsl.z));

	hsl.x = (_max == _min) ? 0 : (_max == rgb.x ? h.x : (_max == rgb.y ? h.y : h.z));
	hsl.y = (_max == _min) ? 0 : (hsl.z <= 0.5 ? s.x : s.y);

	return hsl;
}

float3 hsl2rgb(float3 hsl)
{
	float q = hsl.z < 0.5 ? hsl.z * (1 + hsl.y) : hsl.z + hsl.y - (hsl.z * hsl.y);
	float p = 2 * hsl.z - q;
	float3 t = frac(hsl.xxx + float3(1.0 / 3, 0, -1.0 / 3) + float3(1, 1, 1));

	return t < 1.0 / 6 ? (p + ((q - p) * 6 * t)) : (t < 0.5 ? q : (t < 2.0 / 3 ? (p + ((q - p) * 6 * (2.0 / 3 - t))) : p));
}

float4x4 xform;

sampler2D sampler_0: register(s0);

void main(
	float4 in_color : COLOR,
	float4 in_tc_0: TEXCOORD0,
	out float4 out_color : COLOR,
	uniform float4 END_PARAMS = 0
)
{

	float3 hsl = rgb2hsl(saturate(in_color.xyz * tex2D(sampler_0, in_tc_0)));

	float4 adjusted = mul(float4(hsl, 1), xform);
	hsl = adjusted.xyz / adjusted.w;
	hsl.x = frac(hsl.x);
	hsl.yz = saturate(hsl.yz);

	out_color = float4(hsl2rgb(hsl), 1);
}